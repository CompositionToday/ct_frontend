Index: src/components/adminView/ScrapedCompetitions.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {\n  Paper,\n  Menu,\n  Badge,\n  Table,\n  Text,\n  ActionIcon,\n  ScrollArea,\n  useMantineTheme,\n  Container,\n  createStyles,\n  LoadingOverlay,\n  Skeleton,\n  Checkbox,\n  Button,\n  Modal,\n} from \"@mantine/core\";\nimport { OpportunityItem } from \"../opportunity/OpportunityHelper\";\nimport { ScrapedPost } from \"./ScrapedPostHelper\";\nimport { FormHeader } from \"../opportunity/CreateOpportunityHelper\";\nimport {\n  IconBan,\n  IconTrash,\n  IconArrowBigUpLine,\n  IconCheck,\n  IconArrowBigDownLine,\n  IconDots,\n} from \"@tabler/icons\";\nimport { auth } from \"../../Firebase\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { showNotification } from \"@mantine/notifications\";\nimport { openAdminModal } from \"./modals/AdminModal\";\nimport { openDeleteModal } from \"./modals/DeleteModal\";\nimport { openBanModal } from \"./modals/BanModal\";\nimport {\n  PaginationNavbar,\n  PaginationSearchObject,\n} from \"../pagination/PaginationNavbar\";\nimport { useMediaQuery } from \"@mantine/hooks\";\nimport { PaginationNavbarScraper } from \"../pagination/PaginationNavbarScraper\";\nimport { SearchAndFilterScraped } from \"./SearchAndFilterScraped\";\nimport { OpportunityForm } from \"../opportunity/OpportunityForm\";\nimport { ScrapedPostForm } from \"./ScrapedPostForm\";\n\ninterface CompetitionTableData {\n  UID?: string;\n  idposts?: number;\n  title?: string;\n  description?: string;\n  link?: string;\n  organization?: string;\n  category?: string;\n  deadline?: string;\n  cityState?: string;\n}\n\nconst typeColors: Record<string, string> = {\n  regular: \"blue\",\n  admin: \"green\",\n  banned: \"red\",\n};\n\nconst useStyles = createStyles((theme) => ({\n  container: {\n    width: \"90vw\",\n    padding: \"0px\",\n\n    [theme.fn.smallerThan(\"md\")]: {\n      width: \"100%\",\n    },\n  },\n\n  userContainer: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    position: \"relative\",\n    zIndex: 1,\n    borderColor: \"#939393\",\n\n    [theme.fn.smallerThan(\"md\")]: {\n      padding: \"15px\",\n      borderRadius: \"0px\",\n    },\n\n    [theme.fn.largerThan(\"sm\")]: {\n      height: \"90vh\",\n    },\n  },\n  noDataContainer: {\n    display: \"flex\",\n    justifyContent: \"center\", // Center horizontally\n  alignItems: \"center\",\n    position: \"relative\",\n    zIndex: 1,\n    borderColor: \"#939393\",\n\n    \n\n    [theme.fn.largerThan(\"sm\")]: {\n      height: \"5vh\",\n    },\n  },\n\n  table: {\n    maxWidth: \"100%\",\n    flexBasis: \"100%\",\n\n    [theme.fn.smallerThan(\"md\")]: {\n      maxHeight: \"90vh\",\n      padding: \"0px\",\n    },\n  },\n\n  bold: {\n    fontWeight: 700,\n  },\n\n  header: {\n    position: \"sticky\",\n    top: 0,\n    backgroundColor:\n      theme.colorScheme === \"dark\" ? theme.colors.dark[7] : theme.white,\n    transition: \"box-shadow 150ms ease\",\n\n    \"&::after\": {\n      content: '\"\"',\n      position: \"absolute\",\n      zIndex: 1,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      borderBottom: `1px solid ${\n        theme.colorScheme === \"dark\"\n          ? theme.colors.dark[3]\n          : theme.colors.gray[2]\n      }`,\n    },\n  },\n\n  scrolled: {\n    // boxShadow: theme.shadows.sm,\n  },\n}));\n\nexport function ScrapedCompetitions() {\n  const theme = useMantineTheme();\n  const { classes, cx } = useStyles();\n  const [rawCompetitionList, setRawCompetitionList] = useState<ScrapedPost[]>([]);\n  const [selectedRows, setSelectedRows] = useState<number[]>([]);\n  const [currentOpportunity, setCurrentOpportunity] =\n    useState<ScrapedPost | null>(null);\n  const [selectAll, setSelectAll] = useState(false);\n  const [displayOpportunityEditModal, setDisplayOpportunityEditModal] =\n    useState(false);\n  const [displayOpportunityInfoModal, setDisplayOpportunityInfoModal] =\n    useState(false);\n  const [CompetitionList, setCompetitionList] = useState<CompetitionTableData[]>([]); // Corrected variable name\n  const [searchParams, setSearchParams] = useState<PaginationSearchObject>({\n    keyword: \"\",\n  });\n  const [CurrentPage, setCurrentPage] = useState(1); // Add CurrentPage state\n  const [scrolled, setScrolled] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [recall, setRecall] = useState(0);\n  const smallerScreen = useMediaQuery(\"(max-width: 992px)\");\n\n  const handleCurrentPageChange = (count: number) => {\n    setCurrentPage(count);\n  };\n\n\n  useEffect(() => {\n    onAuthStateChanged(auth, async (user) => {\n      if (user && user.email) {\n        setSearchParams({ ...searchParams,});\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    convertRawCompetitionDataToTableData();\n  }, [rawCompetitionList, searchParams]);\n\n  useEffect(() => {\n    console.log(\"loading changed to:\", loading);\n  }, [loading]);\n\n  const convertRawCompetitionDataToTableData = () => {\n    let newCompetitionList: CompetitionTableData[] = [];\n    rawCompetitionList?.forEach((CompetitionItem) => {\n      const startDate = CompetitionItem.start_date ? new Date(CompetitionItem.start_date) : null;\n      const deadline = CompetitionItem.end_date ? new Date(CompetitionItem.end_date) : null;\n  \n      let formattedCompetitionData: CompetitionTableData = {\n        UID: CompetitionItem.UID,\n        idposts: CompetitionItem.idposts,\n        title: CompetitionItem.title,\n        description: CompetitionItem.description,\n        link: CompetitionItem.link,\n        organization: CompetitionItem.organization,\n        deadline: deadline ? `${deadline.toLocaleString('en-us', { month: 'long' })} ${deadline.getDate()}, ${deadline.getFullYear()}` : \"\",\n        cityState: CompetitionItem.city + \", \" + CompetitionItem.state,\n      };\n      newCompetitionList.push(formattedCompetitionData);\n    });\n    setCompetitionList(newCompetitionList);\n  };\n\n  const mobileScreen = useMediaQuery(\"(max-width: 768px)\");\n  const dragState = useRef({\n    isDragging: false,\n    startRowIndex: -1,\n    endRowIndex: -1,\n  });\n  \n  const handleMouseDown = (index: number) => {\n    dragState.current.isDragging = true;\n    dragState.current.startRowIndex = index;\n    dragState.current.endRowIndex = index;\n  };\n  \n  const handleMouseEnter = (index: number) => {\n    if (dragState.current.isDragging) {\n      dragState.current.endRowIndex = index;\n      const start = Math.min(\n        dragState.current.startRowIndex,\n        dragState.current.endRowIndex\n      );\n      const end = Math.max(\n        dragState.current.startRowIndex,\n        dragState.current.endRowIndex\n      );\n      const selectedIDPosts = [...selectedRows];\n      const id = rawCompetitionList[dragState.current.startRowIndex]?.idposts ?? -1;\n    if (selectedIDPosts.includes(id)) {\n      // If the startRowIndex is in the selectedRows list,\n      // add new IDPosts to the selectedRows\n      for (let i = start; i <= end; i++) {\n        if (!selectedIDPosts.includes(rawCompetitionList[i]?.idposts ?? -1)) {\n          selectedIDPosts.push(rawCompetitionList[i]?.idposts ?? -1);\n        }\n      }\n    } else {\n      // Otherwise, remove dragged elements if they are in the list\n      for (let i = start; i <= end; i++) {\n        const indexToRemove = selectedIDPosts.indexOf(rawCompetitionList[i]?.idposts ?? -1);\n        if (indexToRemove !== -1) {\n          selectedIDPosts.splice(indexToRemove, 1);\n        }\n      }\n    }\n    setSelectedRows(selectedIDPosts);\n    }\n  };\n  \n  const handleMouseUp = () => {\n    dragState.current.isDragging = false;\n  };\n\n  const handleRowSelect = (idposts: number) => {\n    setSelectedRows(prevSelectedRows => {\n      if (prevSelectedRows.includes(idposts)) {\n        // If UID is already selected, remove it from the selectedRows\n        return prevSelectedRows.filter(row => row !== idposts);\n      } else {\n        // Otherwise, add it to the selectedRows\n        return [...prevSelectedRows, idposts];\n      }\n    });\n  };\n  const editFunction = async (opportunity: ScrapedPost) => {\n    try {\n      let idpost = currentOpportunity?.idposts;\n      // Delete the idposts in the opportunity such that the backend doesn't actually update the idpost column in mySQL.\n      // This shouldn't be necessary to do at all but have it here just in-case the idposts here is some how different from the idposts in the url parameters and/or in mySQL\n      \n      delete opportunity.idposts;\n      delete opportunity.first_name;\n      delete opportunity.last_name;\n      delete opportunity.email;\n      delete opportunity.is_banned;\n      delete opportunity.is_admin;\n      delete opportunity.ban_message;\n\n      for (let key in opportunity) {\n        if (\n          !opportunity[key as keyof typeof opportunity] &&\n          key !== \"winner\" &&\n          key !== \"city\" &&\n          key !== \"state\" &&\n          key !== \"address\"\n        ) {\n          delete opportunity[key as keyof typeof opportunity];\n        }\n      }\n\n      console.log(\"formatted edit body:\", opportunity);\n\n      let requestOptions = {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(opportunity),\n      };\n\n      let response = await fetch(\n        `https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday/Competitions/${idpost}`,\n        requestOptions\n      );\n\n      let responseJson = await response.json();\n\n      let editedOpportunity = responseJson.listOfObjects[0];\n\n      return editedOpportunity;\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const handleEditButton = async (opportunity: ScrapedPost) => {\n    try {\n      //delete opportunity.UID;\n      //delete opportunity.date_posted;\n      \n\n      // Format any keys of type number to be as type strings since the APIs only accept strings for the request body\n      opportunity.end_date = opportunity.end_date?.toString();\n      opportunity.start_date = opportunity.start_date?.toString();\n      opportunity.deadline = opportunity.deadline?.toString();\n      opportunity.salary = opportunity.salary?.toString();\n      opportunity.fee = opportunity.fee?.toString();\n\n      let editedOpportunity = await editFunction(opportunity);\n\n      for (let i = 0; i < rawCompetitionList.length; i++) {\n        if (rawCompetitionList[i].idposts === editedOpportunity.idposts) {\n          let tempArray = rawCompetitionList;\n          tempArray[i] = editedOpportunity;\n          setRawCompetitionList([...tempArray]);\n          break;\n        }\n      }\n\n      showNotification({\n        title: \"Edits Applied\",\n        message: \"Your changes have been applied\",\n        color: \"green\",\n      });\n      setDisplayOpportunityEditModal(false);\n    } catch (err) {\n      console.log(err);\n      showNotification({\n        title: \"Error\",\n        message: \"There was a problem, please try again later\",\n        color: \"red\",\n      });\n    }\n  };\n  \n\n  const rows = CompetitionList?.map((item, index) => (\n    <tr \n      onMouseDown={() => handleMouseDown(index)}\n      onMouseEnter={() => handleMouseEnter(index)}\n      onMouseUp={handleMouseUp}\n      \n        onClick={() => handleRowSelect(item.idposts ?? -1)}\n        style={{\n          backgroundColor: selectedRows.includes(item.idposts ?? -1) ? \"#e6f7ff\" : \"inherit\",\n          cursor: \"pointer\",\n          \n        }}\n    >\n      \n      <td>\n        <Text size=\"sm\" weight={500}>\n          {item.title}\n        </Text>\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.description}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.link}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.organization}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.cityState}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.deadline}\n          </Text>\n        )}\n      </td>\n      {!mobileScreen && (\n        <td>\n          <Container style={{ width: 400 }}>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.description}\n          </Text>\n          </Container>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\" >\n            {item.organization}\n          </Text>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Container style={{ width: 100 }}>\n          <a href={item.link} target='_blank'  color=\"dimmed\" style={{ overflowWrap: 'break-word' }}>\n          {item.link}\n          </a>\n          </Container>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.deadline}\n          </Text>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.cityState}\n          </Text>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.deadline}\n          </Text>\n        </td>\n      )}\n      \n      <td>\n      <Button \n        variant=\"outline\" \n        size=\"sm\" \n        onClick={() => {\n          setDisplayOpportunityEditModal(true);\n          setCurrentOpportunity(rawCompetitionList[index]);\n        }}\n      >\n        Edit\n      </Button>\n    </td>      \n    </tr>\n    \n  ));\n\n  const loadingRows = [1, 2, 3, 4, 5, 6, 7].map((item, index) => (\n    <tr key={index}>\n      <td>\n        <Skeleton\n          height={8}\n          width=\"40%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n        />\n        {mobileScreen && (\n          <Skeleton\n            height={6}\n            width=\"100%\"\n            radius=\"xl\"\n            sx={{ margin: \"8px 0px\" }}\n            \n          />\n        )}\n      </td>\n      {!mobileScreen && (\n        <td>\n          <Skeleton\n            height={16}\n            width=\"100%\"\n            radius=\"xl\"\n            sx={{ margin: \"8px 0px\" }}\n            \n          />\n        </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"40%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n        \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n    </tr>\n  ));\n\n\n\n  const handleSelectAll = () => {\n    if (selectAll) {\n      // If all rows are selected, deselect all\n      setSelectedRows([]);\n      setSelectAll(false);\n    } else {\n      // Otherwise, select all rows\n      const allRowIDs = CompetitionList.map(item => item.idposts ?? -1);\n      setSelectedRows(allRowIDs);\n      setSelectAll(true);\n    }\n  };\n  const handleSelectedRowsUpdate = (updatedSelectedRows: number[]) => {\n    setSelectedRows(updatedSelectedRows);\n    \n  };\n\n  const handleUpdate = () => {\n    setRecall((prevRecall) => prevRecall + 1);\n  }\n\n  return (\n    <Container fluid className={classes.container}>\n      <SearchAndFilterScraped\n        setSearchObjs={setSearchParams}\n        selectedRows={selectedRows}\n        onUpdateSelectedRows={handleSelectedRowsUpdate}\n        onUpdate={handleUpdate}\n        rawData={rawCompetitionList}\n  />\n\n      <Paper\n        withBorder\n        mt={30}\n        radius=\"lg\"\n        className={cx(classes.userContainer, {\n          [classes.noDataContainer]: rawCompetitionList.length === 0,\n        })}\n        sx={{ padding: \"40px 20px\" }}\n      >\n        <LoadingOverlay\n          visible={loading}\n          overlayOpacity={0.2}\n          overlayBlur={0.2}\n          radius=\"lg\"\n        />\n        {rawCompetitionList.length === 0 ? (\n        \n          <Text size=\"lg\" weight={500} align=\"center\" style={{ color: '#42A563',\n    fontSize: '36px',\n    textAlign: \"center\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"100%\",}}>\n            No New Competitions\n          </Text>\n       \n        ) : (\n        <ScrollArea w=\"100%\" h=\"90%\">\n          <Container className={classes.table}>\n            <Table verticalSpacing=\"sm\">\n              <thead\n                className={cx(classes.header, {\n                  [classes.scrolled]: scrolled,\n                })}\n              >\n                <tr>\n                  \n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"40%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Title\"\n                    )}\n                  </th>\n                  \n                  {!mobileScreen && (\n                    <th style={{textAlign: \"center\"}}>\n                      {loading ? (\n                        <Skeleton\n                          height={12}\n                          width=\"50%\"\n                          radius=\"xl\"\n                          sx={{ margin: \"8px 0px\" }}\n                          \n                        />\n                      ) : (\n                        \"Description\"\n                      )}\n                    </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Organization\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (\n                    <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Link\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Application Deadline\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (\n                    <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"City/State\"\n                    )}\n                  </th>\n                  )}\n                  \n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>{loading ? loadingRows : rows}</tbody>\n            </Table>\n          </Container>\n        </ScrollArea>\n        )}\n        {\n          <Container sx={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", marginTop: \"30px\"}}>\n          <PaginationNavbarScraper\n            apiEndpointExtension={\"competitions\"}\n            numberOfItemsPerPage={10}\n            setListOfObjects={setRawCompetitionList}\n            searchFilterObject={searchParams}\n            setLoading={setLoading}\n            recall={recall}\n            //curPage = {CurrentPage}\n          />\n          \n          </Container>\n        }\n      </Paper>\n      <Modal\n        opened={displayOpportunityEditModal}\n        onClose={() => {\n          setDisplayOpportunityEditModal(false);\n        }}\n        fullScreen={smallerScreen}\n        size=\"60%\"\n      >\n        <FormHeader>Edit Post</FormHeader>\n        <ScrapedPostForm\n          edit={true}\n          opportunityType={\n            \"Competitions\"\n          }\n          opportunity={currentOpportunity ? currentOpportunity : undefined}\n          displayWinnerInput\n          handleSubmission={handleEditButton}\n        />\n      </Modal>\n    </Container>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/adminView/ScrapedCompetitions.tsx b/src/components/adminView/ScrapedCompetitions.tsx
--- a/src/components/adminView/ScrapedCompetitions.tsx	
+++ b/src/components/adminView/ScrapedCompetitions.tsx	
@@ -14,10 +14,10 @@
   Checkbox,
   Button,
   Modal,
-} from "@mantine/core";
-import { OpportunityItem } from "../opportunity/OpportunityHelper";
-import { ScrapedPost } from "./ScrapedPostHelper";
-import { FormHeader } from "../opportunity/CreateOpportunityHelper";
+} from '@mantine/core'
+import {OpportunityItem} from '../opportunity/OpportunityHelper'
+import {ScrapedPost} from './ScrapedPostHelper'
+import {FormHeader} from '../opportunity/CreateOpportunityHelper'
 import {
   IconBan,
   IconTrash,
@@ -25,90 +25,88 @@
   IconCheck,
   IconArrowBigDownLine,
   IconDots,
-} from "@tabler/icons";
-import { auth } from "../../Firebase";
-import { onAuthStateChanged } from "firebase/auth";
-import { useEffect, useState, useRef } from "react";
-import { showNotification } from "@mantine/notifications";
-import { openAdminModal } from "./modals/AdminModal";
-import { openDeleteModal } from "./modals/DeleteModal";
-import { openBanModal } from "./modals/BanModal";
+} from '@tabler/icons'
+import {auth} from '../../Firebase'
+import {onAuthStateChanged} from 'firebase/auth'
+import {useEffect, useState, useRef} from 'react'
+import {showNotification} from '@mantine/notifications'
+import {openAdminModal} from './modals/AdminModal'
+import {openDeleteModal} from './modals/DeleteModal'
+import {openBanModal} from './modals/BanModal'
 import {
   PaginationNavbar,
   PaginationSearchObject,
-} from "../pagination/PaginationNavbar";
-import { useMediaQuery } from "@mantine/hooks";
-import { PaginationNavbarScraper } from "../pagination/PaginationNavbarScraper";
-import { SearchAndFilterScraped } from "./SearchAndFilterScraped";
-import { OpportunityForm } from "../opportunity/OpportunityForm";
-import { ScrapedPostForm } from "./ScrapedPostForm";
+} from '../pagination/PaginationNavbar'
+import {useMediaQuery} from '@mantine/hooks'
+import {PaginationNavbarScraper} from '../pagination/PaginationNavbarScraper'
+import {SearchAndFilterScraped} from './SearchAndFilterScraped'
+import {OpportunityForm} from '../opportunity/OpportunityForm'
+import {ScrapedPostForm} from './ScrapedPostForm'
 
 interface CompetitionTableData {
-  UID?: string;
-  idposts?: number;
-  title?: string;
-  description?: string;
-  link?: string;
-  organization?: string;
-  category?: string;
-  deadline?: string;
-  cityState?: string;
+  UID?: string
+  idposts?: number
+  title?: string
+  description?: string
+  link?: string
+  organization?: string
+  category?: string
+  deadline?: string
+  cityState?: string
 }
 
 const typeColors: Record<string, string> = {
-  regular: "blue",
-  admin: "green",
-  banned: "red",
-};
+  regular: 'blue',
+  admin: 'green',
+  banned: 'red',
+}
 
 const useStyles = createStyles((theme) => ({
   container: {
-    width: "90vw",
-    padding: "0px",
+    width: '90vw',
+    padding: '0px',
 
-    [theme.fn.smallerThan("md")]: {
-      width: "100%",
+    [theme.fn.smallerThan('md')]: {
+      width: '100%',
     },
   },
 
   userContainer: {
-    display: "flex",
-    flexWrap: "wrap",
-    position: "relative",
+    display: 'flex',
+    flexWrap: 'wrap',
+    position: 'relative',
     zIndex: 1,
-    borderColor: "#939393",
+    borderColor: '#939393',
 
-    [theme.fn.smallerThan("md")]: {
-      padding: "15px",
-      borderRadius: "0px",
+    [theme.fn.smallerThan('md')]: {
+      padding: '15px',
+      borderRadius: '0px',
     },
 
-    [theme.fn.largerThan("sm")]: {
-      height: "90vh",
+    [theme.fn.largerThan('sm')]: {
+      height: '90vh',
     },
   },
   noDataContainer: {
-    display: "flex",
-    justifyContent: "center", // Center horizontally
-  alignItems: "center",
-    position: "relative",
+    display: 'flex',
+    justifyContent: 'center', // Center horizontally
+    alignItems: 'center',
+    position: 'relative',
     zIndex: 1,
-    borderColor: "#939393",
+    borderColor: '#939393',
 
-    
-
-    [theme.fn.largerThan("sm")]: {
-      height: "5vh",
+    [theme.fn.largerThan('sm')]: {
+      height: '5vh',
     },
   },
 
   table: {
-    maxWidth: "100%",
-    flexBasis: "100%",
+    maxWidth: '100%',
+    flexBasis: '100%',
 
-    [theme.fn.smallerThan("md")]: {
-      maxHeight: "90vh",
-      padding: "0px",
+    [theme.fn.smallerThan('md')]: {
+      maxHeight: '90vh',
+      padding: '0px',
     },
   },
 
@@ -117,21 +115,21 @@
   },
 
   header: {
-    position: "sticky",
+    position: 'sticky',
     top: 0,
     backgroundColor:
-      theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white,
-    transition: "box-shadow 150ms ease",
+      theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,
+    transition: 'box-shadow 150ms ease',
 
-    "&::after": {
+    '&::after': {
       content: '""',
-      position: "absolute",
+      position: 'absolute',
       zIndex: 1,
       left: 0,
       right: 0,
       bottom: 0,
       borderBottom: `1px solid ${
-        theme.colorScheme === "dark"
+        theme.colorScheme === 'dark'
           ? theme.colors.dark[3]
           : theme.colors.gray[2]
       }`,
@@ -141,57 +139,64 @@
   scrolled: {
     // boxShadow: theme.shadows.sm,
   },
-}));
+}))
 
 export function ScrapedCompetitions() {
-  const theme = useMantineTheme();
-  const { classes, cx } = useStyles();
-  const [rawCompetitionList, setRawCompetitionList] = useState<ScrapedPost[]>([]);
-  const [selectedRows, setSelectedRows] = useState<number[]>([]);
+  const theme = useMantineTheme()
+  const {classes, cx} = useStyles()
+  const [rawCompetitionList, setRawCompetitionList] = useState<ScrapedPost[]>(
+    [],
+  )
+  const [selectedRows, setSelectedRows] = useState<number[]>([])
   const [currentOpportunity, setCurrentOpportunity] =
-    useState<ScrapedPost | null>(null);
-  const [selectAll, setSelectAll] = useState(false);
+    useState<ScrapedPost | null>(null)
+  const [selectAll, setSelectAll] = useState(false)
   const [displayOpportunityEditModal, setDisplayOpportunityEditModal] =
-    useState(false);
+    useState(false)
   const [displayOpportunityInfoModal, setDisplayOpportunityInfoModal] =
-    useState(false);
-  const [CompetitionList, setCompetitionList] = useState<CompetitionTableData[]>([]); // Corrected variable name
+    useState(false)
+  const [CompetitionList, setCompetitionList] = useState<
+    CompetitionTableData[]
+  >([]) // Corrected variable name
   const [searchParams, setSearchParams] = useState<PaginationSearchObject>({
-    keyword: "",
-  });
-  const [CurrentPage, setCurrentPage] = useState(1); // Add CurrentPage state
-  const [scrolled, setScrolled] = useState(false);
-  const [loading, setLoading] = useState(true);
-  const [recall, setRecall] = useState(0);
-  const smallerScreen = useMediaQuery("(max-width: 992px)");
+    keyword: '',
+  })
+  const [CurrentPage, setCurrentPage] = useState(1) // Add CurrentPage state
+  const [scrolled, setScrolled] = useState(false)
+  const [loading, setLoading] = useState(true)
+  const [recall, setRecall] = useState(0)
+  const smallerScreen = useMediaQuery('(max-width: 992px)')
 
   const handleCurrentPageChange = (count: number) => {
-    setCurrentPage(count);
-  };
-
+    setCurrentPage(count)
+  }
 
   useEffect(() => {
     onAuthStateChanged(auth, async (user) => {
       if (user && user.email) {
-        setSearchParams({ ...searchParams,});
+        setSearchParams({...searchParams})
       }
-    });
-  }, []);
+    })
+  }, [])
 
   useEffect(() => {
-    convertRawCompetitionDataToTableData();
-  }, [rawCompetitionList, searchParams]);
+    convertRawCompetitionDataToTableData()
+  }, [rawCompetitionList, searchParams])
 
   useEffect(() => {
-    console.log("loading changed to:", loading);
-  }, [loading]);
+    console.log('loading changed to:', loading)
+  }, [loading])
 
   const convertRawCompetitionDataToTableData = () => {
-    let newCompetitionList: CompetitionTableData[] = [];
+    let newCompetitionList: CompetitionTableData[] = []
     rawCompetitionList?.forEach((CompetitionItem) => {
-      const startDate = CompetitionItem.start_date ? new Date(CompetitionItem.start_date) : null;
-      const deadline = CompetitionItem.end_date ? new Date(CompetitionItem.end_date) : null;
-  
+      const startDate = CompetitionItem.start_date
+        ? new Date(CompetitionItem.start_date)
+        : null
+      const deadline = CompetitionItem.end_date
+        ? new Date(CompetitionItem.end_date)
+        : null
+
       let formattedCompetitionData: CompetitionTableData = {
         UID: CompetitionItem.UID,
         idposts: CompetitionItem.idposts,
@@ -199,180 +204,184 @@
         description: CompetitionItem.description,
         link: CompetitionItem.link,
         organization: CompetitionItem.organization,
-        deadline: deadline ? `${deadline.toLocaleString('en-us', { month: 'long' })} ${deadline.getDate()}, ${deadline.getFullYear()}` : "",
-        cityState: CompetitionItem.city + ", " + CompetitionItem.state,
-      };
-      newCompetitionList.push(formattedCompetitionData);
-    });
-    setCompetitionList(newCompetitionList);
-  };
+        deadline: deadline
+          ? `${deadline.toLocaleString('en-us', {
+              month: 'long',
+            })} ${deadline.getDate()}, ${deadline.getFullYear()}`
+          : '',
+        cityState: CompetitionItem.city + ', ' + CompetitionItem.state,
+      }
+      newCompetitionList.push(formattedCompetitionData)
+    })
+    setCompetitionList(newCompetitionList)
+  }
 
-  const mobileScreen = useMediaQuery("(max-width: 768px)");
+  const mobileScreen = useMediaQuery('(max-width: 768px)')
   const dragState = useRef({
     isDragging: false,
     startRowIndex: -1,
     endRowIndex: -1,
-  });
-  
+  })
+
   const handleMouseDown = (index: number) => {
-    dragState.current.isDragging = true;
-    dragState.current.startRowIndex = index;
-    dragState.current.endRowIndex = index;
-  };
-  
+    dragState.current.isDragging = true
+    dragState.current.startRowIndex = index
+    dragState.current.endRowIndex = index
+  }
+
   const handleMouseEnter = (index: number) => {
     if (dragState.current.isDragging) {
-      dragState.current.endRowIndex = index;
+      dragState.current.endRowIndex = index
       const start = Math.min(
         dragState.current.startRowIndex,
-        dragState.current.endRowIndex
-      );
+        dragState.current.endRowIndex,
+      )
       const end = Math.max(
         dragState.current.startRowIndex,
-        dragState.current.endRowIndex
-      );
-      const selectedIDPosts = [...selectedRows];
-      const id = rawCompetitionList[dragState.current.startRowIndex]?.idposts ?? -1;
-    if (selectedIDPosts.includes(id)) {
-      // If the startRowIndex is in the selectedRows list,
-      // add new IDPosts to the selectedRows
-      for (let i = start; i <= end; i++) {
-        if (!selectedIDPosts.includes(rawCompetitionList[i]?.idposts ?? -1)) {
-          selectedIDPosts.push(rawCompetitionList[i]?.idposts ?? -1);
-        }
-      }
-    } else {
-      // Otherwise, remove dragged elements if they are in the list
-      for (let i = start; i <= end; i++) {
-        const indexToRemove = selectedIDPosts.indexOf(rawCompetitionList[i]?.idposts ?? -1);
-        if (indexToRemove !== -1) {
-          selectedIDPosts.splice(indexToRemove, 1);
+        dragState.current.endRowIndex,
+      )
+      const selectedIDPosts = [...selectedRows]
+      const id =
+        rawCompetitionList[dragState.current.startRowIndex]?.idposts ?? -1
+      if (selectedIDPosts.includes(id)) {
+        // If the startRowIndex is in the selectedRows list,
+        // add new IDPosts to the selectedRows
+        for (let i = start; i <= end; i++) {
+          if (!selectedIDPosts.includes(rawCompetitionList[i]?.idposts ?? -1)) {
+            selectedIDPosts.push(rawCompetitionList[i]?.idposts ?? -1)
+          }
+        }
+      } else {
+        // Otherwise, remove dragged elements if they are in the list
+        for (let i = start; i <= end; i++) {
+          const indexToRemove = selectedIDPosts.indexOf(
+            rawCompetitionList[i]?.idposts ?? -1,
+          )
+          if (indexToRemove !== -1) {
+            selectedIDPosts.splice(indexToRemove, 1)
+          }
         }
       }
+      setSelectedRows(selectedIDPosts)
     }
-    setSelectedRows(selectedIDPosts);
-    }
-  };
-  
+  }
+
   const handleMouseUp = () => {
-    dragState.current.isDragging = false;
-  };
+    dragState.current.isDragging = false
+  }
 
   const handleRowSelect = (idposts: number) => {
-    setSelectedRows(prevSelectedRows => {
+    setSelectedRows((prevSelectedRows) => {
       if (prevSelectedRows.includes(idposts)) {
         // If UID is already selected, remove it from the selectedRows
-        return prevSelectedRows.filter(row => row !== idposts);
+        return prevSelectedRows.filter((row) => row !== idposts)
       } else {
         // Otherwise, add it to the selectedRows
-        return [...prevSelectedRows, idposts];
+        return [...prevSelectedRows, idposts]
       }
-    });
-  };
+    })
+  }
   const editFunction = async (opportunity: ScrapedPost) => {
     try {
-      let idpost = currentOpportunity?.idposts;
+      let idpost = currentOpportunity?.idposts
       // Delete the idposts in the opportunity such that the backend doesn't actually update the idpost column in mySQL.
       // This shouldn't be necessary to do at all but have it here just in-case the idposts here is some how different from the idposts in the url parameters and/or in mySQL
-      
-      delete opportunity.idposts;
-      delete opportunity.first_name;
-      delete opportunity.last_name;
-      delete opportunity.email;
-      delete opportunity.is_banned;
-      delete opportunity.is_admin;
-      delete opportunity.ban_message;
+
+      delete opportunity.idposts
+      delete opportunity.first_name
+      delete opportunity.last_name
+      delete opportunity.email
+      delete opportunity.is_banned
+      delete opportunity.is_admin
+      delete opportunity.ban_message
 
       for (let key in opportunity) {
         if (
           !opportunity[key as keyof typeof opportunity] &&
-          key !== "winner" &&
-          key !== "city" &&
-          key !== "state" &&
-          key !== "address"
+          key !== 'winner' &&
+          key !== 'city' &&
+          key !== 'state' &&
+          key !== 'address'
         ) {
-          delete opportunity[key as keyof typeof opportunity];
+          delete opportunity[key as keyof typeof opportunity]
         }
       }
 
-      console.log("formatted edit body:", opportunity);
+      console.log('formatted edit body:', opportunity)
 
       let requestOptions = {
-        method: "PUT",
-        headers: { "Content-Type": "application/json" },
+        method: 'PUT',
+        headers: {'Content-Type': 'application/json'},
         body: JSON.stringify(opportunity),
-      };
+      }
 
       let response = await fetch(
         `https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday/Competitions/${idpost}`,
-        requestOptions
-      );
+        requestOptions,
+      )
 
-      let responseJson = await response.json();
+      let responseJson = await response.json()
 
-      let editedOpportunity = responseJson.listOfObjects[0];
+      let editedOpportunity = responseJson.listOfObjects[0]
 
-      return editedOpportunity;
+      return editedOpportunity
     } catch (err) {
-      console.log(err);
+      console.log(err)
     }
-  };
+  }
 
   const handleEditButton = async (opportunity: ScrapedPost) => {
     try {
       //delete opportunity.UID;
       //delete opportunity.date_posted;
-      
 
       // Format any keys of type number to be as type strings since the APIs only accept strings for the request body
-      opportunity.end_date = opportunity.end_date?.toString();
-      opportunity.start_date = opportunity.start_date?.toString();
-      opportunity.deadline = opportunity.deadline?.toString();
-      opportunity.salary = opportunity.salary?.toString();
-      opportunity.fee = opportunity.fee?.toString();
+      opportunity.end_date = opportunity.end_date?.toString()
+      opportunity.start_date = opportunity.start_date?.toString()
+      opportunity.deadline = opportunity.deadline?.toString()
+      opportunity.salary = opportunity.salary?.toString()
+      opportunity.fee = opportunity.fee?.toString()
 
-      let editedOpportunity = await editFunction(opportunity);
+      let editedOpportunity = await editFunction(opportunity)
 
       for (let i = 0; i < rawCompetitionList.length; i++) {
         if (rawCompetitionList[i].idposts === editedOpportunity.idposts) {
-          let tempArray = rawCompetitionList;
-          tempArray[i] = editedOpportunity;
-          setRawCompetitionList([...tempArray]);
-          break;
+          let tempArray = rawCompetitionList
+          tempArray[i] = editedOpportunity
+          setRawCompetitionList([...tempArray])
+          break
         }
       }
 
       showNotification({
-        title: "Edits Applied",
-        message: "Your changes have been applied",
-        color: "green",
-      });
-      setDisplayOpportunityEditModal(false);
+        title: 'Edits Applied',
+        message: 'Your changes have been applied',
+        color: 'green',
+      })
+      setDisplayOpportunityEditModal(false)
     } catch (err) {
-      console.log(err);
+      console.log(err)
       showNotification({
-        title: "Error",
-        message: "There was a problem, please try again later",
-        color: "red",
-      });
+        title: 'Error',
+        message: 'There was a problem, please try again later',
+        color: 'red',
+      })
     }
-  };
-  
+  }
 
   const rows = CompetitionList?.map((item, index) => (
-    <tr 
+    <tr
       onMouseDown={() => handleMouseDown(index)}
       onMouseEnter={() => handleMouseEnter(index)}
       onMouseUp={handleMouseUp}
-      
-        onClick={() => handleRowSelect(item.idposts ?? -1)}
-        style={{
-          backgroundColor: selectedRows.includes(item.idposts ?? -1) ? "#e6f7ff" : "inherit",
-          cursor: "pointer",
-          
-        }}
+      onClick={() => handleRowSelect(item.idposts ?? -1)}
+      style={{
+        backgroundColor: selectedRows.includes(item.idposts ?? -1)
+          ? '#e6f7ff'
+          : 'inherit',
+        cursor: 'pointer',
+      }}
     >
-      
       <td>
         <Text size="sm" weight={500}>
           {item.title}
@@ -405,26 +414,31 @@
       </td>
       {!mobileScreen && (
         <td>
-          <Container style={{ width: 400 }}>
-          <Text size="sm" color="dimmed">
-            {item.description}
-          </Text>
+          <Container style={{width: 400}}>
+            <Text size="sm" color="dimmed">
+              {item.description}
+            </Text>
           </Container>
         </td>
       )}
       {!mobileScreen && (
         <td>
-          <Text size="sm" color="dimmed" >
+          <Text size="sm" color="dimmed">
             {item.organization}
           </Text>
         </td>
       )}
       {!mobileScreen && (
         <td>
-          <Container style={{ width: 100 }}>
-          <a href={item.link} target='_blank'  color="dimmed" style={{ overflowWrap: 'break-word' }}>
-          {item.link}
-          </a>
+          <Container style={{width: 100}}>
+            <a
+              href={item.link}
+              target="_blank"
+              color="dimmed"
+              style={{overflowWrap: 'break-word'}}
+            >
+              {item.link}
+            </a>
           </Container>
         </td>
       )}
@@ -449,39 +463,32 @@
           </Text>
         </td>
       )}
-      
+
       <td>
-      <Button 
-        variant="outline" 
-        size="sm" 
-        onClick={() => {
-          setDisplayOpportunityEditModal(true);
-          setCurrentOpportunity(rawCompetitionList[index]);
-        }}
-      >
-        Edit
-      </Button>
-    </td>      
+        <Button
+          variant="outline"
+          size="sm"
+          onClick={() => {
+            setDisplayOpportunityEditModal(true)
+            setCurrentOpportunity(rawCompetitionList[index])
+          }}
+        >
+          Edit
+        </Button>
+      </td>
     </tr>
-    
-  ));
+  ))
 
   const loadingRows = [1, 2, 3, 4, 5, 6, 7].map((item, index) => (
     <tr key={index}>
       <td>
-        <Skeleton
-          height={8}
-          width="40%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-        />
+        <Skeleton height={8} width="40%" radius="xl" sx={{margin: '8px 0px'}} />
         {mobileScreen && (
           <Skeleton
             height={6}
             width="100%"
             radius="xl"
-            sx={{ margin: "8px 0px" }}
-            
+            sx={{margin: '8px 0px'}}
           />
         )}
       </td>
@@ -491,123 +498,111 @@
             height={16}
             width="100%"
             radius="xl"
-            sx={{ margin: "8px 0px" }}
-            
+            sx={{margin: '8px 0px'}}
           />
         </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="40%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-        
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="40%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
     </tr>
-  ));
-
-
+  ))
 
   const handleSelectAll = () => {
     if (selectAll) {
       // If all rows are selected, deselect all
-      setSelectedRows([]);
-      setSelectAll(false);
+      setSelectedRows([])
+      setSelectAll(false)
     } else {
       // Otherwise, select all rows
-      const allRowIDs = CompetitionList.map(item => item.idposts ?? -1);
-      setSelectedRows(allRowIDs);
-      setSelectAll(true);
+      const allRowIDs = CompetitionList.map((item) => item.idposts ?? -1)
+      setSelectedRows(allRowIDs)
+      setSelectAll(true)
     }
-  };
+  }
   const handleSelectedRowsUpdate = (updatedSelectedRows: number[]) => {
-    setSelectedRows(updatedSelectedRows);
-    
-  };
+    setSelectedRows(updatedSelectedRows)
+  }
 
   const handleUpdate = () => {
-    setRecall((prevRecall) => prevRecall + 1);
+    setRecall((prevRecall) => prevRecall + 1)
   }
 
   return (
@@ -618,7 +613,7 @@
         onUpdateSelectedRows={handleSelectedRowsUpdate}
         onUpdate={handleUpdate}
         rawData={rawCompetitionList}
-  />
+      />
 
       <Paper
         withBorder
@@ -627,7 +622,7 @@
         className={cx(classes.userContainer, {
           [classes.noDataContainer]: rawCompetitionList.length === 0,
         })}
-        sx={{ padding: "40px 20px" }}
+        sx={{padding: '40px 20px'}}
       >
         <LoadingOverlay
           visible={loading}
@@ -636,145 +631,149 @@
           radius="lg"
         />
         {rawCompetitionList.length === 0 ? (
-        
-          <Text size="lg" weight={500} align="center" style={{ color: '#42A563',
-    fontSize: '36px',
-    textAlign: "center",
-    display: "flex",
-    justifyContent: "center",
-    alignItems: "center",
-    height: "100%",}}>
+          <Text
+            size="lg"
+            weight={500}
+            align="center"
+            style={{
+              color: '#42A563',
+              fontSize: '36px',
+              textAlign: 'center',
+              display: 'flex',
+              justifyContent: 'center',
+              alignItems: 'center',
+              height: '100%',
+            }}
+          >
             No New Competitions
           </Text>
-       
         ) : (
-        <ScrollArea w="100%" h="90%">
-          <Container className={classes.table}>
-            <Table verticalSpacing="sm">
-              <thead
-                className={cx(classes.header, {
-                  [classes.scrolled]: scrolled,
-                })}
-              >
-                <tr>
-                  
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="40%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Title"
-                    )}
-                  </th>
-                  
-                  {!mobileScreen && (
-                    <th style={{textAlign: "center"}}>
-                      {loading ? (
-                        <Skeleton
-                          height={12}
-                          width="50%"
-                          radius="xl"
-                          sx={{ margin: "8px 0px" }}
-                          
-                        />
-                      ) : (
-                        "Description"
-                      )}
-                    </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Organization"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (
-                    <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Link"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Application Deadline"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (
-                    <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "City/State"
-                    )}
-                  </th>
-                  )}
-                  
-                  <th></th>
-                </tr>
-              </thead>
-              <tbody>{loading ? loadingRows : rows}</tbody>
-            </Table>
-          </Container>
-        </ScrollArea>
+          <ScrollArea w="100%" h="90%">
+            <Container className={classes.table}>
+              <Table verticalSpacing="sm">
+                <thead
+                  className={cx(classes.header, {
+                    [classes.scrolled]: scrolled,
+                  })}
+                >
+                  <tr>
+                    <th style={{textAlign: 'center'}}>
+                      {loading ? (
+                        <Skeleton
+                          height={12}
+                          width="40%"
+                          radius="xl"
+                          sx={{margin: '8px 0px'}}
+                        />
+                      ) : (
+                        'Title'
+                      )}
+                    </th>
+
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="50%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Description'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Organization'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Link'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Application Deadline'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'City/State'
+                        )}
+                      </th>
+                    )}
+
+                    <th></th>
+                  </tr>
+                </thead>
+                <tbody>{loading ? loadingRows : rows}</tbody>
+              </Table>
+            </Container>
+          </ScrollArea>
         )}
         {
-          <Container sx={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginTop: "30px"}}>
-          <PaginationNavbarScraper
-            apiEndpointExtension={"competitions"}
-            numberOfItemsPerPage={10}
-            setListOfObjects={setRawCompetitionList}
-            searchFilterObject={searchParams}
-            setLoading={setLoading}
-            recall={recall}
-            //curPage = {CurrentPage}
-          />
-          
+          <Container
+            sx={{
+              display: 'flex',
+              justifyContent: 'space-between',
+              alignItems: 'center',
+              marginTop: '30px',
+            }}
+          >
+            <PaginationNavbarScraper
+              apiEndpointExtension={'competitions'}
+              numberOfItemsPerPage={10}
+              setListOfObjects={setRawCompetitionList}
+              searchFilterObject={searchParams}
+              setLoading={setLoading}
+              recall={recall}
+              //curPage = {CurrentPage}
+            />
           </Container>
         }
       </Paper>
       <Modal
         opened={displayOpportunityEditModal}
         onClose={() => {
-          setDisplayOpportunityEditModal(false);
+          setDisplayOpportunityEditModal(false)
         }}
         fullScreen={smallerScreen}
         size="60%"
@@ -782,14 +781,12 @@
         <FormHeader>Edit Post</FormHeader>
         <ScrapedPostForm
           edit={true}
-          opportunityType={
-            "Competitions"
-          }
+          opportunityType={'Competitions'}
           opportunity={currentOpportunity ? currentOpportunity : undefined}
           displayWinnerInput
           handleSubmission={handleEditButton}
         />
       </Modal>
     </Container>
-  );
+  )
 }
Index: src/reportWebVitals.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/reportWebVitals.ts b/src/reportWebVitals.ts
--- a/src/reportWebVitals.ts	
+++ b/src/reportWebVitals.ts	
@@ -1,15 +1,15 @@
-import { ReportHandler } from "web-vitals";
+import {ReportHandler} from 'web-vitals'
 
 const reportWebVitals = (onPerfEntry?: ReportHandler) => {
   if (onPerfEntry && onPerfEntry instanceof Function) {
-    import("web-vitals").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
-      getCLS(onPerfEntry);
-      getFID(onPerfEntry);
-      getFCP(onPerfEntry);
-      getLCP(onPerfEntry);
-      getTTFB(onPerfEntry);
-    });
+    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {
+      getCLS(onPerfEntry)
+      getFID(onPerfEntry)
+      getFCP(onPerfEntry)
+      getLCP(onPerfEntry)
+      getTTFB(onPerfEntry)
+    })
   }
-};
+}
 
-export default reportWebVitals;
+export default reportWebVitals
Index: src/pages/BannedUser.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import image from \"../images/roadblock.png\";\nimport { auth } from \"../Firebase\";\nimport { signOut } from \"firebase/auth\";\nimport {\n  createStyles,\n  Image,\n  Container,\n  Title,\n  Text,\n  Button,\n  SimpleGrid,\n} from \"@mantine/core\";\nimport { useNavigate } from \"react-router-dom\";\nimport { motion } from \"framer-motion\";\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    paddingTop: 80,\n    paddingBottom: 80,\n  },\n\n  title: {\n    fontWeight: 900,\n    fontSize: 34,\n    marginBottom: theme.spacing.md,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n\n    [theme.fn.smallerThan(\"sm\")]: {\n      fontSize: 32,\n    },\n  },\n\n  control: {\n    [theme.fn.smallerThan(\"sm\")]: {\n      width: \"100%\",\n    },\n  },\n\n  mobileImage: {\n    [theme.fn.largerThan(\"sm\")]: {\n      display: \"none\",\n    },\n  },\n\n  desktopImage: {\n    [theme.fn.smallerThan(\"sm\")]: {\n      display: \"none\",\n    },\n  },\n}));\n\nexport function BannedUser() {\n  const { classes } = useStyles();\n  const navigate = useNavigate();\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Container className={classes.root}>\n        <SimpleGrid\n          spacing={80}\n          cols={2}\n          breakpoints={[{ maxWidth: \"sm\", cols: 1, spacing: 40 }]}\n        >\n          <Image src={image} className={classes.mobileImage} />\n          <div>\n            <Title className={classes.title}>\n              This account has been banned.\n            </Title>\n            <Text color=\"dimmed\" size=\"lg\">\n              Your account has been banned for inappropiate or false posts. If\n              you wish, you can continue to browse opportunities as a guest.\n            </Text>\n            <Button\n              variant=\"outline\"\n              size=\"md\"\n              mt=\"xl\"\n              className={classes.control}\n              onClick={async () => {\n                await signOut(auth);\n                navigate(\"/\");\n              }}\n            >\n              Continue as guest\n            </Button>\n          </div>\n          <Image src={image} className={classes.desktopImage} />\n        </SimpleGrid>\n      </Container>\n    </motion.div>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/BannedUser.tsx b/src/pages/BannedUser.tsx
--- a/src/pages/BannedUser.tsx	
+++ b/src/pages/BannedUser.tsx	
@@ -1,6 +1,6 @@
-import image from "../images/roadblock.png";
-import { auth } from "../Firebase";
-import { signOut } from "firebase/auth";
+import image from '../images/roadblock.png'
+import {auth} from '../Firebase'
+import {signOut} from 'firebase/auth'
 import {
   createStyles,
   Image,
@@ -9,9 +9,9 @@
   Text,
   Button,
   SimpleGrid,
-} from "@mantine/core";
-import { useNavigate } from "react-router-dom";
-import { motion } from "framer-motion";
+} from '@mantine/core'
+import {useNavigate} from 'react-router-dom'
+import {motion} from 'framer-motion'
 
 const useStyles = createStyles((theme) => ({
   root: {
@@ -25,45 +25,45 @@
     marginBottom: theme.spacing.md,
     fontFamily: `Greycliff CF, ${theme.fontFamily}`,
 
-    [theme.fn.smallerThan("sm")]: {
+    [theme.fn.smallerThan('sm')]: {
       fontSize: 32,
     },
   },
 
   control: {
-    [theme.fn.smallerThan("sm")]: {
-      width: "100%",
+    [theme.fn.smallerThan('sm')]: {
+      width: '100%',
     },
   },
 
   mobileImage: {
-    [theme.fn.largerThan("sm")]: {
-      display: "none",
+    [theme.fn.largerThan('sm')]: {
+      display: 'none',
     },
   },
 
   desktopImage: {
-    [theme.fn.smallerThan("sm")]: {
-      display: "none",
+    [theme.fn.smallerThan('sm')]: {
+      display: 'none',
     },
   },
-}));
+}))
 
 export function BannedUser() {
-  const { classes } = useStyles();
-  const navigate = useNavigate();
+  const {classes} = useStyles()
+  const navigate = useNavigate()
 
   return (
     <motion.div
-      initial={{ opacity: 0 }}
-      animate={{ opacity: 1 }}
-      transition={{ duration: 0.3 }}
+      initial={{opacity: 0}}
+      animate={{opacity: 1}}
+      transition={{duration: 0.3}}
     >
       <Container className={classes.root}>
         <SimpleGrid
           spacing={80}
           cols={2}
-          breakpoints={[{ maxWidth: "sm", cols: 1, spacing: 40 }]}
+          breakpoints={[{maxWidth: 'sm', cols: 1, spacing: 40}]}
         >
           <Image src={image} className={classes.mobileImage} />
           <div>
@@ -80,8 +80,8 @@
               mt="xl"
               className={classes.control}
               onClick={async () => {
-                await signOut(auth);
-                navigate("/");
+                await signOut(auth)
+                navigate('/')
               }}
             >
               Continue as guest
@@ -91,5 +91,5 @@
         </SimpleGrid>
       </Container>
     </motion.div>
-  );
+  )
 }
Index: src/pages/Login.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {\n  ErrorMessage,\n  defaultErrorMessage,\n  authErrorList,\n} from \"../components/login/profile\";\nimport { useState, useEffect } from \"react\";\nimport { auth } from \"../Firebase\";\nimport { signInWithEmailAndPassword, onAuthStateChanged } from \"firebase/auth\";\nimport { FirebaseError } from \"@firebase/util\";\nimport {\n  TextInput,\n  PasswordInput,\n  Checkbox,\n  Anchor,\n  Paper,\n  Title,\n  Text,\n  Container,\n  Group,\n  Button,\n  Center,\n} from \"@mantine/core\";\nimport { useNavigate } from \"react-router-dom\";\nimport { motion } from \"framer-motion\";\n\nexport function Login() {\n  const navigate = useNavigate();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const url = \"https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday\";\n\n  const handleEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(e.target.value.trim());\n  };\n\n  const handlePassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setPassword(e.target.value.trim());\n  };\n\n  const handleLogin = async () => {\n    try {\n      if (email === \"\") {\n        throw \"Please input an email\";\n      }\n\n      if (password === \"\") {\n        throw \"Please input a password\";\n      }\n\n      await signInWithEmailAndPassword(auth, email, password);\n      navigate(\"/\");\n    } catch (err: unknown) {\n      if (err instanceof FirebaseError) {\n        if (authErrorList[err.code as keyof typeof authErrorList]) {\n          setErrorMessage(\n            authErrorList[err.code as keyof typeof authErrorList]\n          );\n        } else {\n          setErrorMessage(defaultErrorMessage);\n        }\n      } else if (typeof err === \"string\") {\n        if (authErrorList[err as keyof typeof authErrorList]) {\n          setErrorMessage(authErrorList[err as keyof typeof authErrorList]);\n        } else {\n          setErrorMessage(defaultErrorMessage);\n        }\n      } else {\n        setErrorMessage(defaultErrorMessage);\n      }\n\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    onAuthStateChanged(auth, (user) => {\n      if (user) {\n        navigate(\"/\");\n      }\n    });\n  }, []);\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Container size={420} my={40}>\n        <Title\n          align=\"center\"\n          sx={(theme) => ({\n            fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n            fontWeight: 900,\n          })}\n        >\n          Welcome back!\n        </Title>\n        <Text color=\"dimmed\" size=\"sm\" align=\"center\" mt={5}>\n          Don't have an account yet?{\" \"}\n          <Anchor<\"a\"> size=\"sm\" onClick={() => navigate(\"/register\")}>\n            Create account\n          </Anchor>\n        </Text>\n\n        <Paper withBorder shadow=\"md\" p={30} mt={30} radius=\"md\">\n          <TextInput\n            label=\"Email\"\n            placeholder=\"Your email\"\n            required\n            value={email}\n            onChange={handleEmail}\n          />\n          <PasswordInput\n            label=\"Password\"\n            placeholder=\"Your password\"\n            required\n            mt=\"md\"\n            value={password}\n            onChange={handlePassword}\n          />\n          <ErrorMessage error={!!errorMessage}>{errorMessage}</ErrorMessage>\n          <Group position=\"center\" mt=\"md\">\n            <Anchor<\"a\"> onClick={() => navigate(\"/forgotpassword\")} size=\"sm\">\n              Forgot password?\n            </Anchor>\n          </Group>\n          <Button fullWidth mt=\"xl\" onClick={handleLogin}>\n            Sign in\n          </Button>\n        </Paper>\n      </Container>\n    </motion.div>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/Login.tsx b/src/pages/Login.tsx
--- a/src/pages/Login.tsx	
+++ b/src/pages/Login.tsx	
@@ -2,11 +2,11 @@
   ErrorMessage,
   defaultErrorMessage,
   authErrorList,
-} from "../components/login/profile";
-import { useState, useEffect } from "react";
-import { auth } from "../Firebase";
-import { signInWithEmailAndPassword, onAuthStateChanged } from "firebase/auth";
-import { FirebaseError } from "@firebase/util";
+} from '../components/login/profile'
+import {useState, useEffect} from 'react'
+import {auth} from '../Firebase'
+import {signInWithEmailAndPassword, onAuthStateChanged} from 'firebase/auth'
+import {FirebaseError} from '@firebase/util'
 import {
   TextInput,
   PasswordInput,
@@ -19,73 +19,71 @@
   Group,
   Button,
   Center,
-} from "@mantine/core";
-import { useNavigate } from "react-router-dom";
-import { motion } from "framer-motion";
+} from '@mantine/core'
+import {useNavigate} from 'react-router-dom'
+import {motion} from 'framer-motion'
 
 export function Login() {
-  const navigate = useNavigate();
-  const [email, setEmail] = useState("");
-  const [password, setPassword] = useState("");
-  const [errorMessage, setErrorMessage] = useState("");
-  const url = "https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday";
+  const navigate = useNavigate()
+  const [email, setEmail] = useState('')
+  const [password, setPassword] = useState('')
+  const [errorMessage, setErrorMessage] = useState('')
+  const url = 'https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday'
 
   const handleEmail = (e: React.ChangeEvent<HTMLInputElement>) => {
-    setEmail(e.target.value.trim());
-  };
+    setEmail(e.target.value.trim())
+  }
 
   const handlePassword = (e: React.ChangeEvent<HTMLInputElement>) => {
-    setPassword(e.target.value.trim());
-  };
+    setPassword(e.target.value.trim())
+  }
 
   const handleLogin = async () => {
     try {
-      if (email === "") {
-        throw "Please input an email";
+      if (email === '') {
+        throw 'Please input an email'
       }
 
-      if (password === "") {
-        throw "Please input a password";
+      if (password === '') {
+        throw 'Please input a password'
       }
 
-      await signInWithEmailAndPassword(auth, email, password);
-      navigate("/");
+      await signInWithEmailAndPassword(auth, email, password)
+      navigate('/')
     } catch (err: unknown) {
       if (err instanceof FirebaseError) {
         if (authErrorList[err.code as keyof typeof authErrorList]) {
-          setErrorMessage(
-            authErrorList[err.code as keyof typeof authErrorList]
-          );
+          setErrorMessage(authErrorList[err.code as keyof typeof authErrorList])
         } else {
-          setErrorMessage(defaultErrorMessage);
+          setErrorMessage(defaultErrorMessage)
         }
-      } else if (typeof err === "string") {
+      } else if (typeof err === 'string') {
         if (authErrorList[err as keyof typeof authErrorList]) {
-          setErrorMessage(authErrorList[err as keyof typeof authErrorList]);
+          setErrorMessage(authErrorList[err as keyof typeof authErrorList])
         } else {
-          setErrorMessage(defaultErrorMessage);
+          setErrorMessage(defaultErrorMessage)
         }
       } else {
-        setErrorMessage(defaultErrorMessage);
+        setErrorMessage(defaultErrorMessage)
       }
 
-      console.log(err);
+      console.log(err)
     }
-  };
+  }
 
   useEffect(() => {
     onAuthStateChanged(auth, (user) => {
       if (user) {
-        navigate("/");
+        navigate('/')
       }
-    });
-  }, []);
+    })
+  }, [])
 
   return (
     <motion.div
-      initial={{ opacity: 0 }}
-      animate={{ opacity: 1 }}
-      transition={{ duration: 0.3 }}
+      initial={{opacity: 0}}
+      animate={{opacity: 1}}
+      transition={{duration: 0.3}}
     >
       <Container size={420} my={40}>
         <Title
@@ -98,8 +96,8 @@
           Welcome back!
         </Title>
         <Text color="dimmed" size="sm" align="center" mt={5}>
-          Don't have an account yet?{" "}
-          <Anchor<"a"> size="sm" onClick={() => navigate("/register")}>
+          Don't have an account yet?{' '}
+          <Anchor<'a'> size="sm" onClick={() => navigate('/register')}>
             Create account
           </Anchor>
         </Text>
@@ -122,7 +120,7 @@
           />
           <ErrorMessage error={!!errorMessage}>{errorMessage}</ErrorMessage>
           <Group position="center" mt="md">
-            <Anchor<"a"> onClick={() => navigate("/forgotpassword")} size="sm">
+            <Anchor<'a'> onClick={() => navigate('/forgotpassword')} size="sm">
               Forgot password?
             </Anchor>
           </Group>
@@ -132,5 +130,5 @@
         </Paper>
       </Container>
     </motion.div>
-  );
+  )
 }
Index: src/pages/Landing.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { useEffect } from \"react\";\nimport { Container } from \"@mantine/core\";\nimport { Hero } from \"../components/landing/Hero\";\nimport { Features } from \"../components/landing/Features\";\nimport { RegisterCTA } from \"../components/landing/RegisterCTA\";\nimport { auth } from \"../Firebase\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { motion } from \"framer-motion\";\n\nexport function Landing() {\n  // useEffect(() => {\n  //   onAuthStateChanged(auth, (user) => {\n  //     if (!user) return;\n  //   });\n  // });\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Container fluid style={{ padding: 0, marginTop: 120 }}>\n        <Hero />\n        <Container fluid style={{ backgroundColor: \"#001E3C\" }}>\n          <Features />\n        </Container>\n        <RegisterCTA />\n      </Container>\n    </motion.div>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/Landing.tsx b/src/pages/Landing.tsx
--- a/src/pages/Landing.tsx	
+++ b/src/pages/Landing.tsx	
@@ -1,11 +1,11 @@
-import { useEffect } from "react";
-import { Container } from "@mantine/core";
-import { Hero } from "../components/landing/Hero";
-import { Features } from "../components/landing/Features";
-import { RegisterCTA } from "../components/landing/RegisterCTA";
-import { auth } from "../Firebase";
-import { onAuthStateChanged } from "firebase/auth";
-import { motion } from "framer-motion";
+import {useEffect} from 'react'
+import {Container} from '@mantine/core'
+import {Hero} from '../components/landing/Hero'
+import {Features} from '../components/landing/Features'
+import {RegisterCTA} from '../components/landing/RegisterCTA'
+import {auth} from '../Firebase'
+import {onAuthStateChanged} from 'firebase/auth'
+import {motion} from 'framer-motion'
 
 export function Landing() {
   // useEffect(() => {
@@ -16,17 +16,17 @@
 
   return (
     <motion.div
-      initial={{ opacity: 0 }}
-      animate={{ opacity: 1 }}
-      transition={{ duration: 0.3 }}
+      initial={{opacity: 0}}
+      animate={{opacity: 1}}
+      transition={{duration: 0.3}}
     >
-      <Container fluid style={{ padding: 0, marginTop: 120 }}>
+      <Container fluid style={{padding: 0, marginTop: 120}}>
         <Hero />
-        <Container fluid style={{ backgroundColor: "#001E3C" }}>
+        <Container fluid style={{backgroundColor: '#001E3C'}}>
           <Features />
         </Container>
         <RegisterCTA />
       </Container>
     </motion.div>
-  );
+  )
 }
Index: src/pages/NotFound.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {\n  createStyles,\n  Image,\n  Container,\n  Title,\n  Text,\n  Button,\n  SimpleGrid,\n} from \"@mantine/core\";\nimport image from \"../images/404.png\";\nimport { useNavigate } from \"react-router-dom\";\nimport { motion } from \"framer-motion\";\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    paddingTop: 80,\n    paddingBottom: 80,\n  },\n\n  title: {\n    fontWeight: 900,\n    fontSize: 34,\n    marginBottom: theme.spacing.md,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n\n    [theme.fn.smallerThan(\"sm\")]: {\n      fontSize: 32,\n    },\n  },\n\n  control: {\n    [theme.fn.smallerThan(\"sm\")]: {\n      width: \"100%\",\n    },\n  },\n\n  mobileImage: {\n    [theme.fn.largerThan(\"sm\")]: {\n      display: \"none\",\n    },\n  },\n\n  desktopImage: {\n    maxWidth: 400,\n    [theme.fn.smallerThan(\"sm\")]: {\n      display: \"none\",\n    },\n  },\n}));\n\nexport function NotFound() {\n  const { classes } = useStyles();\n  const navigate = useNavigate();\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Container className={classes.root}>\n        <SimpleGrid\n          spacing={80}\n          cols={2}\n          breakpoints={[{ maxWidth: \"sm\", cols: 1, spacing: 40 }]}\n        >\n          <Image src={image} className={classes.mobileImage} />\n          <div>\n            <Title className={classes.title}>Something is not right...</Title>\n            <Text color=\"dimmed\" size=\"lg\">\n              Page you are trying to open does not exist. You may have mistyped\n              the address, or the page has been moved to another URL. If you\n              think this is an error contact support.\n            </Text>\n            <Button\n              variant=\"outline\"\n              size=\"md\"\n              mt=\"xl\"\n              className={classes.control}\n              onClick={() => navigate(\"/\")}\n            >\n              Get back to home page\n            </Button>\n          </div>\n          <Image src={image} className={classes.desktopImage} />\n        </SimpleGrid>\n      </Container>\n    </motion.div>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/NotFound.tsx b/src/pages/NotFound.tsx
--- a/src/pages/NotFound.tsx	
+++ b/src/pages/NotFound.tsx	
@@ -6,10 +6,10 @@
   Text,
   Button,
   SimpleGrid,
-} from "@mantine/core";
-import image from "../images/404.png";
-import { useNavigate } from "react-router-dom";
-import { motion } from "framer-motion";
+} from '@mantine/core'
+import image from '../images/404.png'
+import {useNavigate} from 'react-router-dom'
+import {motion} from 'framer-motion'
 
 const useStyles = createStyles((theme) => ({
   root: {
@@ -23,46 +23,46 @@
     marginBottom: theme.spacing.md,
     fontFamily: `Greycliff CF, ${theme.fontFamily}`,
 
-    [theme.fn.smallerThan("sm")]: {
+    [theme.fn.smallerThan('sm')]: {
       fontSize: 32,
     },
   },
 
   control: {
-    [theme.fn.smallerThan("sm")]: {
-      width: "100%",
+    [theme.fn.smallerThan('sm')]: {
+      width: '100%',
     },
   },
 
   mobileImage: {
-    [theme.fn.largerThan("sm")]: {
-      display: "none",
+    [theme.fn.largerThan('sm')]: {
+      display: 'none',
     },
   },
 
   desktopImage: {
     maxWidth: 400,
-    [theme.fn.smallerThan("sm")]: {
-      display: "none",
+    [theme.fn.smallerThan('sm')]: {
+      display: 'none',
     },
   },
-}));
+}))
 
 export function NotFound() {
-  const { classes } = useStyles();
-  const navigate = useNavigate();
+  const {classes} = useStyles()
+  const navigate = useNavigate()
 
   return (
     <motion.div
-      initial={{ opacity: 0 }}
-      animate={{ opacity: 1 }}
-      transition={{ duration: 0.3 }}
+      initial={{opacity: 0}}
+      animate={{opacity: 1}}
+      transition={{duration: 0.3}}
     >
       <Container className={classes.root}>
         <SimpleGrid
           spacing={80}
           cols={2}
-          breakpoints={[{ maxWidth: "sm", cols: 1, spacing: 40 }]}
+          breakpoints={[{maxWidth: 'sm', cols: 1, spacing: 40}]}
         >
           <Image src={image} className={classes.mobileImage} />
           <div>
@@ -77,7 +77,7 @@
               size="md"
               mt="xl"
               className={classes.control}
-              onClick={() => navigate("/")}
+              onClick={() => navigate('/')}
             >
               Get back to home page
             </Button>
@@ -86,5 +86,5 @@
         </SimpleGrid>
       </Container>
     </motion.div>
-  );
+  )
 }
Index: src/pages/AboutUs.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useEffect } from \"react\";\nimport { NavBar } from \"../components/navigation/NavBar\";\nimport { navItems } from \"../components/navigation/NavItems\";\n\n// Team Members Info for each SD Team\n// V2: Fall 2022 - Spring 2023\n// V3: Fall 2023 - Spring 2024\nimport { V2TeamMembersInfo } from \"../components/about/V2TeamMembersInfo\";\nimport { V3TeamMembersInfo } from \"../components/about/V3TeamMembersInfo\";\n\nimport { TeamMembers } from \"../components/about/TeamMembers\";\n\nimport {\n  createStyles,\n  Container,\n  Title,\n  Text,\n  Image,\n  Group, Tabs,\n} from \"@mantine/core\";\n\n\nconst musicNoteIcon = require(\"../images/BigMusicNote.png\");\nconst greenTriangle = require(\"../images/GreenTriangle.png\");\nconst blueTriangle = require(\"../images/BlueTriangle.png\");\n\nconst useStyles = createStyles((theme) => ({\n  inner: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n\n  content: {\n    maxWidth: \"75%\",\n\n    [theme.fn.smallerThan(\"md\")]: {\n      maxWidth: \"100%\",\n      marginRight: 0,\n    },\n  },\n\n  title: {\n    color: theme.colorScheme === \"dark\" ? theme.white : \"#2F2F2F\",\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    fontSize: 44,\n    lineHeight: 1.2,\n    fontWeight: 600,\n\n    [theme.fn.smallerThan(\"sm\")]: {\n      fontSize: 23,\n    },\n  },\n\n  subtitle: {\n    color: theme.colorScheme === \"dark\" ? theme.white : \"#2F2F2F\",\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    fontSize: 40,\n    lineHeight: 1.2,\n    fontWeight: 400,\n\n    [theme.fn.smallerThan(\"sm\")]: {\n      fontSize: 20,\n    },\n  },\n\n  subheading: {\n    fontSize: 22,\n\n    [theme.fn.smallerThan(\"sm\")]: {\n      fontSize: 16,\n    },\n  },\n\n  blueText: {\n    color: \"#228BE6\",\n  },\n\n  greenText: {\n    color: \"#40C057\",\n  },\n\n  image: {\n    paddingTop: 8,\n    maxWidth: 70,\n\n    [theme.fn.smallerThan(\"sm\")]: {\n      maxWidth: 35,\n      marginLeft: \"-10px\",\n    },\n  },\n\n  container: {\n    marginTop: 120,\n  },\n}));\n\nexport function About() {\n  const { classes } = useStyles();\n\n  return (\n    <div className={classes.container}>\n      <Image\n        src={String(blueTriangle)}\n        style={{\n          width: \"24%\",\n          position: \"absolute\",\n          right: \"0px\",\n          top: \"80px\",\n        }}\n      />\n\n      <Image\n        src={String(greenTriangle)}\n        style={{ width: \"24%\", position: \"absolute\", top: \"650px\" }}\n      />\n\n      <Container sx={{ maxWidth: \"75vw\" }}>\n        <div className={classes.inner}>\n          <div className={classes.content}>\n\n            <Title className={classes.subtitle}>\n              Meet the team of talented{\" \"}\n              <span className={classes.greenText}>college students</span> behind\n            </Title>\n\n            <Group>\n              <Title className={classes.title} mt=\"xl\">\n                COMPOSITION:<span className={classes.blueText}>TODAY</span>\n              </Title>\n              <Image\n                src={String(musicNoteIcon)}\n                className={classes.image}\n                mt=\"xl\"\n              />\n            </Group>\n\n            <Text color=\"dimmed\" mt=\"md\" className={classes.subheading}>\n              This website was revamped by a group of computer science students\n              at the University of Central Florida for their senior design\n              project.\n            </Text>\n\n            <Tabs aria-label=\"Senior Design Teams\">\n              <TeamMembers teamMembers={V2TeamMembersInfo.teamMembers} />\n            </Tabs>\n\n          </div>\n        </div>\n      </Container>\n\n\n    </div>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/AboutUs.tsx b/src/pages/AboutUs.tsx
--- a/src/pages/AboutUs.tsx	
+++ b/src/pages/AboutUs.tsx	
@@ -1,14 +1,14 @@
-import React, { useEffect } from "react";
-import { NavBar } from "../components/navigation/NavBar";
-import { navItems } from "../components/navigation/NavItems";
+import React, {useEffect} from 'react'
+import {NavBar} from '../components/navigation/NavBar'
+import {navItems} from '../components/navigation/NavItems'
 
 // Team Members Info for each SD Team
 // V2: Fall 2022 - Spring 2023
 // V3: Fall 2023 - Spring 2024
-import { V2TeamMembersInfo } from "../components/about/V2TeamMembersInfo";
-import { V3TeamMembersInfo } from "../components/about/V3TeamMembersInfo";
+import {V2TeamMembersInfo} from '../components/about/V2TeamMembersInfo'
+import {V3TeamMembersInfo} from '../components/about/V3TeamMembersInfo'
 
-import { TeamMembers } from "../components/about/TeamMembers";
+import {TeamMembers} from '../components/about/TeamMembers'
 
 import {
   createStyles,
@@ -16,49 +16,49 @@
   Title,
   Text,
   Image,
-  Group, Tabs,
-} from "@mantine/core";
+  Group,
+  Tabs,
+} from '@mantine/core'
 
-
-const musicNoteIcon = require("../images/BigMusicNote.png");
-const greenTriangle = require("../images/GreenTriangle.png");
-const blueTriangle = require("../images/BlueTriangle.png");
+const musicNoteIcon = require('../images/BigMusicNote.png')
+const greenTriangle = require('../images/GreenTriangle.png')
+const blueTriangle = require('../images/BlueTriangle.png')
 
 const useStyles = createStyles((theme) => ({
   inner: {
-    display: "flex",
-    justifyContent: "space-between",
+    display: 'flex',
+    justifyContent: 'space-between',
   },
 
   content: {
-    maxWidth: "75%",
+    maxWidth: '75%',
 
-    [theme.fn.smallerThan("md")]: {
-      maxWidth: "100%",
+    [theme.fn.smallerThan('md')]: {
+      maxWidth: '100%',
       marginRight: 0,
     },
   },
 
   title: {
-    color: theme.colorScheme === "dark" ? theme.white : "#2F2F2F",
+    color: theme.colorScheme === 'dark' ? theme.white : '#2F2F2F',
     fontFamily: `Greycliff CF, ${theme.fontFamily}`,
     fontSize: 44,
     lineHeight: 1.2,
     fontWeight: 600,
 
-    [theme.fn.smallerThan("sm")]: {
+    [theme.fn.smallerThan('sm')]: {
       fontSize: 23,
     },
   },
 
   subtitle: {
-    color: theme.colorScheme === "dark" ? theme.white : "#2F2F2F",
+    color: theme.colorScheme === 'dark' ? theme.white : '#2F2F2F',
     fontFamily: `Greycliff CF, ${theme.fontFamily}`,
     fontSize: 40,
     lineHeight: 1.2,
     fontWeight: 400,
 
-    [theme.fn.smallerThan("sm")]: {
+    [theme.fn.smallerThan('sm')]: {
       fontSize: 20,
     },
   },
@@ -66,60 +66,59 @@
   subheading: {
     fontSize: 22,
 
-    [theme.fn.smallerThan("sm")]: {
+    [theme.fn.smallerThan('sm')]: {
       fontSize: 16,
     },
   },
 
   blueText: {
-    color: "#228BE6",
+    color: '#228BE6',
   },
 
   greenText: {
-    color: "#40C057",
+    color: '#40C057',
   },
 
   image: {
     paddingTop: 8,
     maxWidth: 70,
 
-    [theme.fn.smallerThan("sm")]: {
+    [theme.fn.smallerThan('sm')]: {
       maxWidth: 35,
-      marginLeft: "-10px",
+      marginLeft: '-10px',
     },
   },
 
   container: {
     marginTop: 120,
   },
-}));
+}))
 
 export function About() {
-  const { classes } = useStyles();
+  const {classes} = useStyles()
 
   return (
     <div className={classes.container}>
       <Image
         src={String(blueTriangle)}
         style={{
-          width: "24%",
-          position: "absolute",
-          right: "0px",
-          top: "80px",
+          width: '24%',
+          position: 'absolute',
+          right: '0px',
+          top: '80px',
         }}
       />
 
       <Image
         src={String(greenTriangle)}
-        style={{ width: "24%", position: "absolute", top: "650px" }}
+        style={{width: '24%', position: 'absolute', top: '650px'}}
       />
 
-      <Container sx={{ maxWidth: "75vw" }}>
+      <Container sx={{maxWidth: '75vw'}}>
         <div className={classes.inner}>
           <div className={classes.content}>
-
             <Title className={classes.subtitle}>
-              Meet the team of talented{" "}
+              Meet the team of talented{' '}
               <span className={classes.greenText}>college students</span> behind
             </Title>
 
@@ -143,12 +142,9 @@
             <Tabs aria-label="Senior Design Teams">
               <TeamMembers teamMembers={V2TeamMembersInfo.teamMembers} />
             </Tabs>
-
           </div>
         </div>
       </Container>
-
-
     </div>
-  );
+  )
 }
Index: src/components/adminView/modals/DenyModal.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Text } from \"@mantine/core\";\nimport React from \"react\";\nimport { openConfirmationModal } from \"../../modal/ConfirmationModal\";\nimport { showNotification } from \"@mantine/notifications\";\n\nexport const openDenyModal = (\n  selectedRows: number[],\n  onUpdateSelectedRows: (updatedRows: number[]) => void \n) => {\n  const DenyPosts = async () => {\n    try {\n      for (let i = 0; i < selectedRows.length; i++) {\n        let requestOptions = {\n          method: \"PUT\",\n          headers: { \"Content-Type\": \"application/json\" },\n        };\n  \n        let response = await fetch(\n          `https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday/webscraping/deny/${selectedRows[i]}`,\n          requestOptions\n        );\n        //let responseJson = await response.json();\n\n      }\n\n    \n    showNotification({\n      title: \"Posts Denied\",\n      message: \"Scraped posts have been denied\",\n      color: \"green\",\n    });\n\n    onUpdateSelectedRows([]);\n    \n    } catch (err) {\n      console.log(err);\n      showNotification({\n        title: \"Error\",\n        message: \"There was a problem, please try again later\",\n        color: \"red\",\n      });\n    }\n  };\n\n  const handleOnConfirm = () => {\n    DenyPosts();\n  };\n\n  const createChildren = () => {\n    return (\n      <Text size=\"sm\">\n        Are you sure you want to{\" \"}\n        <span style={{ fontWeight: 700 }}>deny these posts</span>?\n      </Text>\n    );\n  };\n\n  const title = \"Deny Posts\";\n  const confirmLabel = \"Deny Posts\";\n  const cancelLabel = \"Cancel\";\n  const color = \"red\";\n  const children = createChildren();\n\n  openConfirmationModal({\n    title,\n    children,\n    confirmLabel,\n    cancelLabel,\n    color,\n    handleOnConfirm,\n  });\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/adminView/modals/DenyModal.tsx b/src/components/adminView/modals/DenyModal.tsx
--- a/src/components/adminView/modals/DenyModal.tsx	
+++ b/src/components/adminView/modals/DenyModal.tsx	
@@ -1,65 +1,62 @@
-import { Text } from "@mantine/core";
-import React from "react";
-import { openConfirmationModal } from "../../modal/ConfirmationModal";
-import { showNotification } from "@mantine/notifications";
+import {Text} from '@mantine/core'
+import React from 'react'
+import {openConfirmationModal} from '../../modal/ConfirmationModal'
+import {showNotification} from '@mantine/notifications'
 
 export const openDenyModal = (
   selectedRows: number[],
-  onUpdateSelectedRows: (updatedRows: number[]) => void 
+  onUpdateSelectedRows: (updatedRows: number[]) => void,
 ) => {
   const DenyPosts = async () => {
     try {
       for (let i = 0; i < selectedRows.length; i++) {
         let requestOptions = {
-          method: "PUT",
-          headers: { "Content-Type": "application/json" },
-        };
-  
+          method: 'PUT',
+          headers: {'Content-Type': 'application/json'},
+        }
+
         let response = await fetch(
           `https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday/webscraping/deny/${selectedRows[i]}`,
-          requestOptions
-        );
+          requestOptions,
+        )
         //let responseJson = await response.json();
-
       }
 
-    
-    showNotification({
-      title: "Posts Denied",
-      message: "Scraped posts have been denied",
-      color: "green",
-    });
+      showNotification({
+        title: 'Posts Denied',
+        message: 'Scraped posts have been denied',
+        color: 'green',
+      })
 
-    onUpdateSelectedRows([]);
-    
+      onUpdateSelectedRows([])
     } catch (err) {
-      console.log(err);
+      console.log(err)
       showNotification({
-        title: "Error",
-        message: "There was a problem, please try again later",
-        color: "red",
-      });
+        title: 'Error',
+        message: 'There was a problem, please try again later',
+        color: 'red',
+      })
     }
-  };
+  }
 
   const handleOnConfirm = () => {
-    DenyPosts();
-  };
+    DenyPosts()
+  }
 
   const createChildren = () => {
     return (
       <Text size="sm">
-        Are you sure you want to{" "}
-        <span style={{ fontWeight: 700 }}>deny these posts</span>?
+        Are you sure you want to{' '}
+        <span style={{fontWeight: 700}}>deny these posts</span>?
       </Text>
-    );
-  };
+    )
+  }
 
-  const title = "Deny Posts";
-  const confirmLabel = "Deny Posts";
-  const cancelLabel = "Cancel";
-  const color = "red";
-  const children = createChildren();
+  const title = 'Deny Posts'
+  const confirmLabel = 'Deny Posts'
+  const cancelLabel = 'Cancel'
+  const color = 'red'
+  const children = createChildren()
 
   openConfirmationModal({
     title,
@@ -68,5 +65,5 @@
     cancelLabel,
     color,
     handleOnConfirm,
-  });
-};
+  })
+}
Index: src/pages/CreateOpportunityPage.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { CreateOpportunity } from \"../components/opportunity/CreateOpportunity\";\nimport { motion } from \"framer-motion\";\n\nexport function CreateOpportunityPage() {\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <CreateOpportunity />\n    </motion.div>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/CreateOpportunityPage.tsx b/src/pages/CreateOpportunityPage.tsx
--- a/src/pages/CreateOpportunityPage.tsx	
+++ b/src/pages/CreateOpportunityPage.tsx	
@@ -1,14 +1,14 @@
-import { CreateOpportunity } from "../components/opportunity/CreateOpportunity";
-import { motion } from "framer-motion";
+import {CreateOpportunity} from '../components/opportunity/CreateOpportunity'
+import {motion} from 'framer-motion'
 
 export function CreateOpportunityPage() {
   return (
     <motion.div
-      initial={{ opacity: 0 }}
-      animate={{ opacity: 1 }}
-      transition={{ duration: 0.3 }}
+      initial={{opacity: 0}}
+      animate={{opacity: 1}}
+      transition={{duration: 0.3}}
     >
       <CreateOpportunity />
     </motion.div>
-  );
+  )
 }
Index: src/pages/Competitions.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Opportunity } from \"../components/opportunity/Opportunity\";\nimport { motion } from \"framer-motion\";\n\nexport function Competitions() {\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Opportunity apiEndpoint=\"competitions\" />\n    </motion.div>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/Competitions.tsx b/src/pages/Competitions.tsx
--- a/src/pages/Competitions.tsx	
+++ b/src/pages/Competitions.tsx	
@@ -1,14 +1,14 @@
-import { Opportunity } from "../components/opportunity/Opportunity";
-import { motion } from "framer-motion";
+import {Opportunity} from '../components/opportunity/Opportunity'
+import {motion} from 'framer-motion'
 
 export function Competitions() {
   return (
     <motion.div
-      initial={{ opacity: 0 }}
-      animate={{ opacity: 1 }}
-      transition={{ duration: 0.3 }}
+      initial={{opacity: 0}}
+      animate={{opacity: 1}}
+      transition={{duration: 0.3}}
     >
       <Opportunity apiEndpoint="competitions" />
     </motion.div>
-  );
+  )
 }
Index: src/pages/Jobs.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Opportunity } from \"../components/opportunity/Opportunity\";\nimport { motion } from \"framer-motion\";\n\nexport function Jobs() {\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Opportunity apiEndpoint=\"jobs\" />\n    </motion.div>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/Jobs.tsx b/src/pages/Jobs.tsx
--- a/src/pages/Jobs.tsx	
+++ b/src/pages/Jobs.tsx	
@@ -1,14 +1,14 @@
-import { Opportunity } from "../components/opportunity/Opportunity";
-import { motion } from "framer-motion";
+import {Opportunity} from '../components/opportunity/Opportunity'
+import {motion} from 'framer-motion'
 
 export function Jobs() {
   return (
     <motion.div
-      initial={{ opacity: 0 }}
-      animate={{ opacity: 1 }}
-      transition={{ duration: 0.3 }}
+      initial={{opacity: 0}}
+      animate={{opacity: 1}}
+      transition={{duration: 0.3}}
     >
       <Opportunity apiEndpoint="jobs" />
     </motion.div>
-  );
+  )
 }
Index: src/pages/Concerts.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Opportunity } from \"../components/opportunity/Opportunity\";\nimport { motion } from \"framer-motion\";\n\nexport function Concerts() {\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Opportunity apiEndpoint=\"concerts\" />\n    </motion.div>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/Concerts.tsx b/src/pages/Concerts.tsx
--- a/src/pages/Concerts.tsx	
+++ b/src/pages/Concerts.tsx	
@@ -1,14 +1,14 @@
-import { Opportunity } from "../components/opportunity/Opportunity";
-import { motion } from "framer-motion";
+import {Opportunity} from '../components/opportunity/Opportunity'
+import {motion} from 'framer-motion'
 
 export function Concerts() {
   return (
     <motion.div
-      initial={{ opacity: 0 }}
-      animate={{ opacity: 1 }}
-      transition={{ duration: 0.3 }}
+      initial={{opacity: 0}}
+      animate={{opacity: 1}}
+      transition={{duration: 0.3}}
     >
       <Opportunity apiEndpoint="concerts" />
     </motion.div>
-  );
+  )
 }
Index: src/components/pagination/PaginationNavbarScraper.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {\n  OpportunityItem,\n  PaginationNavbarContainer,\n} from \"../opportunity/OpportunityHelper\";\nimport { RawUserData } from \"../adminView/UsersList\";\nimport React, { useState, useEffect } from \"react\";\nimport { Pagination } from \"@mantine/core\";\nimport { useMediaQuery } from \"@mantine/hooks\";\nimport { ScrapedPost } from \"../adminView/ScrapedPostHelper\";\n\nexport interface PaginationNavbarScraperProp {\n  apiEndpointExtension: string;\n  numberOfItemsPerPage: number;\n  searchFilterObject?: PaginationScrapedSearchObject;\n  setListOfObjects:\n    React.Dispatch<React.SetStateAction<ScrapedPost[]>>;\n  setLoading: React.Dispatch<React.SetStateAction<boolean>>;\n  recall?: number;\n  //curPage: number;\n}\n\nexport interface PaginationScrapedSearchObject {\n  UID?: string;\n  idposts?: number;\n  title?: string;\n  description?: string;\n  link?: string;\n  date_posted?: Date;\n  city?: string;\n  state?: string;\n  organization?: string;\n  end_date?: Date | string | number;\n  salary?: number;\n  job_type?: string;\n  winner?: string | null;\n  job_category?: string;\n  competition_category?: string;\n  address?: string;\n  start_date?: Date | string | number;\n  type?: string;\n  first_name?: string;\n  last_name?: string;\n  email?: string;\n  keyword?: string;\n  is_deleted?: string | number;\n  is_flagged?: string | number;\n  is_expired?: string | number;\n  is_admin?: string;\n  is_banned?: string;\n  is_regular?: string;\n  is_winner?: string;\n  current_email?: string;\n  start_time?: Date | string | number | null;\n  author?: string;\n  fee?: string | number;\n  sort?: string | number;\n  deadline?: Date | string | number;\n  isScraped?: number;\n  genre?: string;\n  published_date?: Date | string | number;\n  hasbeenfeatured?: boolean;\n  writer?: string;\n}\n\nexport function PaginationNavbarScraper({\n  // The string that is the api extension. Do NOT begin it with a \"/\".\n  apiEndpointExtension,\n  // The number of items you want to display on a page.\n  // If the API has a set number of items it returns for 1 page, please put in that number here.\n  numberOfItemsPerPage,\n  // The setter of the useState that holds all the current items displayed on a page.\n  setListOfObjects,\n  // An optional object where the keys are the name of the attribute you want to search for and the value is the actual value of the key.\n  searchFilterObject,\n  setLoading,\n  recall = -99,\n  //curPage,\n\n}: PaginationNavbarScraperProp) {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageCount, setPageCount] = useState(1);\n  const medianScreen = useMediaQuery(\"(max-width: 992px)\");\n  const url = \"https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday\";\n\n  const timeOut = 450;\n\n  useEffect(() => {\n    const getPageCount = async () => {\n      try {\n        setLoading(true);\n        console.log(\"searchFilterObj\", searchFilterObject);\n        const countUrl = new URL(`${url}/${apiEndpointExtension}/count?get_posts_to_review=`);\n        if (searchFilterObject) {\n          for (const [key, value] of Object.entries(searchFilterObject)) {\n            countUrl.searchParams.set(key, String(value));\n          }\n        }\n\n        let responseCount = await fetch(countUrl);\n\n        let responseCountJson = await responseCount.json();\n        console.log(\"number of posts count\", responseCountJson.count);\n        let numberOfPage = Math.ceil(\n          responseCountJson.count / numberOfItemsPerPage\n        );\n        setPageCount(numberOfPage);\n        console.log(\"number of pages\", numberOfPage);\n        setTimeout(() => {\n          setLoading(false);\n        }, timeOut);\n      } catch (err) {\n        console.log(err);\n      } finally {\n        setCurrentPage(1);\n        console.log(recall);\n      }\n    };\n    getPageCount();\n  }, [searchFilterObject, recall, apiEndpointExtension]);\n\n  useEffect(() => {\n    const getCurrentPage = async () => {\n      try {\n        setLoading(true);\n        const getUrl = new URL(`${url}/${apiEndpointExtension}?get_posts_to_review=`);\n        //getUrl.searchParams.set(\"get_posts_to_review=\",'')\n        if (searchFilterObject) {\n          for (const [key, value] of Object.entries(searchFilterObject)) {\n            getUrl.searchParams.set(key, String(value));\n          }\n        }\n        //curPage = currentPage;\n\n        getUrl.searchParams.set(\"page_number\", String(currentPage));\n        console.log(\"geturl: \", getUrl.toString());\n        let response = await fetch(getUrl);\n\n        let responseJson = await response.json();\n        setListOfObjects(responseJson.listOfObjects || []);\n        setTimeout(() => {\n          setLoading(false);\n        }, timeOut);\n        console.log(\"res\", responseJson);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    getCurrentPage();\n  }, [\n    currentPage,\n    pageCount,\n    searchFilterObject,\n    recall,\n    apiEndpointExtension,\n  ]);\n\n  return (\n    <div style={{ display: pageCount ? \"block\" : \"none\" }}>\n      <PaginationNavbarContainer justify=\"center\" align=\"flex-end\">\n        <Pagination\n          page={currentPage}\n          onChange={setCurrentPage}\n          total={pageCount}\n          size={medianScreen ? \"xs\" : \"sm\"}\n          radius=\"xl\"\n        />\n      </PaginationNavbarContainer>\n    </div>\n  );\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/pagination/PaginationNavbarScraper.tsx b/src/components/pagination/PaginationNavbarScraper.tsx
--- a/src/components/pagination/PaginationNavbarScraper.tsx	
+++ b/src/components/pagination/PaginationNavbarScraper.tsx	
@@ -1,65 +1,64 @@
 import {
   OpportunityItem,
   PaginationNavbarContainer,
-} from "../opportunity/OpportunityHelper";
-import { RawUserData } from "../adminView/UsersList";
-import React, { useState, useEffect } from "react";
-import { Pagination } from "@mantine/core";
-import { useMediaQuery } from "@mantine/hooks";
-import { ScrapedPost } from "../adminView/ScrapedPostHelper";
+} from '../opportunity/OpportunityHelper'
+import {RawUserData} from '../adminView/UsersList'
+import React, {useState, useEffect} from 'react'
+import {Pagination} from '@mantine/core'
+import {useMediaQuery} from '@mantine/hooks'
+import {ScrapedPost} from '../adminView/ScrapedPostHelper'
 
 export interface PaginationNavbarScraperProp {
-  apiEndpointExtension: string;
-  numberOfItemsPerPage: number;
-  searchFilterObject?: PaginationScrapedSearchObject;
-  setListOfObjects:
-    React.Dispatch<React.SetStateAction<ScrapedPost[]>>;
-  setLoading: React.Dispatch<React.SetStateAction<boolean>>;
-  recall?: number;
+  apiEndpointExtension: string
+  numberOfItemsPerPage: number
+  searchFilterObject?: PaginationScrapedSearchObject
+  setListOfObjects: React.Dispatch<React.SetStateAction<ScrapedPost[]>>
+  setLoading: React.Dispatch<React.SetStateAction<boolean>>
+  recall?: number
   //curPage: number;
 }
 
 export interface PaginationScrapedSearchObject {
-  UID?: string;
-  idposts?: number;
-  title?: string;
-  description?: string;
-  link?: string;
-  date_posted?: Date;
-  city?: string;
-  state?: string;
-  organization?: string;
-  end_date?: Date | string | number;
-  salary?: number;
-  job_type?: string;
-  winner?: string | null;
-  job_category?: string;
-  competition_category?: string;
-  address?: string;
-  start_date?: Date | string | number;
-  type?: string;
-  first_name?: string;
-  last_name?: string;
-  email?: string;
-  keyword?: string;
-  is_deleted?: string | number;
-  is_flagged?: string | number;
-  is_expired?: string | number;
-  is_admin?: string;
-  is_banned?: string;
-  is_regular?: string;
-  is_winner?: string;
-  current_email?: string;
-  start_time?: Date | string | number | null;
-  author?: string;
-  fee?: string | number;
-  sort?: string | number;
-  deadline?: Date | string | number;
-  isScraped?: number;
-  genre?: string;
-  published_date?: Date | string | number;
-  hasbeenfeatured?: boolean;
-  writer?: string;
+  UID?: string
+  idposts?: number
+  title?: string
+  description?: string
+  link?: string
+  date_posted?: Date
+  city?: string
+  state?: string
+  organization?: string
+  end_date?: Date | string | number
+  salary?: number
+  job_type?: string
+  winner?: string | null
+  job_category?: string
+  competition_category?: string
+  address?: string
+  start_date?: Date | string | number
+  type?: string
+  first_name?: string
+  last_name?: string
+  email?: string
+  keyword?: string
+  is_deleted?: string | number
+  is_flagged?: string | number
+  is_expired?: string | number
+  is_admin?: string
+  is_banned?: string
+  is_regular?: string
+  is_winner?: string
+  current_email?: string
+  start_time?: Date | string | number | null
+  author?: string
+  fee?: string | number
+  sort?: string | number
+  deadline?: Date | string | number
+  isScraped?: number
+  genre?: string
+  published_date?: Date | string | number
+  hasbeenfeatured?: boolean
+  writer?: string
 }
 
 export function PaginationNavbarScraper({
@@ -74,98 +73,96 @@
   searchFilterObject,
   setLoading,
   recall = -99,
-  //curPage,
+}: //curPage,
 
-}: PaginationNavbarScraperProp) {
-  const [currentPage, setCurrentPage] = useState(1);
-  const [pageCount, setPageCount] = useState(1);
-  const medianScreen = useMediaQuery("(max-width: 992px)");
-  const url = "https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday";
+PaginationNavbarScraperProp) {
+  const [currentPage, setCurrentPage] = useState(1)
+  const [pageCount, setPageCount] = useState(1)
+  const medianScreen = useMediaQuery('(max-width: 992px)')
+  const url = 'https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday'
 
-  const timeOut = 450;
+  const timeOut = 450
 
   useEffect(() => {
     const getPageCount = async () => {
       try {
-        setLoading(true);
-        console.log("searchFilterObj", searchFilterObject);
-        const countUrl = new URL(`${url}/${apiEndpointExtension}/count?get_posts_to_review=`);
+        setLoading(true)
+        console.log('searchFilterObj', searchFilterObject)
+        const countUrl = new URL(
+          `${url}/${apiEndpointExtension}/count?get_posts_to_review=`,
+        )
         if (searchFilterObject) {
           for (const [key, value] of Object.entries(searchFilterObject)) {
-            countUrl.searchParams.set(key, String(value));
+            countUrl.searchParams.set(key, String(value))
           }
         }
 
-        let responseCount = await fetch(countUrl);
+        let responseCount = await fetch(countUrl)
 
-        let responseCountJson = await responseCount.json();
-        console.log("number of posts count", responseCountJson.count);
+        let responseCountJson = await responseCount.json()
+        console.log('number of posts count', responseCountJson.count)
         let numberOfPage = Math.ceil(
-          responseCountJson.count / numberOfItemsPerPage
-        );
-        setPageCount(numberOfPage);
-        console.log("number of pages", numberOfPage);
+          responseCountJson.count / numberOfItemsPerPage,
+        )
+        setPageCount(numberOfPage)
+        console.log('number of pages', numberOfPage)
         setTimeout(() => {
-          setLoading(false);
-        }, timeOut);
+          setLoading(false)
+        }, timeOut)
       } catch (err) {
-        console.log(err);
+        console.log(err)
       } finally {
-        setCurrentPage(1);
-        console.log(recall);
+        setCurrentPage(1)
+        console.log(recall)
       }
-    };
-    getPageCount();
-  }, [searchFilterObject, recall, apiEndpointExtension]);
+    }
+    getPageCount()
+  }, [searchFilterObject, recall, apiEndpointExtension])
 
   useEffect(() => {
     const getCurrentPage = async () => {
       try {
-        setLoading(true);
-        const getUrl = new URL(`${url}/${apiEndpointExtension}?get_posts_to_review=`);
+        setLoading(true)
+        const getUrl = new URL(
+          `${url}/${apiEndpointExtension}?get_posts_to_review=`,
+        )
         //getUrl.searchParams.set("get_posts_to_review=",'')
         if (searchFilterObject) {
           for (const [key, value] of Object.entries(searchFilterObject)) {
-            getUrl.searchParams.set(key, String(value));
+            getUrl.searchParams.set(key, String(value))
           }
         }
         //curPage = currentPage;
 
-        getUrl.searchParams.set("page_number", String(currentPage));
-        console.log("geturl: ", getUrl.toString());
-        let response = await fetch(getUrl);
+        getUrl.searchParams.set('page_number', String(currentPage))
+        console.log('geturl: ', getUrl.toString())
+        let response = await fetch(getUrl)
 
-        let responseJson = await response.json();
-        setListOfObjects(responseJson.listOfObjects || []);
+        let responseJson = await response.json()
+        setListOfObjects(responseJson.listOfObjects || [])
         setTimeout(() => {
-          setLoading(false);
-        }, timeOut);
-        console.log("res", responseJson);
+          setLoading(false)
+        }, timeOut)
+        console.log('res', responseJson)
       } catch (err) {
-        console.log(err);
+        console.log(err)
       }
-    };
+    }
 
-    getCurrentPage();
-  }, [
-    currentPage,
-    pageCount,
-    searchFilterObject,
-    recall,
-    apiEndpointExtension,
-  ]);
+    getCurrentPage()
+  }, [currentPage, pageCount, searchFilterObject, recall, apiEndpointExtension])
 
   return (
-    <div style={{ display: pageCount ? "block" : "none" }}>
+    <div style={{display: pageCount ? 'block' : 'none'}}>
       <PaginationNavbarContainer justify="center" align="flex-end">
         <Pagination
           page={currentPage}
           onChange={setCurrentPage}
           total={pageCount}
-          size={medianScreen ? "xs" : "sm"}
+          size={medianScreen ? 'xs' : 'sm'}
           radius="xl"
         />
       </PaginationNavbarContainer>
     </div>
-  );
-}
\ No newline at end of file
+  )
+}
Index: src/pages/Register.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {\n  ErrorMessage,\n  defaultErrorMessage,\n  authErrorList,\n} from \"../components/login/profile\";\nimport { useState, useEffect } from \"react\";\nimport { auth } from \"../Firebase\";\nimport { FirebaseError } from \"@firebase/util\";\nimport {\n  createUserWithEmailAndPassword,\n  onAuthStateChanged,\n  sendEmailVerification,\n  User,\n} from \"firebase/auth\";\nimport {\n  TextInput,\n  PasswordInput,\n  Anchor,\n  Paper,\n  Title,\n  Text,\n  Container,\n  Button,\n  Group,\n  Center,\n} from \"@mantine/core\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { MultipleInputRow } from \"../components/opportunity/OpportunityFormHelper\";\nimport { motion } from \"framer-motion\";\n\nexport function Register() {\n  const navigate = useNavigate();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const url = \"https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday\";\n  const location = useLocation();\n\n  const handleEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(e.target.value.trim());\n  };\n\n  const handlePassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n    console.log(\n      new RegExp(\n        \"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{6,}$\"\n      ).test(e.target.value.trim())\n    );\n    setPassword(e.target.value.trim());\n  };\n\n  const handleFirstName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value.trim());\n  };\n\n  const handleLastName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value.trim());\n  };\n\n  const handleConfirmPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setConfirmPassword(e.target.value.trim());\n  };\n\n  const handleRegister = async () => {\n    try {\n      if (email === \"\") {\n        throw \"Please input an email\";\n      }\n\n      if (firstName === \"\" || lastName === \"\") {\n        throw \"Please give a name\";\n      }\n\n      if (password === \"\" || confirmPassword === \"\") {\n        throw \"Please input a password\";\n      }\n\n      if (password !== confirmPassword) {\n        throw \"Passwords do not match\";\n      }\n\n      // Password regex requires a password to be the following\n      // At least 6 characters\n      // At least one uppercase letter\n      // At least one lowercase letter\n      // At least one number\n      // At least one special character\n      const passwordStrongEnough = (password: string) => {\n        let passwordRegex = new RegExp(\n          \"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{6,}$\"\n        );\n\n        return passwordRegex.test(password);\n      };\n\n      if (!passwordStrongEnough(password)) {\n        throw \"Password not strong enough\";\n      }\n\n      let userCredential = await createUserWithEmailAndPassword(\n        auth,\n        email,\n        password\n      );\n      let user = userCredential.user;\n\n      let requestOptions = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          UID: user.uid,\n          first_name: firstName,\n          last_name: lastName,\n          email: email,\n        }),\n      };\n\n      let response = await fetch(`${url}/users`, requestOptions);\n\n      let responseJson = await response.json();\n\n      console.log(\"POST user response json: \", responseJson);\n      console.log(\"display location path in register\", location.pathname);\n      let currentUser: User | null = null;\n      onAuthStateChanged(auth, async (user) => {\n        if (user) {\n          currentUser = user;\n        }\n      });\n\n      // const actionCodeSettings = {\n      //   // URL you want to redirect back to. The domain (www.example.com) for this\n      //   // URL must be in the authorized domains list in the Firebase Console.\n      //   url:\n      //     window.location.hostname === \"localhost\" ||\n      //     window.location.hostname === \"127.0.0.1\"\n      //       ? \"http://localhost:3000/\"\n      //       : \"http://compositiontoday.net/\",\n      //   // url: \"http://compositiontoday.net/\",\n      //   // This must be true.\n      //   // handleCodeInApp: true,\n      //   // iOS: {\n      //   //   bundleId: \"com.example.ios\",\n      //   // },\n      //   // android: {\n      //   //   packageName: \"com.example.android\",\n      //   //   installApp: true,\n      //   //   minimumVersion: \"12\",\n      //   // },\n      //   // dynamicLinkDomain: \"compositiontoday.net\",\n      // };\n\n      // if (currentUser && location.pathname === \"/register\") {\n      //   await sendEmailVerification(currentUser, actionCodeSettings);\n      //   console.log(\"register email verification sent\");\n      // }\n\n      navigate(\"/\");\n    } catch (err: unknown) {\n      if (err instanceof FirebaseError) {\n        if (authErrorList[err.code as keyof typeof authErrorList]) {\n          setErrorMessage(\n            authErrorList[err.code as keyof typeof authErrorList]\n          );\n        } else {\n          setErrorMessage(defaultErrorMessage);\n        }\n      } else if (typeof err === \"string\") {\n        if (authErrorList[err as keyof typeof authErrorList]) {\n          setErrorMessage(authErrorList[err as keyof typeof authErrorList]);\n        } else {\n          setErrorMessage(defaultErrorMessage);\n        }\n      } else {\n        setErrorMessage(defaultErrorMessage);\n      }\n\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    onAuthStateChanged(auth, (user) => {\n      if (user) {\n        navigate(\"/\");\n      }\n    });\n  }, []);\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Center style={{ height: \"100%\" }}>\n        <Container size={420} my={40} style={{ minWidth: 420 }}>\n          <Title\n            align=\"center\"\n            sx={(theme) => ({\n              fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n              fontWeight: 900,\n            })}\n          >\n            Create an account!\n          </Title>\n          <Text color=\"dimmed\" size=\"sm\" align=\"center\" mt={5}>\n            Already have an account?{\" \"}\n            <Anchor<\"a\"> size=\"sm\" onClick={() => navigate(\"/login\")}>\n              Login\n            </Anchor>\n          </Text>\n\n          <Paper withBorder shadow=\"md\" p={30} mt={30} radius=\"md\">\n            <TextInput\n              label=\"Email\"\n              placeholder=\"Enter an email\"\n              required\n              value={email}\n              onChange={handleEmail}\n            />\n            <MultipleInputRow display gap=\"10px\">\n              <TextInput\n                label=\"First name\"\n                placeholder=\"Enter your first name\"\n                required\n                value={firstName}\n                onChange={handleFirstName}\n              />\n              <TextInput\n                label=\"Last Name\"\n                placeholder=\"Enter your last name\"\n                required\n                value={lastName}\n                onChange={handleLastName}\n              />\n            </MultipleInputRow>\n            <PasswordInput\n              label=\"Password\"\n              placeholder=\"Enter a password\"\n              required\n              mt=\"md\"\n              value={password}\n              onChange={handlePassword}\n            />\n            <PasswordInput\n              label=\"Confirm Password\"\n              placeholder=\"Retype your password\"\n              required\n              mt=\"md\"\n              value={confirmPassword}\n              onChange={handleConfirmPassword}\n            />\n            <ErrorMessage error={!!errorMessage}>{errorMessage}</ErrorMessage>\n            <Button fullWidth mt=\"xl\" onClick={handleRegister}>\n              Register\n            </Button>\n          </Paper>\n        </Container>\n      </Center>\n    </motion.div>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/Register.tsx b/src/pages/Register.tsx
--- a/src/pages/Register.tsx	
+++ b/src/pages/Register.tsx	
@@ -2,16 +2,16 @@
   ErrorMessage,
   defaultErrorMessage,
   authErrorList,
-} from "../components/login/profile";
-import { useState, useEffect } from "react";
-import { auth } from "../Firebase";
-import { FirebaseError } from "@firebase/util";
+} from '../components/login/profile'
+import {useState, useEffect} from 'react'
+import {auth} from '../Firebase'
+import {FirebaseError} from '@firebase/util'
 import {
   createUserWithEmailAndPassword,
   onAuthStateChanged,
   sendEmailVerification,
   User,
-} from "firebase/auth";
+} from 'firebase/auth'
 import {
   TextInput,
   PasswordInput,
@@ -23,63 +23,63 @@
   Button,
   Group,
   Center,
-} from "@mantine/core";
-import { useNavigate, useLocation } from "react-router-dom";
-import { MultipleInputRow } from "../components/opportunity/OpportunityFormHelper";
-import { motion } from "framer-motion";
+} from '@mantine/core'
+import {useNavigate, useLocation} from 'react-router-dom'
+import {MultipleInputRow} from '../components/opportunity/OpportunityFormHelper'
+import {motion} from 'framer-motion'
 
 export function Register() {
-  const navigate = useNavigate();
-  const [email, setEmail] = useState("");
-  const [password, setPassword] = useState("");
-  const [firstName, setFirstName] = useState("");
-  const [lastName, setLastName] = useState("");
-  const [confirmPassword, setConfirmPassword] = useState("");
-  const [errorMessage, setErrorMessage] = useState("");
-  const url = "https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday";
-  const location = useLocation();
+  const navigate = useNavigate()
+  const [email, setEmail] = useState('')
+  const [password, setPassword] = useState('')
+  const [firstName, setFirstName] = useState('')
+  const [lastName, setLastName] = useState('')
+  const [confirmPassword, setConfirmPassword] = useState('')
+  const [errorMessage, setErrorMessage] = useState('')
+  const url = 'https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday'
+  const location = useLocation()
 
   const handleEmail = (e: React.ChangeEvent<HTMLInputElement>) => {
-    setEmail(e.target.value.trim());
-  };
+    setEmail(e.target.value.trim())
+  }
 
   const handlePassword = (e: React.ChangeEvent<HTMLInputElement>) => {
     console.log(
       new RegExp(
-        "^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{6,}$"
-      ).test(e.target.value.trim())
-    );
-    setPassword(e.target.value.trim());
-  };
+        '^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{6,}$',
+      ).test(e.target.value.trim()),
+    )
+    setPassword(e.target.value.trim())
+  }
 
   const handleFirstName = (e: React.ChangeEvent<HTMLInputElement>) => {
-    setFirstName(e.target.value.trim());
-  };
+    setFirstName(e.target.value.trim())
+  }
 
   const handleLastName = (e: React.ChangeEvent<HTMLInputElement>) => {
-    setLastName(e.target.value.trim());
-  };
+    setLastName(e.target.value.trim())
+  }
 
   const handleConfirmPassword = (e: React.ChangeEvent<HTMLInputElement>) => {
-    setConfirmPassword(e.target.value.trim());
-  };
+    setConfirmPassword(e.target.value.trim())
+  }
 
   const handleRegister = async () => {
     try {
-      if (email === "") {
-        throw "Please input an email";
+      if (email === '') {
+        throw 'Please input an email'
       }
 
-      if (firstName === "" || lastName === "") {
-        throw "Please give a name";
+      if (firstName === '' || lastName === '') {
+        throw 'Please give a name'
       }
 
-      if (password === "" || confirmPassword === "") {
-        throw "Please input a password";
+      if (password === '' || confirmPassword === '') {
+        throw 'Please input a password'
       }
 
       if (password !== confirmPassword) {
-        throw "Passwords do not match";
+        throw 'Passwords do not match'
       }
 
       // Password regex requires a password to be the following
@@ -90,46 +90,46 @@
       // At least one special character
       const passwordStrongEnough = (password: string) => {
         let passwordRegex = new RegExp(
-          "^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{6,}$"
-        );
+          '^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{6,}$',
+        )
 
-        return passwordRegex.test(password);
-      };
+        return passwordRegex.test(password)
+      }
 
       if (!passwordStrongEnough(password)) {
-        throw "Password not strong enough";
+        throw 'Password not strong enough'
       }
 
       let userCredential = await createUserWithEmailAndPassword(
         auth,
         email,
-        password
-      );
-      let user = userCredential.user;
+        password,
+      )
+      let user = userCredential.user
 
       let requestOptions = {
-        method: "POST",
-        headers: { "Content-Type": "application/json" },
+        method: 'POST',
+        headers: {'Content-Type': 'application/json'},
         body: JSON.stringify({
           UID: user.uid,
           first_name: firstName,
           last_name: lastName,
           email: email,
         }),
-      };
+      }
 
-      let response = await fetch(`${url}/users`, requestOptions);
+      let response = await fetch(`${url}/users`, requestOptions)
 
-      let responseJson = await response.json();
+      let responseJson = await response.json()
 
-      console.log("POST user response json: ", responseJson);
-      console.log("display location path in register", location.pathname);
-      let currentUser: User | null = null;
+      console.log('POST user response json: ', responseJson)
+      console.log('display location path in register', location.pathname)
+      let currentUser: User | null = null
       onAuthStateChanged(auth, async (user) => {
         if (user) {
-          currentUser = user;
+          currentUser = user
         }
-      });
+      })
 
       // const actionCodeSettings = {
       //   // URL you want to redirect back to. The domain (www.example.com) for this
@@ -158,46 +158,44 @@
       //   console.log("register email verification sent");
       // }
 
-      navigate("/");
+      navigate('/')
     } catch (err: unknown) {
       if (err instanceof FirebaseError) {
         if (authErrorList[err.code as keyof typeof authErrorList]) {
-          setErrorMessage(
-            authErrorList[err.code as keyof typeof authErrorList]
-          );
+          setErrorMessage(authErrorList[err.code as keyof typeof authErrorList])
         } else {
-          setErrorMessage(defaultErrorMessage);
+          setErrorMessage(defaultErrorMessage)
         }
-      } else if (typeof err === "string") {
+      } else if (typeof err === 'string') {
         if (authErrorList[err as keyof typeof authErrorList]) {
-          setErrorMessage(authErrorList[err as keyof typeof authErrorList]);
+          setErrorMessage(authErrorList[err as keyof typeof authErrorList])
         } else {
-          setErrorMessage(defaultErrorMessage);
+          setErrorMessage(defaultErrorMessage)
         }
       } else {
-        setErrorMessage(defaultErrorMessage);
+        setErrorMessage(defaultErrorMessage)
       }
 
-      console.log(err);
+      console.log(err)
     }
-  };
+  }
 
   useEffect(() => {
     onAuthStateChanged(auth, (user) => {
       if (user) {
-        navigate("/");
+        navigate('/')
       }
-    });
-  }, []);
+    })
+  }, [])
 
   return (
     <motion.div
-      initial={{ opacity: 0 }}
-      animate={{ opacity: 1 }}
-      transition={{ duration: 0.3 }}
+      initial={{opacity: 0}}
+      animate={{opacity: 1}}
+      transition={{duration: 0.3}}
     >
-      <Center style={{ height: "100%" }}>
-        <Container size={420} my={40} style={{ minWidth: 420 }}>
+      <Center style={{height: '100%'}}>
+        <Container size={420} my={40} style={{minWidth: 420}}>
           <Title
             align="center"
             sx={(theme) => ({
@@ -208,8 +206,8 @@
             Create an account!
           </Title>
           <Text color="dimmed" size="sm" align="center" mt={5}>
-            Already have an account?{" "}
-            <Anchor<"a"> size="sm" onClick={() => navigate("/login")}>
+            Already have an account?{' '}
+            <Anchor<'a'> size="sm" onClick={() => navigate('/login')}>
               Login
             </Anchor>
           </Text>
@@ -262,5 +260,5 @@
         </Container>
       </Center>
     </motion.div>
-  );
+  )
 }
Index: src/components/adminView/NewLinks.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {\n    Paper,\n    Menu,\n    Badge,\n    Table,\n    Text,\n    ActionIcon,\n    ScrollArea,\n    useMantineTheme,\n    Container,\n    createStyles,\n    LoadingOverlay,\n    Skeleton,\n    Checkbox,\n    Button,\n    Modal,\n    TextInput,\n    Select,\n} from \"@mantine/core\";\nimport { OpportunityItem } from \"../opportunity/OpportunityHelper\";\nimport { ScrapedPost } from \"./ScrapedPostHelper\";\nimport { FormHeader } from \"../opportunity/CreateOpportunityHelper\";\nimport {\nIconBan,\nIconTrash,\nIconArrowBigUpLine,\nIconCheck,\nIconArrowBigDownLine,\nIconDots,\n} from \"@tabler/icons\";\nimport { auth } from \"../../Firebase\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { showNotification } from \"@mantine/notifications\";\nimport { useMediaQuery } from \"@mantine/hooks\";\nimport { useForm } from \"@mantine/form\";\n\n\nconst useStyles = createStyles((theme) => ({\n    container: {\n      width: \"90vw\",\n      padding: \"0px\",\n  \n      [theme.fn.smallerThan(\"md\")]: {\n        width: \"100%\",\n      },\n    },\n  \n    userContainer: {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        position: \"relative\",\n        zIndex: 1,\n        borderColor: \"#939393\",\n\n        [theme.fn.smallerThan(\"md\")]: {\n            padding: \"15px\",\n            borderRadius: \"0px\",\n        },\n\n        [theme.fn.largerThan(\"sm\")]: {\n            height: \"65vh\",\n        },\n    },\n    noDataContainer: {\n      display: \"flex\",\n      justifyContent: \"center\", // Center horizontally\n    alignItems: \"center\",\n      position: \"relative\",\n      zIndex: 1,\n      borderColor: \"#939393\",\n  \n      \n  \n      [theme.fn.largerThan(\"sm\")]: {\n        height: \"5vh\",\n      },\n    },\n  \n    table: {\n      maxWidth: \"100%\",\n      flexBasis: \"100%\",\n  \n      [theme.fn.smallerThan(\"md\")]: {\n        maxHeight: \"90vh\",\n        padding: \"0px\",\n      },\n    },\n  \n    bold: {\n      fontWeight: 700,\n    },\n  \n    header: {\n      position: \"sticky\",\n      top: 0,\n      backgroundColor:\n        theme.colorScheme === \"dark\" ? theme.colors.dark[7] : theme.white,\n      transition: \"box-shadow 150ms ease\",\n  \n      \"&::after\": {\n        content: '\"\"',\n        position: \"absolute\",\n        zIndex: 1,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        borderBottom: `1px solid ${\n          theme.colorScheme === \"dark\"\n            ? theme.colors.dark[3]\n            : theme.colors.gray[2]\n        }`,\n      },\n    },\n  \n    scrolled: {\n      // boxShadow: theme.shadows.sm,\n    },\n  }));\n\n  type PostType = \"news\" | \"competition\" | \"concert\" | \"festival\" | \"job\";\n\ninterface FormData {\n  link: string;\n  postType: PostType;\n  multiplePosts: boolean;\n  individualPostSelector: string;\n  nextPageSelector: string;\n}\n\nconst initialFormData: FormData = {\n  link: \"\",\n  postType: \"news\",\n  multiplePosts: false,\n  individualPostSelector: \"\",\n  nextPageSelector: \"\",\n};\n\nexport function NewLinks() {\n    const { classes, cx } = useStyles();\n\n    const [formData, setFormData] = useState<FormData>(initialFormData);\n\n    function handleInputChange(\n      event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>\n    ) {\n      const { name, value } = event.target;\n      setFormData({ ...formData, [name]: value });\n    }\n  \n    function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n      event.preventDefault();\n      console.log(formData);\n      // You can handle form submission here, e.g., send data to backend\n    }\n\n    function handlePostTypeChange(value: string | null) {\n        if (value) {\n          setFormData({ ...formData, postType: value as PostType });\n        }\n      }\n    \n    return (\n        <Container fluid className={classes.container}>\n    \n        <Paper\n            withBorder\n            mt={30}\n            radius=\"lg\"\n            className={cx(classes.userContainer)}\n            sx={{ padding: \"40px 20px\" }}\n          >\n\n<form onSubmit={handleSubmit}>\n      <TextInput\n        label=\"Link\"\n        name=\"link\"\n        placeholder=\"Enter link\"\n        value={formData.link}\n        onChange={handleInputChange}\n        required\n      />\n      <Select\n        label=\"Post Type\"\n        name=\"postType\"\n        data={[\n          { value: \"news\", label: \"News\" },\n          { value: \"competition\", label: \"Competition\" },\n          { value: \"concert\", label: \"Concert\" },\n          { value: \"festival\", label: \"Festival\" },\n          { value: \"job\", label: \"Job\" },\n        ]}\n        value={formData.postType}\n        onChange={handlePostTypeChange}\n        required\n      />\n      <Checkbox\n        label=\"Multiple Posts\"\n        name=\"multiplePosts\"\n        checked={formData.multiplePosts}\n        onChange={(event) =>\n          setFormData({ ...formData, multiplePosts: event.currentTarget.checked })\n        }\n      />\n      {formData.multiplePosts && (\n        <>\n          <TextInput\n            label=\"Individual Post Selector\"\n            name=\"individualPostSelector\"\n            placeholder=\"Enter class name or xpath\"\n            value={formData.individualPostSelector}\n            onChange={handleInputChange}\n            required\n          />\n          <TextInput\n            label=\"Next Page Selector\"\n            name=\"nextPageSelector\"\n            placeholder=\"Enter class name or xpath\"\n            value={formData.nextPageSelector}\n            onChange={handleInputChange}\n            required\n          />\n        </>\n      )}\n      <Button type=\"submit\" variant=\"outline\">\n        Submit\n      </Button>\n    </form>\n            \n          </Paper>\n        </Container>\n      );\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/adminView/NewLinks.tsx b/src/components/adminView/NewLinks.tsx
--- a/src/components/adminView/NewLinks.tsx	
+++ b/src/components/adminView/NewLinks.tsx	
@@ -1,233 +1,205 @@
+import {useState} from 'react'
 import {
-    Paper,
-    Menu,
-    Badge,
-    Table,
-    Text,
-    ActionIcon,
-    ScrollArea,
-    useMantineTheme,
-    Container,
-    createStyles,
-    LoadingOverlay,
-    Skeleton,
-    Checkbox,
-    Button,
-    Modal,
-    TextInput,
-    Select,
-} from "@mantine/core";
-import { OpportunityItem } from "../opportunity/OpportunityHelper";
-import { ScrapedPost } from "./ScrapedPostHelper";
-import { FormHeader } from "../opportunity/CreateOpportunityHelper";
-import {
-IconBan,
-IconTrash,
-IconArrowBigUpLine,
-IconCheck,
-IconArrowBigDownLine,
-IconDots,
-} from "@tabler/icons";
-import { auth } from "../../Firebase";
-import { onAuthStateChanged } from "firebase/auth";
-import { useEffect, useState, useRef } from "react";
-import { showNotification } from "@mantine/notifications";
-import { useMediaQuery } from "@mantine/hooks";
-import { useForm } from "@mantine/form";
-
+  Paper,
+  Container,
+  createStyles,
+  Checkbox,
+  Button,
+  TextInput,
+  Select,
+} from '@mantine/core'
 
 const useStyles = createStyles((theme) => ({
-    container: {
-      width: "90vw",
-      padding: "0px",
-  
-      [theme.fn.smallerThan("md")]: {
-        width: "100%",
-      },
-    },
-  
-    userContainer: {
-        display: "flex",
-        flexWrap: "wrap",
-        position: "relative",
-        zIndex: 1,
-        borderColor: "#939393",
+  container: {
+    width: '90vw',
+    padding: '0px',
+
+    [theme.fn.smallerThan('md')]: {
+      width: '100%',
+    },
+  },
+
+  userContainer: {
+    display: 'flex',
+    flexWrap: 'wrap',
+    position: 'relative',
+    zIndex: 1,
+    borderColor: '#939393',
 
-        [theme.fn.smallerThan("md")]: {
-            padding: "15px",
-            borderRadius: "0px",
-        },
+    [theme.fn.smallerThan('md')]: {
+      padding: '15px',
+      borderRadius: '0px',
+    },
 
-        [theme.fn.largerThan("sm")]: {
-            height: "65vh",
-        },
-    },
-    noDataContainer: {
-      display: "flex",
-      justifyContent: "center", // Center horizontally
-    alignItems: "center",
-      position: "relative",
-      zIndex: 1,
-      borderColor: "#939393",
-  
-      
-  
-      [theme.fn.largerThan("sm")]: {
-        height: "5vh",
-      },
-    },
-  
-    table: {
-      maxWidth: "100%",
-      flexBasis: "100%",
-  
-      [theme.fn.smallerThan("md")]: {
-        maxHeight: "90vh",
-        padding: "0px",
-      },
-    },
-  
-    bold: {
-      fontWeight: 700,
-    },
-  
-    header: {
-      position: "sticky",
-      top: 0,
-      backgroundColor:
-        theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white,
-      transition: "box-shadow 150ms ease",
-  
-      "&::after": {
-        content: '""',
-        position: "absolute",
-        zIndex: 1,
-        left: 0,
-        right: 0,
-        bottom: 0,
-        borderBottom: `1px solid ${
-          theme.colorScheme === "dark"
-            ? theme.colors.dark[3]
-            : theme.colors.gray[2]
-        }`,
-      },
-    },
-  
-    scrolled: {
-      // boxShadow: theme.shadows.sm,
-    },
-  }));
+    [theme.fn.largerThan('sm')]: {
+      height: '65vh',
+    },
+  },
+  noDataContainer: {
+    display: 'flex',
+    justifyContent: 'center', // Center horizontally
+    alignItems: 'center',
+    position: 'relative',
+    zIndex: 1,
+    borderColor: '#939393',
+    [theme.fn.largerThan('sm')]: {
+      height: '5vh',
+    },
+  },
+
+  table: {
+    maxWidth: '100%',
+    flexBasis: '100%',
+
+    [theme.fn.smallerThan('md')]: {
+      maxHeight: '90vh',
+      padding: '0px',
+    },
+  },
+
+  bold: {
+    fontWeight: 700,
+  },
+
+  header: {
+    position: 'sticky',
+    top: 0,
+    backgroundColor:
+      theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,
+    transition: 'box-shadow 150ms ease',
+
+    '&::after': {
+      content: '""',
+      position: 'absolute',
+      zIndex: 1,
+      left: 0,
+      right: 0,
+      bottom: 0,
+      borderBottom: `1px solid ${
+        theme.colorScheme === 'dark'
+          ? theme.colors.dark[3]
+          : theme.colors.gray[2]
+      }`,
+    },
+  },
+
+  scrolled: {
+    // boxShadow: theme.shadows.sm,
+  },
+}))
 
-  type PostType = "news" | "competition" | "concert" | "festival" | "job";
+type PostType = 'news' | 'competition' | 'concert' | 'festival' | 'job'
 
 interface FormData {
-  link: string;
-  postType: PostType;
-  multiplePosts: boolean;
-  individualPostSelector: string;
-  nextPageSelector: string;
+  link: string
+  postType: PostType
+  multiplePosts: boolean
+  individualPostSelector: string
+  nextPageSelector: string
 }
 
 const initialFormData: FormData = {
-  link: "",
-  postType: "news",
+  link: '',
+  postType: 'news',
   multiplePosts: false,
-  individualPostSelector: "",
-  nextPageSelector: "",
-};
+  individualPostSelector: '',
+  nextPageSelector: '',
+}
 
 export function NewLinks() {
-    const { classes, cx } = useStyles();
+  const {classes, cx} = useStyles()
 
-    const [formData, setFormData] = useState<FormData>(initialFormData);
+  const [formData, setFormData] = useState<FormData>(initialFormData)
 
-    function handleInputChange(
-      event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>
-    ) {
-      const { name, value } = event.target;
-      setFormData({ ...formData, [name]: value });
-    }
-  
-    function handleSubmit(event: React.FormEvent<HTMLFormElement>) {
-      event.preventDefault();
-      console.log(formData);
-      // You can handle form submission here, e.g., send data to backend
-    }
+  function handleInputChange(
+    event: React.ChangeEvent<
+      HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement
+    >,
+  ) {
+    const {name, value} = event.target
+    setFormData({...formData, [name]: value})
+  }
+
+  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {
+    event.preventDefault()
+    console.log(formData)
+    // You can handle form submission here, e.g., send data to backend
+  }
 
-    function handlePostTypeChange(value: string | null) {
-        if (value) {
-          setFormData({ ...formData, postType: value as PostType });
-        }
-      }
-    
-    return (
-        <Container fluid className={classes.container}>
-    
-        <Paper
-            withBorder
-            mt={30}
-            radius="lg"
-            className={cx(classes.userContainer)}
-            sx={{ padding: "40px 20px" }}
-          >
-
-<form onSubmit={handleSubmit}>
-      <TextInput
-        label="Link"
-        name="link"
-        placeholder="Enter link"
-        value={formData.link}
-        onChange={handleInputChange}
-        required
-      />
-      <Select
-        label="Post Type"
-        name="postType"
-        data={[
-          { value: "news", label: "News" },
-          { value: "competition", label: "Competition" },
-          { value: "concert", label: "Concert" },
-          { value: "festival", label: "Festival" },
-          { value: "job", label: "Job" },
-        ]}
-        value={formData.postType}
-        onChange={handlePostTypeChange}
-        required
-      />
-      <Checkbox
-        label="Multiple Posts"
-        name="multiplePosts"
-        checked={formData.multiplePosts}
-        onChange={(event) =>
-          setFormData({ ...formData, multiplePosts: event.currentTarget.checked })
-        }
-      />
-      {formData.multiplePosts && (
-        <>
-          <TextInput
-            label="Individual Post Selector"
-            name="individualPostSelector"
-            placeholder="Enter class name or xpath"
-            value={formData.individualPostSelector}
-            onChange={handleInputChange}
-            required
-          />
-          <TextInput
-            label="Next Page Selector"
-            name="nextPageSelector"
-            placeholder="Enter class name or xpath"
-            value={formData.nextPageSelector}
-            onChange={handleInputChange}
-            required
-          />
-        </>
-      )}
-      <Button type="submit" variant="outline">
-        Submit
-      </Button>
-    </form>
-            
-          </Paper>
-        </Container>
-      );
-}
\ No newline at end of file
+  function handlePostTypeChange(value: string | null) {
+    if (value) {
+      setFormData({...formData, postType: value as PostType})
+    }
+  }
+
+  return (
+    <Container fluid className={classes.container}>
+      <Paper
+        withBorder
+        mt={30}
+        radius="lg"
+        className={cx(classes.userContainer)}
+        sx={{padding: '40px 20px'}}
+      >
+        <form onSubmit={handleSubmit}>
+          <TextInput
+            label="Link"
+            name="link"
+            placeholder="Enter link"
+            value={formData.link}
+            onChange={handleInputChange}
+            required
+          />
+          <Select
+            label="Post Type"
+            name="postType"
+            data={[
+              {value: 'news', label: 'News'},
+              {value: 'competition', label: 'Competition'},
+              {value: 'concert', label: 'Concert'},
+              {value: 'festival', label: 'Festival'},
+              {value: 'job', label: 'Job'},
+            ]}
+            value={formData.postType}
+            onChange={handlePostTypeChange}
+            required
+          />
+          <Checkbox
+            label="Multiple Posts"
+            name="multiplePosts"
+            checked={formData.multiplePosts}
+            onChange={(event) =>
+              setFormData({
+                ...formData,
+                multiplePosts: event.currentTarget.checked,
+              })
+            }
+          />
+          {formData.multiplePosts && (
+            <>
+              <TextInput
+                label="Individual Post Selector"
+                name="individualPostSelector"
+                placeholder="Enter class name or xpath"
+                value={formData.individualPostSelector}
+                onChange={handleInputChange}
+                required
+              />
+              <TextInput
+                label="Next Page Selector"
+                name="nextPageSelector"
+                placeholder="Enter class name or xpath"
+                value={formData.nextPageSelector}
+                onChange={handleInputChange}
+                required
+              />
+            </>
+          )}
+          <Button type="submit" variant="outline">
+            Submit
+          </Button>
+        </form>
+      </Paper>
+    </Container>
+  )
+}
Index: src/components/adminView/ScrapedJobs.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {\n  Paper,\n  Menu,\n  Badge,\n  Table,\n  Text,\n  ActionIcon,\n  ScrollArea,\n  useMantineTheme,\n  Container,\n  createStyles,\n  LoadingOverlay,\n  Skeleton,\n  Checkbox,\n  Button,\n  Modal,\n} from \"@mantine/core\";\nimport { OpportunityItem } from \"../opportunity/OpportunityHelper\";\nimport { ScrapedPost } from \"./ScrapedPostHelper\";\nimport { FormHeader } from \"../opportunity/CreateOpportunityHelper\";\nimport {\n  IconBan,\n  IconTrash,\n  IconArrowBigUpLine,\n  IconCheck,\n  IconArrowBigDownLine,\n  IconDots,\n} from \"@tabler/icons\";\nimport { auth } from \"../../Firebase\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { showNotification } from \"@mantine/notifications\";\nimport { openAdminModal } from \"./modals/AdminModal\";\nimport { openDeleteModal } from \"./modals/DeleteModal\";\nimport { openBanModal } from \"./modals/BanModal\";\nimport {\n  PaginationNavbar,\n  PaginationSearchObject,\n} from \"../pagination/PaginationNavbar\";\nimport { useMediaQuery } from \"@mantine/hooks\";\nimport { PaginationNavbarScraper } from \"../pagination/PaginationNavbarScraper\";\nimport { SearchAndFilterScraped } from \"./SearchAndFilterScraped\";\nimport { OpportunityForm } from \"../opportunity/OpportunityForm\";\nimport { ScrapedPostForm } from \"./ScrapedPostForm\";\n\ninterface JobTableData {\n  UID?: string;\n  idposts?: number;\n  title?: string;\n  description?: string;\n  link?: string;\n  organization?: string;\n  job_type?: string;\n  job_category?: string;\n  cityState?: string;\n}\n\nconst typeColors: Record<string, string> = {\n  regular: \"blue\",\n  admin: \"green\",\n  banned: \"red\",\n};\n\nconst useStyles = createStyles((theme) => ({\n  container: {\n    width: \"90vw\",\n    padding: \"0px\",\n\n    [theme.fn.smallerThan(\"md\")]: {\n      width: \"100%\",\n    },\n  },\n\n  userContainer: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    position: \"relative\",\n    zIndex: 1,\n    borderColor: \"#939393\",\n\n    [theme.fn.smallerThan(\"md\")]: {\n      padding: \"15px\",\n      borderRadius: \"0px\",\n    },\n\n    [theme.fn.largerThan(\"sm\")]: {\n      height: \"90vh\",\n    },\n  },\n  noDataContainer: {\n    display: \"flex\",\n    justifyContent: \"center\", // Center horizontally\n  alignItems: \"center\",\n    position: \"relative\",\n    zIndex: 1,\n    borderColor: \"#939393\",\n\n    \n\n    [theme.fn.largerThan(\"sm\")]: {\n      height: \"5vh\",\n    },\n  },\n\n  table: {\n    maxWidth: \"100%\",\n    flexBasis: \"100%\",\n\n    [theme.fn.smallerThan(\"md\")]: {\n      maxHeight: \"90vh\",\n      padding: \"0px\",\n    },\n  },\n\n  bold: {\n    fontWeight: 700,\n  },\n\n  header: {\n    position: \"sticky\",\n    top: 0,\n    backgroundColor:\n      theme.colorScheme === \"dark\" ? theme.colors.dark[7] : theme.white,\n    transition: \"box-shadow 150ms ease\",\n\n    \"&::after\": {\n      content: '\"\"',\n      position: \"absolute\",\n      zIndex: 1,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      borderBottom: `1px solid ${\n        theme.colorScheme === \"dark\"\n          ? theme.colors.dark[3]\n          : theme.colors.gray[2]\n      }`,\n    },\n  },\n\n  scrolled: {\n    // boxShadow: theme.shadows.sm,\n  },\n}));\n\nexport function ScrapedJobs() {\n  const theme = useMantineTheme();\n  const { classes, cx } = useStyles();\n  const [rawJobList, setRawJobList] = useState<ScrapedPost[]>([]);\n  const [selectedRows, setSelectedRows] = useState<number[]>([]);\n  const [currentOpportunity, setCurrentOpportunity] =\n    useState<ScrapedPost | null>(null);\n  const [selectAll, setSelectAll] = useState(false);\n  const [displayOpportunityEditModal, setDisplayOpportunityEditModal] =\n    useState(false);\n  const [displayOpportunityInfoModal, setDisplayOpportunityInfoModal] =\n    useState(false);\n  const [JobList, setJobList] = useState<JobTableData[]>([]); // Corrected variable name\n  const [searchParams, setSearchParams] = useState<PaginationSearchObject>({\n    keyword: \"\",\n  });\n  const [CurrentPage, setCurrentPage] = useState(1); // Add CurrentPage state\n  const [scrolled, setScrolled] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [recall, setRecall] = useState(0);\n  const smallerScreen = useMediaQuery(\"(max-width: 992px)\");\n\n  const handleCurrentPageChange = (count: number) => {\n    setCurrentPage(count);\n  };\n\n\n  useEffect(() => {\n    onAuthStateChanged(auth, async (user) => {\n      if (user && user.email) {\n        setSearchParams({ ...searchParams,});\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    convertRawJobDataToTableData();\n  }, [rawJobList, searchParams]);\n\n  useEffect(() => {\n    console.log(\"loading changed to:\", loading);\n  }, [loading]);\n\n  const convertRawJobDataToTableData = () => {\n    let newJobList: JobTableData[] = [];\n    rawJobList?.forEach((JobItem) => {\n      const startDate = JobItem.start_date ? new Date(JobItem.start_date) : null;\n      const endDate = JobItem.end_date ? new Date(JobItem.end_date) : null;\n      const deadline = JobItem.deadline ? new Date(JobItem.deadline) : null;\n  \n      let formattedJobData: JobTableData = {\n        UID: JobItem.UID,\n        idposts: JobItem.idposts,\n        title: JobItem.title,\n        description: JobItem.description,\n        link: JobItem.link,\n        organization: JobItem.organization,\n        job_type: JobItem.job_type,\n        job_category: JobItem.job_category,\n        cityState: JobItem.city + \", \" + JobItem.state,\n      };\n      newJobList.push(formattedJobData);\n    });\n    setJobList(newJobList);\n  };\n\n  const mobileScreen = useMediaQuery(\"(max-width: 768px)\");\n  const dragState = useRef({\n    isDragging: false,\n    startRowIndex: -1,\n    endRowIndex: -1,\n  });\n  \n  const handleMouseDown = (index: number) => {\n    dragState.current.isDragging = true;\n    dragState.current.startRowIndex = index;\n    dragState.current.endRowIndex = index;\n  };\n  \n  const handleMouseEnter = (index: number) => {\n    if (dragState.current.isDragging) {\n      dragState.current.endRowIndex = index;\n      const start = Math.min(\n        dragState.current.startRowIndex,\n        dragState.current.endRowIndex\n      );\n      const end = Math.max(\n        dragState.current.startRowIndex,\n        dragState.current.endRowIndex\n      );\n      const selectedIDPosts = [...selectedRows];\n      const id = rawJobList[dragState.current.startRowIndex]?.idposts ?? -1;\n    if (selectedIDPosts.includes(id)) {\n      // If the startRowIndex is in the selectedRows list,\n      // add new IDPosts to the selectedRows\n      for (let i = start; i <= end; i++) {\n        if (!selectedIDPosts.includes(rawJobList[i]?.idposts ?? -1)) {\n          selectedIDPosts.push(rawJobList[i]?.idposts ?? -1);\n        }\n      }\n    } else {\n      // Otherwise, remove dragged elements if they are in the list\n      for (let i = start; i <= end; i++) {\n        const indexToRemove = selectedIDPosts.indexOf(rawJobList[i]?.idposts ?? -1);\n        if (indexToRemove !== -1) {\n          selectedIDPosts.splice(indexToRemove, 1);\n        }\n      }\n    }\n    setSelectedRows(selectedIDPosts);\n    }\n  };\n  \n  const handleMouseUp = () => {\n    dragState.current.isDragging = false;\n  };\n\n  const handleRowSelect = (idposts: number) => {\n    setSelectedRows(prevSelectedRows => {\n      if (prevSelectedRows.includes(idposts)) {\n        // If UID is already selected, remove it from the selectedRows\n        return prevSelectedRows.filter(row => row !== idposts);\n      } else {\n        // Otherwise, add it to the selectedRows\n        return [...prevSelectedRows, idposts];\n      }\n    });\n  };\n  const editFunction = async (opportunity: ScrapedPost) => {\n    try {\n      let idpost = currentOpportunity?.idposts;\n      // Delete the idposts in the opportunity such that the backend doesn't actually update the idpost column in mySQL.\n      // This shouldn't be necessary to do at all but have it here just in-case the idposts here is some how different from the idposts in the url parameters and/or in mySQL\n      \n      delete opportunity.idposts;\n      delete opportunity.first_name;\n      delete opportunity.last_name;\n      delete opportunity.email;\n      delete opportunity.is_banned;\n      delete opportunity.is_admin;\n      delete opportunity.ban_message;\n\n      for (let key in opportunity) {\n        if (\n          !opportunity[key as keyof typeof opportunity] &&\n          key !== \"winner\" &&\n          key !== \"city\" &&\n          key !== \"state\" &&\n          key !== \"address\"\n        ) {\n          delete opportunity[key as keyof typeof opportunity];\n        }\n      }\n\n      console.log(\"formatted edit body:\", opportunity);\n\n      let requestOptions = {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(opportunity),\n      };\n\n      let response = await fetch(\n        `https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday/Jobs/${idpost}`,\n        requestOptions\n      );\n\n      let responseJson = await response.json();\n\n      let editedOpportunity = responseJson.listOfObjects[0];\n\n      return editedOpportunity;\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const handleEditButton = async (opportunity: ScrapedPost) => {\n    try {\n      //delete opportunity.UID;\n      //delete opportunity.date_posted;\n      \n\n      // Format any keys of type number to be as type strings since the APIs only accept strings for the request body\n      opportunity.end_date = opportunity.end_date?.toString();\n      opportunity.start_date = opportunity.start_date?.toString();\n      opportunity.deadline = opportunity.deadline?.toString();\n      opportunity.salary = opportunity.salary?.toString();\n      opportunity.fee = opportunity.fee?.toString();\n\n      let editedOpportunity = await editFunction(opportunity);\n\n      for (let i = 0; i < rawJobList.length; i++) {\n        if (rawJobList[i].idposts === editedOpportunity.idposts) {\n          let tempArray = rawJobList;\n          tempArray[i] = editedOpportunity;\n          setRawJobList([...tempArray]);\n          break;\n        }\n      }\n\n      showNotification({\n        title: \"Edits Applied\",\n        message: \"Your changes have been applied\",\n        color: \"green\",\n      });\n      setDisplayOpportunityEditModal(false);\n    } catch (err) {\n      console.log(err);\n      showNotification({\n        title: \"Error\",\n        message: \"There was a problem, please try again later\",\n        color: \"red\",\n      });\n    }\n  };\n  \n\n  const rows = JobList?.map((item, index) => (\n    <tr \n      onMouseDown={() => handleMouseDown(index)}\n      onMouseEnter={() => handleMouseEnter(index)}\n      onMouseUp={handleMouseUp}\n      \n        onClick={() => handleRowSelect(item.idposts ?? -1)}\n        style={{\n          backgroundColor: selectedRows.includes(item.idposts ?? -1) ? \"#e6f7ff\" : \"inherit\",\n          cursor: \"pointer\",\n          \n        }}\n    >\n      \n      <td>\n        <Text size=\"sm\" weight={500}>\n          {item.title}\n        </Text>\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.link}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.organization}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.job_type}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.job_category}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.cityState}\n          </Text>\n        )}\n      </td>\n      \n        <td>\n          <Container style={{ width: 400 }}>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.description}\n          </Text>\n          </Container>\n        </td>\n      \n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\" >\n            {item.organization}\n          </Text>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Container style={{ width: 100 }}>\n          <a href={item.link} target='_blank'  color=\"dimmed\" style={{ overflowWrap: 'break-word' }}>\n          {item.link}\n          </a>\n          </Container>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.job_type}\n          </Text>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.job_category}\n          </Text>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.cityState}\n          </Text>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.cityState}\n          </Text>\n        </td>\n      )}\n      <td>\n      <Button \n        variant=\"outline\" \n        size=\"sm\" \n        onClick={() => {\n          setDisplayOpportunityEditModal(true);\n          setCurrentOpportunity(rawJobList[index]);\n        }}\n      >\n        Edit\n      </Button>\n    </td>      \n    </tr>\n    \n  ));\n\n  const loadingRows = [1, 2, 3, 4, 5, 6, 7].map((item, index) => (\n    <tr key={index}>\n      <td>\n        <Skeleton\n          height={8}\n          width=\"40%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n        />\n        {mobileScreen && (\n          <Skeleton\n            height={6}\n            width=\"100%\"\n            radius=\"xl\"\n            sx={{ margin: \"8px 0px\" }}\n            \n          />\n        )}\n      </td>\n      {!mobileScreen && (\n        <td>\n          <Skeleton\n            height={16}\n            width=\"100%\"\n            radius=\"xl\"\n            sx={{ margin: \"8px 0px\" }}\n            \n          />\n        </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"40%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n        \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n    </tr>\n  ));\n\n\n\n  const handleSelectAll = () => {\n    if (selectAll) {\n      // If all rows are selected, deselect all\n      setSelectedRows([]);\n      setSelectAll(false);\n    } else {\n      // Otherwise, select all rows\n      const allRowIDs = JobList.map(item => item.idposts ?? -1);\n      setSelectedRows(allRowIDs);\n      setSelectAll(true);\n    }\n  };\n  const handleSelectedRowsUpdate = (updatedSelectedRows: number[]) => {\n    setSelectedRows(updatedSelectedRows);\n    \n  };\n\n  const handleUpdate = () => {\n    setRecall((prevRecall) => prevRecall + 1);\n  }\n\n  return (\n    <Container fluid className={classes.container}>\n      <SearchAndFilterScraped\n        setSearchObjs={setSearchParams}\n        selectedRows={selectedRows}\n        onUpdateSelectedRows={handleSelectedRowsUpdate}\n        onUpdate={handleUpdate}\n        rawData={rawJobList}\n  />\n\n<Paper\n        withBorder\n        mt={30}\n        radius=\"lg\"\n        className={cx(classes.userContainer, {\n          [classes.noDataContainer]: rawJobList.length === 0,\n        })}\n        sx={{ padding: \"40px 20px\" }}\n      >\n        <LoadingOverlay\n          visible={loading}\n          overlayOpacity={0.2}\n          overlayBlur={0.2}\n          radius=\"lg\"\n        />\n        {rawJobList.length === 0 ? (\n        \n          <Text size=\"lg\" weight={500} align=\"center\" style={{ color: '#42A563',\n    fontSize: '36px',\n    textAlign: \"center\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"100%\",}}>\n            No New Jobs\n          </Text>\n       \n        ) : (\n        <ScrollArea w=\"100%\" h=\"90%\">\n          <Container className={classes.table}>\n            <Table verticalSpacing=\"sm\">\n              <thead\n                className={cx(classes.header, {\n                  [classes.scrolled]: scrolled,\n                })}\n              >\n                <tr>\n                  \n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"40%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Title\"\n                    )}\n                  </th>\n                  \n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"50%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Description\"\n                    )}\n                  </th>\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Organization\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Link\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Job Type\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                       \n                      />\n                    ) : (\n                      \"Job Category\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"City/State\"\n                    )}\n                  </th>\n                  )}\n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>{loading ? loadingRows : rows}</tbody>\n            </Table>\n          </Container>\n        </ScrollArea>\n        )}\n        {\n          <Container sx={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", marginTop: \"30px\" }}>\n          <PaginationNavbarScraper\n            apiEndpointExtension={\"jobs\"}\n            numberOfItemsPerPage={10}\n            setListOfObjects={setRawJobList}\n            searchFilterObject={searchParams}\n            setLoading={setLoading}\n            recall={recall}\n            //curPage = {CurrentPage}\n            \n          />\n          \n          </Container>\n        }\n      </Paper>\n      <Modal\n        opened={displayOpportunityEditModal}\n        onClose={() => {\n          setDisplayOpportunityEditModal(false);\n        }}\n        fullScreen={smallerScreen}\n        size=\"60%\"\n      >\n        <FormHeader>Edit Post</FormHeader>\n        <ScrapedPostForm\n          edit={true}\n          opportunityType={\n            \"jobs\"\n          }\n          opportunity={currentOpportunity ? currentOpportunity : undefined}\n          displayWinnerInput\n          handleSubmission={handleEditButton}\n        />\n      </Modal>\n    </Container>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/adminView/ScrapedJobs.tsx b/src/components/adminView/ScrapedJobs.tsx
--- a/src/components/adminView/ScrapedJobs.tsx	
+++ b/src/components/adminView/ScrapedJobs.tsx	
@@ -14,10 +14,10 @@
   Checkbox,
   Button,
   Modal,
-} from "@mantine/core";
-import { OpportunityItem } from "../opportunity/OpportunityHelper";
-import { ScrapedPost } from "./ScrapedPostHelper";
-import { FormHeader } from "../opportunity/CreateOpportunityHelper";
+} from '@mantine/core'
+import {OpportunityItem} from '../opportunity/OpportunityHelper'
+import {ScrapedPost} from './ScrapedPostHelper'
+import {FormHeader} from '../opportunity/CreateOpportunityHelper'
 import {
   IconBan,
   IconTrash,
@@ -25,90 +25,88 @@
   IconCheck,
   IconArrowBigDownLine,
   IconDots,
-} from "@tabler/icons";
-import { auth } from "../../Firebase";
-import { onAuthStateChanged } from "firebase/auth";
-import { useEffect, useState, useRef } from "react";
-import { showNotification } from "@mantine/notifications";
-import { openAdminModal } from "./modals/AdminModal";
-import { openDeleteModal } from "./modals/DeleteModal";
-import { openBanModal } from "./modals/BanModal";
+} from '@tabler/icons'
+import {auth} from '../../Firebase'
+import {onAuthStateChanged} from 'firebase/auth'
+import {useEffect, useState, useRef} from 'react'
+import {showNotification} from '@mantine/notifications'
+import {openAdminModal} from './modals/AdminModal'
+import {openDeleteModal} from './modals/DeleteModal'
+import {openBanModal} from './modals/BanModal'
 import {
   PaginationNavbar,
   PaginationSearchObject,
-} from "../pagination/PaginationNavbar";
-import { useMediaQuery } from "@mantine/hooks";
-import { PaginationNavbarScraper } from "../pagination/PaginationNavbarScraper";
-import { SearchAndFilterScraped } from "./SearchAndFilterScraped";
-import { OpportunityForm } from "../opportunity/OpportunityForm";
-import { ScrapedPostForm } from "./ScrapedPostForm";
+} from '../pagination/PaginationNavbar'
+import {useMediaQuery} from '@mantine/hooks'
+import {PaginationNavbarScraper} from '../pagination/PaginationNavbarScraper'
+import {SearchAndFilterScraped} from './SearchAndFilterScraped'
+import {OpportunityForm} from '../opportunity/OpportunityForm'
+import {ScrapedPostForm} from './ScrapedPostForm'
 
 interface JobTableData {
-  UID?: string;
-  idposts?: number;
-  title?: string;
-  description?: string;
-  link?: string;
-  organization?: string;
-  job_type?: string;
-  job_category?: string;
-  cityState?: string;
+  UID?: string
+  idposts?: number
+  title?: string
+  description?: string
+  link?: string
+  organization?: string
+  job_type?: string
+  job_category?: string
+  cityState?: string
 }
 
 const typeColors: Record<string, string> = {
-  regular: "blue",
-  admin: "green",
-  banned: "red",
-};
+  regular: 'blue',
+  admin: 'green',
+  banned: 'red',
+}
 
 const useStyles = createStyles((theme) => ({
   container: {
-    width: "90vw",
-    padding: "0px",
+    width: '90vw',
+    padding: '0px',
 
-    [theme.fn.smallerThan("md")]: {
-      width: "100%",
+    [theme.fn.smallerThan('md')]: {
+      width: '100%',
     },
   },
 
   userContainer: {
-    display: "flex",
-    flexWrap: "wrap",
-    position: "relative",
+    display: 'flex',
+    flexWrap: 'wrap',
+    position: 'relative',
     zIndex: 1,
-    borderColor: "#939393",
+    borderColor: '#939393',
 
-    [theme.fn.smallerThan("md")]: {
-      padding: "15px",
-      borderRadius: "0px",
+    [theme.fn.smallerThan('md')]: {
+      padding: '15px',
+      borderRadius: '0px',
     },
 
-    [theme.fn.largerThan("sm")]: {
-      height: "90vh",
+    [theme.fn.largerThan('sm')]: {
+      height: '90vh',
     },
   },
   noDataContainer: {
-    display: "flex",
-    justifyContent: "center", // Center horizontally
-  alignItems: "center",
-    position: "relative",
+    display: 'flex',
+    justifyContent: 'center', // Center horizontally
+    alignItems: 'center',
+    position: 'relative',
     zIndex: 1,
-    borderColor: "#939393",
+    borderColor: '#939393',
 
-    
-
-    [theme.fn.largerThan("sm")]: {
-      height: "5vh",
+    [theme.fn.largerThan('sm')]: {
+      height: '5vh',
     },
   },
 
   table: {
-    maxWidth: "100%",
-    flexBasis: "100%",
+    maxWidth: '100%',
+    flexBasis: '100%',
 
-    [theme.fn.smallerThan("md")]: {
-      maxHeight: "90vh",
-      padding: "0px",
+    [theme.fn.smallerThan('md')]: {
+      maxHeight: '90vh',
+      padding: '0px',
     },
   },
 
@@ -117,21 +115,21 @@
   },
 
   header: {
-    position: "sticky",
+    position: 'sticky',
     top: 0,
     backgroundColor:
-      theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white,
-    transition: "box-shadow 150ms ease",
+      theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,
+    transition: 'box-shadow 150ms ease',
 
-    "&::after": {
+    '&::after': {
       content: '""',
-      position: "absolute",
+      position: 'absolute',
       zIndex: 1,
       left: 0,
       right: 0,
       bottom: 0,
       borderBottom: `1px solid ${
-        theme.colorScheme === "dark"
+        theme.colorScheme === 'dark'
           ? theme.colors.dark[3]
           : theme.colors.gray[2]
       }`,
@@ -141,58 +139,57 @@
   scrolled: {
     // boxShadow: theme.shadows.sm,
   },
-}));
+}))
 
 export function ScrapedJobs() {
-  const theme = useMantineTheme();
-  const { classes, cx } = useStyles();
-  const [rawJobList, setRawJobList] = useState<ScrapedPost[]>([]);
-  const [selectedRows, setSelectedRows] = useState<number[]>([]);
+  const theme = useMantineTheme()
+  const {classes, cx} = useStyles()
+  const [rawJobList, setRawJobList] = useState<ScrapedPost[]>([])
+  const [selectedRows, setSelectedRows] = useState<number[]>([])
   const [currentOpportunity, setCurrentOpportunity] =
-    useState<ScrapedPost | null>(null);
-  const [selectAll, setSelectAll] = useState(false);
+    useState<ScrapedPost | null>(null)
+  const [selectAll, setSelectAll] = useState(false)
   const [displayOpportunityEditModal, setDisplayOpportunityEditModal] =
-    useState(false);
+    useState(false)
   const [displayOpportunityInfoModal, setDisplayOpportunityInfoModal] =
-    useState(false);
-  const [JobList, setJobList] = useState<JobTableData[]>([]); // Corrected variable name
+    useState(false)
+  const [JobList, setJobList] = useState<JobTableData[]>([]) // Corrected variable name
   const [searchParams, setSearchParams] = useState<PaginationSearchObject>({
-    keyword: "",
-  });
-  const [CurrentPage, setCurrentPage] = useState(1); // Add CurrentPage state
-  const [scrolled, setScrolled] = useState(false);
-  const [loading, setLoading] = useState(true);
-  const [recall, setRecall] = useState(0);
-  const smallerScreen = useMediaQuery("(max-width: 992px)");
+    keyword: '',
+  })
+  const [CurrentPage, setCurrentPage] = useState(1) // Add CurrentPage state
+  const [scrolled, setScrolled] = useState(false)
+  const [loading, setLoading] = useState(true)
+  const [recall, setRecall] = useState(0)
+  const smallerScreen = useMediaQuery('(max-width: 992px)')
 
   const handleCurrentPageChange = (count: number) => {
-    setCurrentPage(count);
-  };
-
+    setCurrentPage(count)
+  }
 
   useEffect(() => {
     onAuthStateChanged(auth, async (user) => {
       if (user && user.email) {
-        setSearchParams({ ...searchParams,});
+        setSearchParams({...searchParams})
       }
-    });
-  }, []);
+    })
+  }, [])
 
   useEffect(() => {
-    convertRawJobDataToTableData();
-  }, [rawJobList, searchParams]);
+    convertRawJobDataToTableData()
+  }, [rawJobList, searchParams])
 
   useEffect(() => {
-    console.log("loading changed to:", loading);
-  }, [loading]);
+    console.log('loading changed to:', loading)
+  }, [loading])
 
   const convertRawJobDataToTableData = () => {
-    let newJobList: JobTableData[] = [];
+    let newJobList: JobTableData[] = []
     rawJobList?.forEach((JobItem) => {
-      const startDate = JobItem.start_date ? new Date(JobItem.start_date) : null;
-      const endDate = JobItem.end_date ? new Date(JobItem.end_date) : null;
-      const deadline = JobItem.deadline ? new Date(JobItem.deadline) : null;
-  
+      const startDate = JobItem.start_date ? new Date(JobItem.start_date) : null
+      const endDate = JobItem.end_date ? new Date(JobItem.end_date) : null
+      const deadline = JobItem.deadline ? new Date(JobItem.deadline) : null
+
       let formattedJobData: JobTableData = {
         UID: JobItem.UID,
         idposts: JobItem.idposts,
@@ -202,179 +199,178 @@
         organization: JobItem.organization,
         job_type: JobItem.job_type,
         job_category: JobItem.job_category,
-        cityState: JobItem.city + ", " + JobItem.state,
-      };
-      newJobList.push(formattedJobData);
-    });
-    setJobList(newJobList);
-  };
+        cityState: JobItem.city + ', ' + JobItem.state,
+      }
+      newJobList.push(formattedJobData)
+    })
+    setJobList(newJobList)
+  }
 
-  const mobileScreen = useMediaQuery("(max-width: 768px)");
+  const mobileScreen = useMediaQuery('(max-width: 768px)')
   const dragState = useRef({
     isDragging: false,
     startRowIndex: -1,
     endRowIndex: -1,
-  });
-  
+  })
+
   const handleMouseDown = (index: number) => {
-    dragState.current.isDragging = true;
-    dragState.current.startRowIndex = index;
-    dragState.current.endRowIndex = index;
-  };
-  
+    dragState.current.isDragging = true
+    dragState.current.startRowIndex = index
+    dragState.current.endRowIndex = index
+  }
+
   const handleMouseEnter = (index: number) => {
     if (dragState.current.isDragging) {
-      dragState.current.endRowIndex = index;
+      dragState.current.endRowIndex = index
       const start = Math.min(
         dragState.current.startRowIndex,
-        dragState.current.endRowIndex
-      );
+        dragState.current.endRowIndex,
+      )
       const end = Math.max(
         dragState.current.startRowIndex,
-        dragState.current.endRowIndex
-      );
-      const selectedIDPosts = [...selectedRows];
-      const id = rawJobList[dragState.current.startRowIndex]?.idposts ?? -1;
-    if (selectedIDPosts.includes(id)) {
-      // If the startRowIndex is in the selectedRows list,
-      // add new IDPosts to the selectedRows
-      for (let i = start; i <= end; i++) {
-        if (!selectedIDPosts.includes(rawJobList[i]?.idposts ?? -1)) {
-          selectedIDPosts.push(rawJobList[i]?.idposts ?? -1);
-        }
-      }
-    } else {
-      // Otherwise, remove dragged elements if they are in the list
-      for (let i = start; i <= end; i++) {
-        const indexToRemove = selectedIDPosts.indexOf(rawJobList[i]?.idposts ?? -1);
-        if (indexToRemove !== -1) {
-          selectedIDPosts.splice(indexToRemove, 1);
+        dragState.current.endRowIndex,
+      )
+      const selectedIDPosts = [...selectedRows]
+      const id = rawJobList[dragState.current.startRowIndex]?.idposts ?? -1
+      if (selectedIDPosts.includes(id)) {
+        // If the startRowIndex is in the selectedRows list,
+        // add new IDPosts to the selectedRows
+        for (let i = start; i <= end; i++) {
+          if (!selectedIDPosts.includes(rawJobList[i]?.idposts ?? -1)) {
+            selectedIDPosts.push(rawJobList[i]?.idposts ?? -1)
+          }
+        }
+      } else {
+        // Otherwise, remove dragged elements if they are in the list
+        for (let i = start; i <= end; i++) {
+          const indexToRemove = selectedIDPosts.indexOf(
+            rawJobList[i]?.idposts ?? -1,
+          )
+          if (indexToRemove !== -1) {
+            selectedIDPosts.splice(indexToRemove, 1)
+          }
         }
       }
+      setSelectedRows(selectedIDPosts)
     }
-    setSelectedRows(selectedIDPosts);
-    }
-  };
-  
+  }
+
   const handleMouseUp = () => {
-    dragState.current.isDragging = false;
-  };
+    dragState.current.isDragging = false
+  }
 
   const handleRowSelect = (idposts: number) => {
-    setSelectedRows(prevSelectedRows => {
+    setSelectedRows((prevSelectedRows) => {
       if (prevSelectedRows.includes(idposts)) {
         // If UID is already selected, remove it from the selectedRows
-        return prevSelectedRows.filter(row => row !== idposts);
+        return prevSelectedRows.filter((row) => row !== idposts)
       } else {
         // Otherwise, add it to the selectedRows
-        return [...prevSelectedRows, idposts];
+        return [...prevSelectedRows, idposts]
       }
-    });
-  };
+    })
+  }
   const editFunction = async (opportunity: ScrapedPost) => {
     try {
-      let idpost = currentOpportunity?.idposts;
+      let idpost = currentOpportunity?.idposts
       // Delete the idposts in the opportunity such that the backend doesn't actually update the idpost column in mySQL.
       // This shouldn't be necessary to do at all but have it here just in-case the idposts here is some how different from the idposts in the url parameters and/or in mySQL
-      
-      delete opportunity.idposts;
-      delete opportunity.first_name;
-      delete opportunity.last_name;
-      delete opportunity.email;
-      delete opportunity.is_banned;
-      delete opportunity.is_admin;
-      delete opportunity.ban_message;
+
+      delete opportunity.idposts
+      delete opportunity.first_name
+      delete opportunity.last_name
+      delete opportunity.email
+      delete opportunity.is_banned
+      delete opportunity.is_admin
+      delete opportunity.ban_message
 
       for (let key in opportunity) {
         if (
           !opportunity[key as keyof typeof opportunity] &&
-          key !== "winner" &&
-          key !== "city" &&
-          key !== "state" &&
-          key !== "address"
+          key !== 'winner' &&
+          key !== 'city' &&
+          key !== 'state' &&
+          key !== 'address'
         ) {
-          delete opportunity[key as keyof typeof opportunity];
+          delete opportunity[key as keyof typeof opportunity]
         }
       }
 
-      console.log("formatted edit body:", opportunity);
+      console.log('formatted edit body:', opportunity)
 
       let requestOptions = {
-        method: "PUT",
-        headers: { "Content-Type": "application/json" },
+        method: 'PUT',
+        headers: {'Content-Type': 'application/json'},
         body: JSON.stringify(opportunity),
-      };
+      }
 
       let response = await fetch(
         `https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday/Jobs/${idpost}`,
-        requestOptions
-      );
+        requestOptions,
+      )
 
-      let responseJson = await response.json();
+      let responseJson = await response.json()
 
-      let editedOpportunity = responseJson.listOfObjects[0];
+      let editedOpportunity = responseJson.listOfObjects[0]
 
-      return editedOpportunity;
+      return editedOpportunity
     } catch (err) {
-      console.log(err);
+      console.log(err)
     }
-  };
+  }
 
   const handleEditButton = async (opportunity: ScrapedPost) => {
     try {
       //delete opportunity.UID;
       //delete opportunity.date_posted;
-      
 
       // Format any keys of type number to be as type strings since the APIs only accept strings for the request body
-      opportunity.end_date = opportunity.end_date?.toString();
-      opportunity.start_date = opportunity.start_date?.toString();
-      opportunity.deadline = opportunity.deadline?.toString();
-      opportunity.salary = opportunity.salary?.toString();
-      opportunity.fee = opportunity.fee?.toString();
+      opportunity.end_date = opportunity.end_date?.toString()
+      opportunity.start_date = opportunity.start_date?.toString()
+      opportunity.deadline = opportunity.deadline?.toString()
+      opportunity.salary = opportunity.salary?.toString()
+      opportunity.fee = opportunity.fee?.toString()
 
-      let editedOpportunity = await editFunction(opportunity);
+      let editedOpportunity = await editFunction(opportunity)
 
       for (let i = 0; i < rawJobList.length; i++) {
         if (rawJobList[i].idposts === editedOpportunity.idposts) {
-          let tempArray = rawJobList;
-          tempArray[i] = editedOpportunity;
-          setRawJobList([...tempArray]);
-          break;
+          let tempArray = rawJobList
+          tempArray[i] = editedOpportunity
+          setRawJobList([...tempArray])
+          break
         }
       }
 
       showNotification({
-        title: "Edits Applied",
-        message: "Your changes have been applied",
-        color: "green",
-      });
-      setDisplayOpportunityEditModal(false);
+        title: 'Edits Applied',
+        message: 'Your changes have been applied',
+        color: 'green',
+      })
+      setDisplayOpportunityEditModal(false)
     } catch (err) {
-      console.log(err);
+      console.log(err)
       showNotification({
-        title: "Error",
-        message: "There was a problem, please try again later",
-        color: "red",
-      });
+        title: 'Error',
+        message: 'There was a problem, please try again later',
+        color: 'red',
+      })
     }
-  };
-  
+  }
 
   const rows = JobList?.map((item, index) => (
-    <tr 
+    <tr
       onMouseDown={() => handleMouseDown(index)}
       onMouseEnter={() => handleMouseEnter(index)}
       onMouseUp={handleMouseUp}
-      
-        onClick={() => handleRowSelect(item.idposts ?? -1)}
-        style={{
-          backgroundColor: selectedRows.includes(item.idposts ?? -1) ? "#e6f7ff" : "inherit",
-          cursor: "pointer",
-          
-        }}
+      onClick={() => handleRowSelect(item.idposts ?? -1)}
+      style={{
+        backgroundColor: selectedRows.includes(item.idposts ?? -1)
+          ? '#e6f7ff'
+          : 'inherit',
+        cursor: 'pointer',
+      }}
     >
-      
       <td>
         <Text size="sm" weight={500}>
           {item.title}
@@ -405,28 +401,33 @@
           </Text>
         )}
       </td>
-      
-        <td>
-          <Container style={{ width: 400 }}>
+
+      <td>
+        <Container style={{width: 400}}>
           <Text size="sm" color="dimmed">
             {item.description}
           </Text>
-          </Container>
-        </td>
-      
+        </Container>
+      </td>
+
       {!mobileScreen && (
         <td>
-          <Text size="sm" color="dimmed" >
+          <Text size="sm" color="dimmed">
             {item.organization}
           </Text>
         </td>
       )}
       {!mobileScreen && (
         <td>
-          <Container style={{ width: 100 }}>
-          <a href={item.link} target='_blank'  color="dimmed" style={{ overflowWrap: 'break-word' }}>
-          {item.link}
-          </a>
+          <Container style={{width: 100}}>
+            <a
+              href={item.link}
+              target="_blank"
+              color="dimmed"
+              style={{overflowWrap: 'break-word'}}
+            >
+              {item.link}
+            </a>
           </Container>
         </td>
       )}
@@ -459,37 +460,30 @@
         </td>
       )}
       <td>
-      <Button 
-        variant="outline" 
-        size="sm" 
-        onClick={() => {
-          setDisplayOpportunityEditModal(true);
-          setCurrentOpportunity(rawJobList[index]);
-        }}
-      >
-        Edit
-      </Button>
-    </td>      
+        <Button
+          variant="outline"
+          size="sm"
+          onClick={() => {
+            setDisplayOpportunityEditModal(true)
+            setCurrentOpportunity(rawJobList[index])
+          }}
+        >
+          Edit
+        </Button>
+      </td>
     </tr>
-    
-  ));
+  ))
 
   const loadingRows = [1, 2, 3, 4, 5, 6, 7].map((item, index) => (
     <tr key={index}>
       <td>
-        <Skeleton
-          height={8}
-          width="40%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-        />
+        <Skeleton height={8} width="40%" radius="xl" sx={{margin: '8px 0px'}} />
         {mobileScreen && (
           <Skeleton
             height={6}
             width="100%"
             radius="xl"
-            sx={{ margin: "8px 0px" }}
-            
+            sx={{margin: '8px 0px'}}
           />
         )}
       </td>
@@ -499,101 +493,91 @@
             height={16}
             width="100%"
             radius="xl"
-            sx={{ margin: "8px 0px" }}
-            
+            sx={{margin: '8px 0px'}}
           />
         </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="40%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-        
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="40%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
     </tr>
-  ));
-
-
+  ))
 
   const handleSelectAll = () => {
     if (selectAll) {
       // If all rows are selected, deselect all
-      setSelectedRows([]);
-      setSelectAll(false);
+      setSelectedRows([])
+      setSelectAll(false)
     } else {
       // Otherwise, select all rows
-      const allRowIDs = JobList.map(item => item.idposts ?? -1);
-      setSelectedRows(allRowIDs);
-      setSelectAll(true);
+      const allRowIDs = JobList.map((item) => item.idposts ?? -1)
+      setSelectedRows(allRowIDs)
+      setSelectAll(true)
     }
-  };
+  }
   const handleSelectedRowsUpdate = (updatedSelectedRows: number[]) => {
-    setSelectedRows(updatedSelectedRows);
-    
-  };
+    setSelectedRows(updatedSelectedRows)
+  }
 
   const handleUpdate = () => {
-    setRecall((prevRecall) => prevRecall + 1);
+    setRecall((prevRecall) => prevRecall + 1)
   }
 
   return (
@@ -604,16 +588,16 @@
         onUpdateSelectedRows={handleSelectedRowsUpdate}
         onUpdate={handleUpdate}
         rawData={rawJobList}
-  />
+      />
 
-<Paper
+      <Paper
         withBorder
         mt={30}
         radius="lg"
         className={cx(classes.userContainer, {
           [classes.noDataContainer]: rawJobList.length === 0,
         })}
-        sx={{ padding: "40px 20px" }}
+        sx={{padding: '40px 20px'}}
       >
         <LoadingOverlay
           visible={loading}
@@ -622,158 +606,160 @@
           radius="lg"
         />
         {rawJobList.length === 0 ? (
-        
-          <Text size="lg" weight={500} align="center" style={{ color: '#42A563',
-    fontSize: '36px',
-    textAlign: "center",
-    display: "flex",
-    justifyContent: "center",
-    alignItems: "center",
-    height: "100%",}}>
+          <Text
+            size="lg"
+            weight={500}
+            align="center"
+            style={{
+              color: '#42A563',
+              fontSize: '36px',
+              textAlign: 'center',
+              display: 'flex',
+              justifyContent: 'center',
+              alignItems: 'center',
+              height: '100%',
+            }}
+          >
             No New Jobs
           </Text>
-       
         ) : (
-        <ScrollArea w="100%" h="90%">
-          <Container className={classes.table}>
-            <Table verticalSpacing="sm">
-              <thead
-                className={cx(classes.header, {
-                  [classes.scrolled]: scrolled,
-                })}
-              >
-                <tr>
-                  
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="40%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Title"
-                    )}
-                  </th>
-                  
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="50%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Description"
-                    )}
-                  </th>
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Organization"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Link"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Job Type"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                       
-                      />
-                    ) : (
-                      "Job Category"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "City/State"
-                    )}
-                  </th>
-                  )}
-                  <th></th>
-                </tr>
-              </thead>
-              <tbody>{loading ? loadingRows : rows}</tbody>
-            </Table>
-          </Container>
-        </ScrollArea>
+          <ScrollArea w="100%" h="90%">
+            <Container className={classes.table}>
+              <Table verticalSpacing="sm">
+                <thead
+                  className={cx(classes.header, {
+                    [classes.scrolled]: scrolled,
+                  })}
+                >
+                  <tr>
+                    <th style={{textAlign: 'center'}}>
+                      {loading ? (
+                        <Skeleton
+                          height={12}
+                          width="40%"
+                          radius="xl"
+                          sx={{margin: '8px 0px'}}
+                        />
+                      ) : (
+                        'Title'
+                      )}
+                    </th>
+
+                    <th style={{textAlign: 'center'}}>
+                      {loading ? (
+                        <Skeleton
+                          height={12}
+                          width="50%"
+                          radius="xl"
+                          sx={{margin: '8px 0px'}}
+                        />
+                      ) : (
+                        'Description'
+                      )}
+                    </th>
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Organization'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Link'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Job Type'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Job Category'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'City/State'
+                        )}
+                      </th>
+                    )}
+                    <th></th>
+                  </tr>
+                </thead>
+                <tbody>{loading ? loadingRows : rows}</tbody>
+              </Table>
+            </Container>
+          </ScrollArea>
         )}
         {
-          <Container sx={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginTop: "30px" }}>
-          <PaginationNavbarScraper
-            apiEndpointExtension={"jobs"}
-            numberOfItemsPerPage={10}
-            setListOfObjects={setRawJobList}
-            searchFilterObject={searchParams}
-            setLoading={setLoading}
-            recall={recall}
-            //curPage = {CurrentPage}
-            
-          />
-          
+          <Container
+            sx={{
+              display: 'flex',
+              justifyContent: 'space-between',
+              alignItems: 'center',
+              marginTop: '30px',
+            }}
+          >
+            <PaginationNavbarScraper
+              apiEndpointExtension={'jobs'}
+              numberOfItemsPerPage={10}
+              setListOfObjects={setRawJobList}
+              searchFilterObject={searchParams}
+              setLoading={setLoading}
+              recall={recall}
+              //curPage = {CurrentPage}
+            />
           </Container>
         }
       </Paper>
       <Modal
         opened={displayOpportunityEditModal}
         onClose={() => {
-          setDisplayOpportunityEditModal(false);
+          setDisplayOpportunityEditModal(false)
         }}
         fullScreen={smallerScreen}
         size="60%"
@@ -781,14 +767,12 @@
         <FormHeader>Edit Post</FormHeader>
         <ScrapedPostForm
           edit={true}
-          opportunityType={
-            "jobs"
-          }
+          opportunityType={'jobs'}
           opportunity={currentOpportunity ? currentOpportunity : undefined}
           displayWinnerInput
           handleSubmission={handleEditButton}
         />
       </Modal>
     </Container>
-  );
+  )
 }
Index: src/pages/VerifyEmail.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import react, { useState, useEffect } from \"react\";\nimport {\n  createStyles,\n  Image,\n  Container,\n  Title,\n  Text,\n  Button,\n  SimpleGrid,\n} from \"@mantine/core\";\nimport { showNotification } from \"@mantine/notifications\";\nimport image from \"../images/EmailGirlFormatted.png\";\nimport { auth } from \"../Firebase\";\nimport {\n  onAuthStateChanged,\n  sendEmailVerification,\n  User,\n  sendSignInLinkToEmail,\n} from \"firebase/auth\";\nimport { useNavigate } from \"react-router-dom\";\nimport { motion } from \"framer-motion\";\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    paddingTop: 80,\n    paddingBottom: 80,\n  },\n\n  title: {\n    fontWeight: 900,\n    fontSize: 34,\n    marginBottom: theme.spacing.md,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n\n    [theme.fn.smallerThan(\"sm\")]: {\n      fontSize: 32,\n    },\n  },\n\n  control: {\n    [theme.fn.smallerThan(\"sm\")]: {\n      width: \"100%\",\n    },\n  },\n\n  mobileImage: {\n    [theme.fn.largerThan(\"sm\")]: {\n      display: \"none\",\n    },\n  },\n\n  desktopImage: {\n    maxWidth: 400,\n    [theme.fn.smallerThan(\"sm\")]: {\n      display: \"none\",\n    },\n  },\n}));\n\nexport function VerifyEmail() {\n  const { classes } = useStyles();\n  const navigate = useNavigate();\n  const [userEmail, setUserEmail] = useState(\"\");\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [disableButton, setDisableButton] = useState(false);\n\n  const onSubmit = async () => {\n    try {\n      setDisableButton(true);\n      const actionCodeSettings = {\n        // URL you want to redirect back to. The domain (www.example.com) for this\n        // URL must be in the authorized domains list in the Firebase Console.\n        url:\n          window.location.hostname === \"localhost\" ||\n          window.location.hostname === \"127.0.0.1\"\n            ? \"http://localhost:3000/\"\n            : \"http://compositiontoday.net/\",\n        // url: \"http://compositiontoday.net/\",\n        // This must be true.\n        // handleCodeInApp: true,\n        // iOS: {\n        //   bundleId: \"com.example.ios\",\n        // },\n        // android: {\n        //   packageName: \"com.example.android\",\n        //   installApp: true,\n        //   minimumVersion: \"12\",\n        // },\n        // dynamicLinkDomain: \"compositiontoday.net\",\n      };\n\n      console.log(\"user email\", currentUser?.email);\n      await sendEmailVerification(currentUser!, actionCodeSettings);\n      // await sendSignInLinkToEmail(\n      //   auth,\n      //   currentUser?.email!,\n      //   actionCodeSettings\n      // );\n      console.log(\"after await\");\n\n      showNotification({\n        title: \"Email Verification Sent\",\n        message: \"An email to verify your account has been sent\",\n        color: \"green\",\n      });\n\n      setTimeout(() => setDisableButton(false), 20000);\n    } catch (err) {\n      console.log(err);\n      showNotification({\n        title: \"Error\",\n        message: \"Something went wrong, please try again later\",\n        color: \"red\",\n      });\n      setDisableButton(false);\n    }\n  };\n\n  useEffect(() => {\n    onAuthStateChanged(auth, (user) => {\n      if (user) {\n        setUserEmail(`${user?.email}`);\n        setCurrentUser(user);\n\n        if (user.emailVerified) {\n          navigate(\"/\");\n        }\n      } else {\n        navigate(\"/\");\n      }\n    });\n\n    console.log(\"location host\", window.location.hostname);\n  }, []);\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Container className={classes.root}>\n        <SimpleGrid\n          spacing={80}\n          cols={2}\n          breakpoints={[{ maxWidth: \"sm\", cols: 1, spacing: 40 }]}\n        >\n          <Image src={image} className={classes.mobileImage} />\n          <div>\n            <Title className={classes.title}>Verify Email</Title>\n            <Text color=\"dimmed\" size=\"lg\">\n              To proceed to the next page, please verify your email. It may take\n              around 10 minutes before the verification email is sent in your\n              inbox. Please also make sure to check your spam box.\n            </Text>\n            <Text color=\"dimmed\" size=\"lg\">\n              Please note that after verifying your email, if you keep seeing\n              this page, you may need to manually sign out and then re-login\n              again.\n            </Text>\n            <Button\n              variant=\"outline\"\n              size=\"md\"\n              mt=\"xl\"\n              className={classes.control}\n              disabled={disableButton}\n              onClick={onSubmit}\n            >\n              {disableButton\n                ? \"Please wait 20 seconds before getting another link\"\n                : \"Send Email Verification\"}\n            </Button>\n          </div>\n          <Image src={image} className={classes.desktopImage} />\n        </SimpleGrid>\n      </Container>\n    </motion.div>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/VerifyEmail.tsx b/src/pages/VerifyEmail.tsx
--- a/src/pages/VerifyEmail.tsx	
+++ b/src/pages/VerifyEmail.tsx	
@@ -1,4 +1,4 @@
-import react, { useState, useEffect } from "react";
+import react, {useState, useEffect} from 'react'
 import {
   createStyles,
   Image,
@@ -7,18 +7,18 @@
   Text,
   Button,
   SimpleGrid,
-} from "@mantine/core";
-import { showNotification } from "@mantine/notifications";
-import image from "../images/EmailGirlFormatted.png";
-import { auth } from "../Firebase";
+} from '@mantine/core'
+import {showNotification} from '@mantine/notifications'
+import image from '../images/EmailGirlFormatted.png'
+import {auth} from '../Firebase'
 import {
   onAuthStateChanged,
   sendEmailVerification,
   User,
   sendSignInLinkToEmail,
-} from "firebase/auth";
-import { useNavigate } from "react-router-dom";
-import { motion } from "framer-motion";
+} from 'firebase/auth'
+import {useNavigate} from 'react-router-dom'
+import {motion} from 'framer-motion'
 
 const useStyles = createStyles((theme) => ({
   root: {
@@ -32,49 +32,49 @@
     marginBottom: theme.spacing.md,
     fontFamily: `Greycliff CF, ${theme.fontFamily}`,
 
-    [theme.fn.smallerThan("sm")]: {
+    [theme.fn.smallerThan('sm')]: {
       fontSize: 32,
     },
   },
 
   control: {
-    [theme.fn.smallerThan("sm")]: {
-      width: "100%",
+    [theme.fn.smallerThan('sm')]: {
+      width: '100%',
     },
   },
 
   mobileImage: {
-    [theme.fn.largerThan("sm")]: {
-      display: "none",
+    [theme.fn.largerThan('sm')]: {
+      display: 'none',
     },
   },
 
   desktopImage: {
     maxWidth: 400,
-    [theme.fn.smallerThan("sm")]: {
-      display: "none",
+    [theme.fn.smallerThan('sm')]: {
+      display: 'none',
     },
   },
-}));
+}))
 
 export function VerifyEmail() {
-  const { classes } = useStyles();
-  const navigate = useNavigate();
-  const [userEmail, setUserEmail] = useState("");
-  const [currentUser, setCurrentUser] = useState<User | null>(null);
-  const [disableButton, setDisableButton] = useState(false);
+  const {classes} = useStyles()
+  const navigate = useNavigate()
+  const [userEmail, setUserEmail] = useState('')
+  const [currentUser, setCurrentUser] = useState<User | null>(null)
+  const [disableButton, setDisableButton] = useState(false)
 
   const onSubmit = async () => {
     try {
-      setDisableButton(true);
+      setDisableButton(true)
       const actionCodeSettings = {
         // URL you want to redirect back to. The domain (www.example.com) for this
         // URL must be in the authorized domains list in the Firebase Console.
         url:
-          window.location.hostname === "localhost" ||
-          window.location.hostname === "127.0.0.1"
-            ? "http://localhost:3000/"
-            : "http://compositiontoday.net/",
+          window.location.hostname === 'localhost' ||
+          window.location.hostname === '127.0.0.1'
+            ? 'http://localhost:3000/'
+            : 'http://compositiontoday.net/',
         // url: "http://compositiontoday.net/",
         // This must be true.
         // handleCodeInApp: true,
@@ -87,63 +87,63 @@
         //   minimumVersion: "12",
         // },
         // dynamicLinkDomain: "compositiontoday.net",
-      };
+      }
 
-      console.log("user email", currentUser?.email);
-      await sendEmailVerification(currentUser!, actionCodeSettings);
+      console.log('user email', currentUser?.email)
+      await sendEmailVerification(currentUser!, actionCodeSettings)
       // await sendSignInLinkToEmail(
       //   auth,
       //   currentUser?.email!,
       //   actionCodeSettings
       // );
-      console.log("after await");
+      console.log('after await')
 
       showNotification({
-        title: "Email Verification Sent",
-        message: "An email to verify your account has been sent",
-        color: "green",
-      });
+        title: 'Email Verification Sent',
+        message: 'An email to verify your account has been sent',
+        color: 'green',
+      })
 
-      setTimeout(() => setDisableButton(false), 20000);
+      setTimeout(() => setDisableButton(false), 20000)
     } catch (err) {
-      console.log(err);
+      console.log(err)
       showNotification({
-        title: "Error",
-        message: "Something went wrong, please try again later",
-        color: "red",
-      });
-      setDisableButton(false);
+        title: 'Error',
+        message: 'Something went wrong, please try again later',
+        color: 'red',
+      })
+      setDisableButton(false)
     }
-  };
+  }
 
   useEffect(() => {
     onAuthStateChanged(auth, (user) => {
       if (user) {
-        setUserEmail(`${user?.email}`);
-        setCurrentUser(user);
+        setUserEmail(`${user?.email}`)
+        setCurrentUser(user)
 
         if (user.emailVerified) {
-          navigate("/");
+          navigate('/')
         }
       } else {
-        navigate("/");
+        navigate('/')
       }
-    });
+    })
 
-    console.log("location host", window.location.hostname);
-  }, []);
+    console.log('location host', window.location.hostname)
+  }, [])
 
   return (
     <motion.div
-      initial={{ opacity: 0 }}
-      animate={{ opacity: 1 }}
-      transition={{ duration: 0.3 }}
+      initial={{opacity: 0}}
+      animate={{opacity: 1}}
+      transition={{duration: 0.3}}
     >
       <Container className={classes.root}>
         <SimpleGrid
           spacing={80}
           cols={2}
-          breakpoints={[{ maxWidth: "sm", cols: 1, spacing: 40 }]}
+          breakpoints={[{maxWidth: 'sm', cols: 1, spacing: 40}]}
         >
           <Image src={image} className={classes.mobileImage} />
           <div>
@@ -167,13 +167,13 @@
               onClick={onSubmit}
             >
               {disableButton
-                ? "Please wait 20 seconds before getting another link"
-                : "Send Email Verification"}
+                ? 'Please wait 20 seconds before getting another link'
+                : 'Send Email Verification'}
             </Button>
           </div>
           <Image src={image} className={classes.desktopImage} />
         </SimpleGrid>
       </Container>
     </motion.div>
-  );
+  )
 }
Index: src/components/adminView/ScrapedConcerts.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {\n  Paper,\n  Menu,\n  Badge,\n  Table,\n  Text,\n  ActionIcon,\n  ScrollArea,\n  useMantineTheme,\n  Container,\n  createStyles,\n  LoadingOverlay,\n  Skeleton,\n  Checkbox,\n  Button,\n  Modal,\n} from \"@mantine/core\";\nimport { OpportunityItem } from \"../opportunity/OpportunityHelper\";\nimport { ScrapedPost } from \"./ScrapedPostHelper\";\nimport { FormHeader } from \"../opportunity/CreateOpportunityHelper\";\nimport {\n  IconBan,\n  IconTrash,\n  IconArrowBigUpLine,\n  IconCheck,\n  IconArrowBigDownLine,\n  IconDots,\n} from \"@tabler/icons\";\nimport { auth } from \"../../Firebase\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { showNotification } from \"@mantine/notifications\";\nimport { openAdminModal } from \"./modals/AdminModal\";\nimport { openDeleteModal } from \"./modals/DeleteModal\";\nimport { openBanModal } from \"./modals/BanModal\";\nimport {\n  PaginationNavbar,\n  PaginationSearchObject,\n} from \"../pagination/PaginationNavbar\";\nimport { useMediaQuery } from \"@mantine/hooks\";\nimport { PaginationNavbarScraper } from \"../pagination/PaginationNavbarScraper\";\nimport { SearchAndFilterScraped } from \"./SearchAndFilterScraped\";\nimport { OpportunityForm } from \"../opportunity/OpportunityForm\";\nimport { ScrapedPostForm } from \"./ScrapedPostForm\";\n\ninterface ConcertTableData {\n  UID?: string;\n  idposts?: number;\n  title?: string;\n  description?: string;\n  link?: string;\n  organization?: string;\n  date?: string;\n  start_time?: string;\n  cityState?: string;\n  address?: string;\n  genre?: string;\n}\n\nconst typeColors: Record<string, string> = {\n  regular: \"blue\",\n  admin: \"green\",\n  banned: \"red\",\n};\n\nconst useStyles = createStyles((theme) => ({\n  container: {\n    width: \"90vw\",\n    padding: \"0px\",\n\n    [theme.fn.smallerThan(\"md\")]: {\n      width: \"100%\",\n    },\n  },\n\n  userContainer: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    position: \"relative\",\n    zIndex: 1,\n    borderColor: \"#939393\",\n\n    [theme.fn.smallerThan(\"md\")]: {\n      padding: \"15px\",\n      borderRadius: \"0px\",\n    },\n\n    [theme.fn.largerThan(\"sm\")]: {\n      height: \"90vh\",\n    },\n  },\n  noDataContainer: {\n    display: \"flex\",\n    justifyContent: \"center\", // Center horizontally\n  alignItems: \"center\",\n    position: \"relative\",\n    zIndex: 1,\n    borderColor: \"#939393\",\n\n    \n\n    [theme.fn.largerThan(\"sm\")]: {\n      height: \"5vh\",\n    },\n  },\n\n  table: {\n    maxWidth: \"100%\",\n    flexBasis: \"100%\",\n\n    [theme.fn.smallerThan(\"md\")]: {\n      maxHeight: \"90vh\",\n      padding: \"0px\",\n    },\n  },\n\n  bold: {\n    fontWeight: 700,\n  },\n\n  header: {\n    position: \"sticky\",\n    top: 0,\n    backgroundColor:\n      theme.colorScheme === \"dark\" ? theme.colors.dark[7] : theme.white,\n    transition: \"box-shadow 150ms ease\",\n\n    \"&::after\": {\n      content: '\"\"',\n      position: \"absolute\",\n      zIndex: 1,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      borderBottom: `1px solid ${\n        theme.colorScheme === \"dark\"\n          ? theme.colors.dark[3]\n          : theme.colors.gray[2]\n      }`,\n    },\n  },\n\n  scrolled: {\n    // boxShadow: theme.shadows.sm,\n  },\n}));\n\nexport function ScrapedConcerts() {\n  const theme = useMantineTheme();\n  const { classes, cx } = useStyles();\n  const [rawConcertList, setRawConcertList] = useState<ScrapedPost[]>([]);\n  const [selectedRows, setSelectedRows] = useState<number[]>([]);\n  const [currentOpportunity, setCurrentOpportunity] =\n    useState<ScrapedPost | null>(null);\n  const [selectAll, setSelectAll] = useState(false);\n  const [displayOpportunityEditModal, setDisplayOpportunityEditModal] =\n    useState(false);\n  const [displayOpportunityInfoModal, setDisplayOpportunityInfoModal] =\n    useState(false);\n  const [ConcertList, setConcertList] = useState<ConcertTableData[]>([]); // Corrected variable name\n  const [searchParams, setSearchParams] = useState<PaginationSearchObject>({\n    keyword: \"\",\n  });\n  const [CurrentPage, setCurrentPage] = useState(1); // Add CurrentPage state\n  const [scrolled, setScrolled] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [recall, setRecall] = useState(0);\n  const smallerScreen = useMediaQuery(\"(max-width: 992px)\");\n\n  const handleCurrentPageChange = (count: number) => {\n    setCurrentPage(count);\n  };\n\n\n  useEffect(() => {\n    onAuthStateChanged(auth, async (user) => {\n      if (user && user.email) {\n        setSearchParams({ ...searchParams,});\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    convertRawConcertDataToTableData();\n  }, [rawConcertList, searchParams]);\n\n  useEffect(() => {\n    console.log(\"loading changed to:\", loading);\n  }, [loading]);\n\n  const convertRawConcertDataToTableData = () => {\n    let newConcertList: ConcertTableData[] = [];\n    rawConcertList?.forEach((ConcertItem) => {\n      const date = ConcertItem.end_date ? new Date(ConcertItem.end_date) : null;\n      const startTime = ConcertItem.start_time ? new Date(ConcertItem.start_time) : null;\n  \n      let formattedConcertData: ConcertTableData = {\n        UID: ConcertItem.UID,\n        idposts: ConcertItem.idposts,\n        title: ConcertItem.title,\n        description: ConcertItem.description,\n        link: ConcertItem.link,\n        organization: ConcertItem.organization,\n        date: date ? `${date.toLocaleString('en-us', { month: 'long' })} ${date.getDate()}, ${date.getFullYear()}` : \"\",\n        start_time: startTime ? `${startTime.toLocaleString('en-us', { hour: 'numeric', minute: 'numeric', hour12: true })}` : \"\",\n        cityState: ConcertItem.city + \", \" + ConcertItem.state,\n        address: ConcertItem.address,\n        genre: ConcertItem.genre,\n      };\n      newConcertList.push(formattedConcertData);\n    });\n    setConcertList(newConcertList);\n  };\n\n  const mobileScreen = useMediaQuery(\"(max-width: 768px)\");\n  const dragState = useRef({\n    isDragging: false,\n    startRowIndex: -1,\n    endRowIndex: -1,\n  });\n  \n  const handleMouseDown = (index: number) => {\n    dragState.current.isDragging = true;\n    dragState.current.startRowIndex = index;\n    dragState.current.endRowIndex = index;\n  };\n  \n  const handleMouseEnter = (index: number) => {\n    if (dragState.current.isDragging) {\n      dragState.current.endRowIndex = index;\n      const start = Math.min(\n        dragState.current.startRowIndex,\n        dragState.current.endRowIndex\n      );\n      const end = Math.max(\n        dragState.current.startRowIndex,\n        dragState.current.endRowIndex\n      );\n      const selectedIDPosts = [...selectedRows];\n      const id = rawConcertList[dragState.current.startRowIndex]?.idposts ?? -1;\n    if (selectedIDPosts.includes(id)) {\n      // If the startRowIndex is in the selectedRows list,\n      // add new IDPosts to the selectedRows\n      for (let i = start; i <= end; i++) {\n        if (!selectedIDPosts.includes(rawConcertList[i]?.idposts ?? -1)) {\n          selectedIDPosts.push(rawConcertList[i]?.idposts ?? -1);\n        }\n      }\n    } else {\n      // Otherwise, remove dragged elements if they are in the list\n      for (let i = start; i <= end; i++) {\n        const indexToRemove = selectedIDPosts.indexOf(rawConcertList[i]?.idposts ?? -1);\n        if (indexToRemove !== -1) {\n          selectedIDPosts.splice(indexToRemove, 1);\n        }\n      }\n    }\n    setSelectedRows(selectedIDPosts);\n    }\n  };\n  \n  const handleMouseUp = () => {\n    dragState.current.isDragging = false;\n  };\n\n  const handleRowSelect = (idposts: number) => {\n    setSelectedRows(prevSelectedRows => {\n      if (prevSelectedRows.includes(idposts)) {\n        // If UID is already selected, remove it from the selectedRows\n        return prevSelectedRows.filter(row => row !== idposts);\n      } else {\n        // Otherwise, add it to the selectedRows\n        return [...prevSelectedRows, idposts];\n      }\n    });\n  };\n  const editFunction = async (opportunity: ScrapedPost) => {\n    try {\n      let idpost = currentOpportunity?.idposts;\n      // Delete the idposts in the opportunity such that the backend doesn't actually update the idpost column in mySQL.\n      // This shouldn't be necessary to do at all but have it here just in-case the idposts here is some how different from the idposts in the url parameters and/or in mySQL\n      \n      delete opportunity.idposts;\n      delete opportunity.first_name;\n      delete opportunity.last_name;\n      delete opportunity.email;\n      delete opportunity.is_banned;\n      delete opportunity.is_admin;\n      delete opportunity.ban_message;\n\n      for (let key in opportunity) {\n        if (\n          !opportunity[key as keyof typeof opportunity] &&\n          key !== \"winner\" &&\n          key !== \"city\" &&\n          key !== \"state\" &&\n          key !== \"address\"\n        ) {\n          delete opportunity[key as keyof typeof opportunity];\n        }\n      }\n\n      console.log(\"formatted edit body:\", opportunity);\n\n      let requestOptions = {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(opportunity),\n      };\n\n      let response = await fetch(\n        `https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday/Concerts/${idpost}`,\n        requestOptions\n      );\n\n      let responseJson = await response.json();\n\n      let editedOpportunity = responseJson.listOfObjects[0];\n\n      return editedOpportunity;\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const handleEditButton = async (opportunity: ScrapedPost) => {\n    try {\n      //delete opportunity.UID;\n      //delete opportunity.date_posted;\n      \n\n      // Format any keys of type number to be as type strings since the APIs only accept strings for the request body\n      opportunity.end_date = opportunity.end_date?.toString();\n      opportunity.start_date = opportunity.start_date?.toString();\n      opportunity.start_time = opportunity.start_time?.toString();\n      opportunity.salary = opportunity.salary?.toString();\n      opportunity.fee = opportunity.fee?.toString();\n\n      let editedOpportunity = await editFunction(opportunity);\n\n      for (let i = 0; i < rawConcertList.length; i++) {\n        if (rawConcertList[i].idposts === editedOpportunity.idposts) {\n          let tempArray = rawConcertList;\n          tempArray[i] = editedOpportunity;\n          setRawConcertList([...tempArray]);\n          break;\n        }\n      }\n\n      showNotification({\n        title: \"Edits Applied\",\n        message: \"Your changes have been applied\",\n        color: \"green\",\n      });\n      setDisplayOpportunityEditModal(false);\n    } catch (err) {\n      console.log(err);\n      showNotification({\n        title: \"Error\",\n        message: \"There was a problem, please try again later\",\n        color: \"red\",\n      });\n    }\n  };\n  \n\n  const rows = ConcertList?.map((item, index) => (\n    <tr \n      onMouseDown={() => handleMouseDown(index)}\n      onMouseEnter={() => handleMouseEnter(index)}\n      onMouseUp={handleMouseUp}\n      \n        onClick={() => handleRowSelect(item.idposts ?? -1)}\n        style={{\n          backgroundColor: selectedRows.includes(item.idposts ?? -1) ? \"#e6f7ff\" : \"inherit\",\n          cursor: \"pointer\",\n          \n        }}\n    >\n      \n      <td>\n        <Text size=\"sm\" weight={500}>\n          {item.title}\n        </Text>\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.description}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.link}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.organization}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.date}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.start_time}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.cityState}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.address}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.genre}\n          </Text>\n        )}\n      </td>\n      {!mobileScreen && (\n        <td>\n          <Container style={{ width: 400 }}>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.description}\n          </Text>\n          </Container>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\" >\n            {item.organization}\n          </Text>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Container style={{ width: 100 }}>\n          <a href={item.link} target='_blank'  color=\"dimmed\" style={{ overflowWrap: 'break-word' }}>\n          {item.link}\n          </a>\n          </Container>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.date}\n          </Text>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.start_time}\n          </Text>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.cityState}\n          </Text>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.address}\n          </Text>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.genre}\n          </Text>\n        </td>\n      )}\n      <td>\n      <Button \n        variant=\"outline\" \n        size=\"sm\" \n        onClick={() => {\n          setDisplayOpportunityEditModal(true);\n          setCurrentOpportunity(rawConcertList[index]);\n        }}\n      >\n        Edit\n      </Button>\n    </td>      \n    </tr>\n    \n  ));\n\n  const loadingRows = [1, 2, 3, 4, 5, 6, 7, 8].map((item, index) => (\n    <tr key={index}>\n      <td>\n        <Skeleton\n          height={8}\n          width=\"40%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n        />\n        {mobileScreen && (\n          <Skeleton\n            height={6}\n            width=\"100%\"\n            radius=\"xl\"\n            sx={{ margin: \"8px 0px\" }}\n            \n          />\n        )}\n      </td>\n      {!mobileScreen && (\n        <td>\n          <Skeleton\n            height={16}\n            width=\"100%\"\n            radius=\"xl\"\n            sx={{ margin: \"8px 0px\" }}\n            \n          />\n        </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"40%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n        \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n    </tr>\n  ));\n\n\n\n  const handleSelectAll = () => {\n    if (selectAll) {\n      // If all rows are selected, deselect all\n      setSelectedRows([]);\n      setSelectAll(false);\n    } else {\n      // Otherwise, select all rows\n      const allRowIDs = ConcertList.map(item => item.idposts ?? -1);\n      setSelectedRows(allRowIDs);\n      setSelectAll(true);\n    }\n  };\n  const handleSelectedRowsUpdate = (updatedSelectedRows: number[]) => {\n    setSelectedRows(updatedSelectedRows);\n    \n  };\n  \n  const handleUpdate = () => {\n    setRecall((prevRecall) => prevRecall + 1);\n  }\n\n  return (\n    <Container fluid className={classes.container}>\n      <SearchAndFilterScraped\n        setSearchObjs={setSearchParams}\n        selectedRows={selectedRows}\n        onUpdateSelectedRows={handleSelectedRowsUpdate}\n        onUpdate={handleUpdate}\n        rawData={rawConcertList}\n  />\n\n<Paper\n        withBorder\n        mt={30}\n        radius=\"lg\"\n        className={cx(classes.userContainer, {\n          [classes.noDataContainer]: rawConcertList.length === 0,\n        })}\n        sx={{ padding: \"40px 20px\" }}\n      >\n        <LoadingOverlay\n          visible={loading}\n          overlayOpacity={0.2}\n          overlayBlur={0.2}\n          radius=\"lg\"\n        />\n        {rawConcertList.length === 0 ? (\n        \n          <Text size=\"lg\" weight={500} align=\"center\" style={{ color: '#42A563',\n    fontSize: '36px',\n    textAlign: \"center\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"100%\",}}>\n            No New Concerts\n          </Text>\n       \n        ) : (\n        <ScrollArea w=\"100%\" h=\"90%\">\n          <Container className={classes.table}>\n            <Table verticalSpacing=\"sm\">\n              <thead\n                className={cx(classes.header, {\n                  [classes.scrolled]: scrolled,\n                })}\n              >\n                <tr>\n                  \n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"40%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Title\"\n                    )}\n                  </th>\n                  {!mobileScreen && (\n                    <th style={{textAlign: \"center\"}}>\n                      {loading ? (\n                        <Skeleton\n                          height={12}\n                          width=\"50%\"\n                          radius=\"xl\"\n                          sx={{ margin: \"8px 0px\" }}\n                          \n                        />\n                      ) : (\n                        \"Description\"\n                      )}\n                    </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Organization\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Link\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Date\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                       \n                      />\n                    ) : (\n                      \"Start Time\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (              \n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"City/State\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Address\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Genre\"\n                    )}\n                  </th>\n                  )}\n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>{loading ? loadingRows : rows}</tbody>\n            </Table>\n          </Container>\n        </ScrollArea>\n        )}\n        {\n          <Container sx={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", marginTop: \"30px\" }}>\n          <PaginationNavbarScraper\n            apiEndpointExtension={\"concerts\"}\n            numberOfItemsPerPage={10}\n            setListOfObjects={setRawConcertList}\n            searchFilterObject={searchParams}\n            setLoading={setLoading}\n            recall={recall}\n            //curPage = {CurrentPage}\n          />\n          \n          </Container>\n        }\n      </Paper>\n      <Modal\n        opened={displayOpportunityEditModal}\n        onClose={() => {\n          setDisplayOpportunityEditModal(false);\n        }}\n        fullScreen={smallerScreen}\n        size=\"60%\"\n      >\n        <FormHeader>Edit Post</FormHeader>\n        <ScrapedPostForm\n          edit={true}\n          opportunityType={\n            \"concerts\"\n          }\n          opportunity={currentOpportunity ? currentOpportunity : undefined}\n          displayWinnerInput\n          handleSubmission={handleEditButton}\n        />\n      </Modal>\n    </Container>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/adminView/ScrapedConcerts.tsx b/src/components/adminView/ScrapedConcerts.tsx
--- a/src/components/adminView/ScrapedConcerts.tsx	
+++ b/src/components/adminView/ScrapedConcerts.tsx	
@@ -14,10 +14,10 @@
   Checkbox,
   Button,
   Modal,
-} from "@mantine/core";
-import { OpportunityItem } from "../opportunity/OpportunityHelper";
-import { ScrapedPost } from "./ScrapedPostHelper";
-import { FormHeader } from "../opportunity/CreateOpportunityHelper";
+} from '@mantine/core'
+import {OpportunityItem} from '../opportunity/OpportunityHelper'
+import {ScrapedPost} from './ScrapedPostHelper'
+import {FormHeader} from '../opportunity/CreateOpportunityHelper'
 import {
   IconBan,
   IconTrash,
@@ -25,92 +25,90 @@
   IconCheck,
   IconArrowBigDownLine,
   IconDots,
-} from "@tabler/icons";
-import { auth } from "../../Firebase";
-import { onAuthStateChanged } from "firebase/auth";
-import { useEffect, useState, useRef } from "react";
-import { showNotification } from "@mantine/notifications";
-import { openAdminModal } from "./modals/AdminModal";
-import { openDeleteModal } from "./modals/DeleteModal";
-import { openBanModal } from "./modals/BanModal";
+} from '@tabler/icons'
+import {auth} from '../../Firebase'
+import {onAuthStateChanged} from 'firebase/auth'
+import {useEffect, useState, useRef} from 'react'
+import {showNotification} from '@mantine/notifications'
+import {openAdminModal} from './modals/AdminModal'
+import {openDeleteModal} from './modals/DeleteModal'
+import {openBanModal} from './modals/BanModal'
 import {
   PaginationNavbar,
   PaginationSearchObject,
-} from "../pagination/PaginationNavbar";
-import { useMediaQuery } from "@mantine/hooks";
-import { PaginationNavbarScraper } from "../pagination/PaginationNavbarScraper";
-import { SearchAndFilterScraped } from "./SearchAndFilterScraped";
-import { OpportunityForm } from "../opportunity/OpportunityForm";
-import { ScrapedPostForm } from "./ScrapedPostForm";
+} from '../pagination/PaginationNavbar'
+import {useMediaQuery} from '@mantine/hooks'
+import {PaginationNavbarScraper} from '../pagination/PaginationNavbarScraper'
+import {SearchAndFilterScraped} from './SearchAndFilterScraped'
+import {OpportunityForm} from '../opportunity/OpportunityForm'
+import {ScrapedPostForm} from './ScrapedPostForm'
 
 interface ConcertTableData {
-  UID?: string;
-  idposts?: number;
-  title?: string;
-  description?: string;
-  link?: string;
-  organization?: string;
-  date?: string;
-  start_time?: string;
-  cityState?: string;
-  address?: string;
-  genre?: string;
+  UID?: string
+  idposts?: number
+  title?: string
+  description?: string
+  link?: string
+  organization?: string
+  date?: string
+  start_time?: string
+  cityState?: string
+  address?: string
+  genre?: string
 }
 
 const typeColors: Record<string, string> = {
-  regular: "blue",
-  admin: "green",
-  banned: "red",
-};
+  regular: 'blue',
+  admin: 'green',
+  banned: 'red',
+}
 
 const useStyles = createStyles((theme) => ({
   container: {
-    width: "90vw",
-    padding: "0px",
+    width: '90vw',
+    padding: '0px',
 
-    [theme.fn.smallerThan("md")]: {
-      width: "100%",
+    [theme.fn.smallerThan('md')]: {
+      width: '100%',
     },
   },
 
   userContainer: {
-    display: "flex",
-    flexWrap: "wrap",
-    position: "relative",
+    display: 'flex',
+    flexWrap: 'wrap',
+    position: 'relative',
     zIndex: 1,
-    borderColor: "#939393",
+    borderColor: '#939393',
 
-    [theme.fn.smallerThan("md")]: {
-      padding: "15px",
-      borderRadius: "0px",
+    [theme.fn.smallerThan('md')]: {
+      padding: '15px',
+      borderRadius: '0px',
     },
 
-    [theme.fn.largerThan("sm")]: {
-      height: "90vh",
+    [theme.fn.largerThan('sm')]: {
+      height: '90vh',
     },
   },
   noDataContainer: {
-    display: "flex",
-    justifyContent: "center", // Center horizontally
-  alignItems: "center",
-    position: "relative",
+    display: 'flex',
+    justifyContent: 'center', // Center horizontally
+    alignItems: 'center',
+    position: 'relative',
     zIndex: 1,
-    borderColor: "#939393",
+    borderColor: '#939393',
 
-    
-
-    [theme.fn.largerThan("sm")]: {
-      height: "5vh",
+    [theme.fn.largerThan('sm')]: {
+      height: '5vh',
     },
   },
 
   table: {
-    maxWidth: "100%",
-    flexBasis: "100%",
+    maxWidth: '100%',
+    flexBasis: '100%',
 
-    [theme.fn.smallerThan("md")]: {
-      maxHeight: "90vh",
-      padding: "0px",
+    [theme.fn.smallerThan('md')]: {
+      maxHeight: '90vh',
+      padding: '0px',
     },
   },
 
@@ -119,21 +117,21 @@
   },
 
   header: {
-    position: "sticky",
+    position: 'sticky',
     top: 0,
     backgroundColor:
-      theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white,
-    transition: "box-shadow 150ms ease",
+      theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,
+    transition: 'box-shadow 150ms ease',
 
-    "&::after": {
+    '&::after': {
       content: '""',
-      position: "absolute",
+      position: 'absolute',
       zIndex: 1,
       left: 0,
       right: 0,
       bottom: 0,
       borderBottom: `1px solid ${
-        theme.colorScheme === "dark"
+        theme.colorScheme === 'dark'
           ? theme.colors.dark[3]
           : theme.colors.gray[2]
       }`,
@@ -143,57 +141,58 @@
   scrolled: {
     // boxShadow: theme.shadows.sm,
   },
-}));
+}))
 
 export function ScrapedConcerts() {
-  const theme = useMantineTheme();
-  const { classes, cx } = useStyles();
-  const [rawConcertList, setRawConcertList] = useState<ScrapedPost[]>([]);
-  const [selectedRows, setSelectedRows] = useState<number[]>([]);
+  const theme = useMantineTheme()
+  const {classes, cx} = useStyles()
+  const [rawConcertList, setRawConcertList] = useState<ScrapedPost[]>([])
+  const [selectedRows, setSelectedRows] = useState<number[]>([])
   const [currentOpportunity, setCurrentOpportunity] =
-    useState<ScrapedPost | null>(null);
-  const [selectAll, setSelectAll] = useState(false);
+    useState<ScrapedPost | null>(null)
+  const [selectAll, setSelectAll] = useState(false)
   const [displayOpportunityEditModal, setDisplayOpportunityEditModal] =
-    useState(false);
+    useState(false)
   const [displayOpportunityInfoModal, setDisplayOpportunityInfoModal] =
-    useState(false);
-  const [ConcertList, setConcertList] = useState<ConcertTableData[]>([]); // Corrected variable name
+    useState(false)
+  const [ConcertList, setConcertList] = useState<ConcertTableData[]>([]) // Corrected variable name
   const [searchParams, setSearchParams] = useState<PaginationSearchObject>({
-    keyword: "",
-  });
-  const [CurrentPage, setCurrentPage] = useState(1); // Add CurrentPage state
-  const [scrolled, setScrolled] = useState(false);
-  const [loading, setLoading] = useState(true);
-  const [recall, setRecall] = useState(0);
-  const smallerScreen = useMediaQuery("(max-width: 992px)");
+    keyword: '',
+  })
+  const [CurrentPage, setCurrentPage] = useState(1) // Add CurrentPage state
+  const [scrolled, setScrolled] = useState(false)
+  const [loading, setLoading] = useState(true)
+  const [recall, setRecall] = useState(0)
+  const smallerScreen = useMediaQuery('(max-width: 992px)')
 
   const handleCurrentPageChange = (count: number) => {
-    setCurrentPage(count);
-  };
-
+    setCurrentPage(count)
+  }
 
   useEffect(() => {
     onAuthStateChanged(auth, async (user) => {
       if (user && user.email) {
-        setSearchParams({ ...searchParams,});
+        setSearchParams({...searchParams})
       }
-    });
-  }, []);
+    })
+  }, [])
 
   useEffect(() => {
-    convertRawConcertDataToTableData();
-  }, [rawConcertList, searchParams]);
+    convertRawConcertDataToTableData()
+  }, [rawConcertList, searchParams])
 
   useEffect(() => {
-    console.log("loading changed to:", loading);
-  }, [loading]);
+    console.log('loading changed to:', loading)
+  }, [loading])
 
   const convertRawConcertDataToTableData = () => {
-    let newConcertList: ConcertTableData[] = [];
+    let newConcertList: ConcertTableData[] = []
     rawConcertList?.forEach((ConcertItem) => {
-      const date = ConcertItem.end_date ? new Date(ConcertItem.end_date) : null;
-      const startTime = ConcertItem.start_time ? new Date(ConcertItem.start_time) : null;
-  
+      const date = ConcertItem.end_date ? new Date(ConcertItem.end_date) : null
+      const startTime = ConcertItem.start_time
+        ? new Date(ConcertItem.start_time)
+        : null
+
       let formattedConcertData: ConcertTableData = {
         UID: ConcertItem.UID,
         idposts: ConcertItem.idposts,
@@ -201,183 +200,192 @@
         description: ConcertItem.description,
         link: ConcertItem.link,
         organization: ConcertItem.organization,
-        date: date ? `${date.toLocaleString('en-us', { month: 'long' })} ${date.getDate()}, ${date.getFullYear()}` : "",
-        start_time: startTime ? `${startTime.toLocaleString('en-us', { hour: 'numeric', minute: 'numeric', hour12: true })}` : "",
-        cityState: ConcertItem.city + ", " + ConcertItem.state,
+        date: date
+          ? `${date.toLocaleString('en-us', {
+              month: 'long',
+            })} ${date.getDate()}, ${date.getFullYear()}`
+          : '',
+        start_time: startTime
+          ? `${startTime.toLocaleString('en-us', {
+              hour: 'numeric',
+              minute: 'numeric',
+              hour12: true,
+            })}`
+          : '',
+        cityState: ConcertItem.city + ', ' + ConcertItem.state,
         address: ConcertItem.address,
         genre: ConcertItem.genre,
-      };
-      newConcertList.push(formattedConcertData);
-    });
-    setConcertList(newConcertList);
-  };
+      }
+      newConcertList.push(formattedConcertData)
+    })
+    setConcertList(newConcertList)
+  }
 
-  const mobileScreen = useMediaQuery("(max-width: 768px)");
+  const mobileScreen = useMediaQuery('(max-width: 768px)')
   const dragState = useRef({
     isDragging: false,
     startRowIndex: -1,
     endRowIndex: -1,
-  });
-  
+  })
+
   const handleMouseDown = (index: number) => {
-    dragState.current.isDragging = true;
-    dragState.current.startRowIndex = index;
-    dragState.current.endRowIndex = index;
-  };
-  
+    dragState.current.isDragging = true
+    dragState.current.startRowIndex = index
+    dragState.current.endRowIndex = index
+  }
+
   const handleMouseEnter = (index: number) => {
     if (dragState.current.isDragging) {
-      dragState.current.endRowIndex = index;
+      dragState.current.endRowIndex = index
       const start = Math.min(
         dragState.current.startRowIndex,
-        dragState.current.endRowIndex
-      );
+        dragState.current.endRowIndex,
+      )
       const end = Math.max(
         dragState.current.startRowIndex,
-        dragState.current.endRowIndex
-      );
-      const selectedIDPosts = [...selectedRows];
-      const id = rawConcertList[dragState.current.startRowIndex]?.idposts ?? -1;
-    if (selectedIDPosts.includes(id)) {
-      // If the startRowIndex is in the selectedRows list,
-      // add new IDPosts to the selectedRows
-      for (let i = start; i <= end; i++) {
-        if (!selectedIDPosts.includes(rawConcertList[i]?.idposts ?? -1)) {
-          selectedIDPosts.push(rawConcertList[i]?.idposts ?? -1);
-        }
-      }
-    } else {
-      // Otherwise, remove dragged elements if they are in the list
-      for (let i = start; i <= end; i++) {
-        const indexToRemove = selectedIDPosts.indexOf(rawConcertList[i]?.idposts ?? -1);
-        if (indexToRemove !== -1) {
-          selectedIDPosts.splice(indexToRemove, 1);
+        dragState.current.endRowIndex,
+      )
+      const selectedIDPosts = [...selectedRows]
+      const id = rawConcertList[dragState.current.startRowIndex]?.idposts ?? -1
+      if (selectedIDPosts.includes(id)) {
+        // If the startRowIndex is in the selectedRows list,
+        // add new IDPosts to the selectedRows
+        for (let i = start; i <= end; i++) {
+          if (!selectedIDPosts.includes(rawConcertList[i]?.idposts ?? -1)) {
+            selectedIDPosts.push(rawConcertList[i]?.idposts ?? -1)
+          }
+        }
+      } else {
+        // Otherwise, remove dragged elements if they are in the list
+        for (let i = start; i <= end; i++) {
+          const indexToRemove = selectedIDPosts.indexOf(
+            rawConcertList[i]?.idposts ?? -1,
+          )
+          if (indexToRemove !== -1) {
+            selectedIDPosts.splice(indexToRemove, 1)
+          }
         }
       }
+      setSelectedRows(selectedIDPosts)
     }
-    setSelectedRows(selectedIDPosts);
-    }
-  };
-  
+  }
+
   const handleMouseUp = () => {
-    dragState.current.isDragging = false;
-  };
+    dragState.current.isDragging = false
+  }
 
   const handleRowSelect = (idposts: number) => {
-    setSelectedRows(prevSelectedRows => {
+    setSelectedRows((prevSelectedRows) => {
       if (prevSelectedRows.includes(idposts)) {
         // If UID is already selected, remove it from the selectedRows
-        return prevSelectedRows.filter(row => row !== idposts);
+        return prevSelectedRows.filter((row) => row !== idposts)
       } else {
         // Otherwise, add it to the selectedRows
-        return [...prevSelectedRows, idposts];
+        return [...prevSelectedRows, idposts]
       }
-    });
-  };
+    })
+  }
   const editFunction = async (opportunity: ScrapedPost) => {
     try {
-      let idpost = currentOpportunity?.idposts;
+      let idpost = currentOpportunity?.idposts
       // Delete the idposts in the opportunity such that the backend doesn't actually update the idpost column in mySQL.
       // This shouldn't be necessary to do at all but have it here just in-case the idposts here is some how different from the idposts in the url parameters and/or in mySQL
-      
-      delete opportunity.idposts;
-      delete opportunity.first_name;
-      delete opportunity.last_name;
-      delete opportunity.email;
-      delete opportunity.is_banned;
-      delete opportunity.is_admin;
-      delete opportunity.ban_message;
+
+      delete opportunity.idposts
+      delete opportunity.first_name
+      delete opportunity.last_name
+      delete opportunity.email
+      delete opportunity.is_banned
+      delete opportunity.is_admin
+      delete opportunity.ban_message
 
       for (let key in opportunity) {
         if (
           !opportunity[key as keyof typeof opportunity] &&
-          key !== "winner" &&
-          key !== "city" &&
-          key !== "state" &&
-          key !== "address"
+          key !== 'winner' &&
+          key !== 'city' &&
+          key !== 'state' &&
+          key !== 'address'
         ) {
-          delete opportunity[key as keyof typeof opportunity];
+          delete opportunity[key as keyof typeof opportunity]
         }
       }
 
-      console.log("formatted edit body:", opportunity);
+      console.log('formatted edit body:', opportunity)
 
       let requestOptions = {
-        method: "PUT",
-        headers: { "Content-Type": "application/json" },
+        method: 'PUT',
+        headers: {'Content-Type': 'application/json'},
         body: JSON.stringify(opportunity),
-      };
+      }
 
       let response = await fetch(
         `https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday/Concerts/${idpost}`,
-        requestOptions
-      );
+        requestOptions,
+      )
 
-      let responseJson = await response.json();
+      let responseJson = await response.json()
 
-      let editedOpportunity = responseJson.listOfObjects[0];
+      let editedOpportunity = responseJson.listOfObjects[0]
 
-      return editedOpportunity;
+      return editedOpportunity
     } catch (err) {
-      console.log(err);
+      console.log(err)
     }
-  };
+  }
 
   const handleEditButton = async (opportunity: ScrapedPost) => {
     try {
       //delete opportunity.UID;
       //delete opportunity.date_posted;
-      
 
       // Format any keys of type number to be as type strings since the APIs only accept strings for the request body
-      opportunity.end_date = opportunity.end_date?.toString();
-      opportunity.start_date = opportunity.start_date?.toString();
-      opportunity.start_time = opportunity.start_time?.toString();
-      opportunity.salary = opportunity.salary?.toString();
-      opportunity.fee = opportunity.fee?.toString();
+      opportunity.end_date = opportunity.end_date?.toString()
+      opportunity.start_date = opportunity.start_date?.toString()
+      opportunity.start_time = opportunity.start_time?.toString()
+      opportunity.salary = opportunity.salary?.toString()
+      opportunity.fee = opportunity.fee?.toString()
 
-      let editedOpportunity = await editFunction(opportunity);
+      let editedOpportunity = await editFunction(opportunity)
 
       for (let i = 0; i < rawConcertList.length; i++) {
         if (rawConcertList[i].idposts === editedOpportunity.idposts) {
-          let tempArray = rawConcertList;
-          tempArray[i] = editedOpportunity;
-          setRawConcertList([...tempArray]);
-          break;
+          let tempArray = rawConcertList
+          tempArray[i] = editedOpportunity
+          setRawConcertList([...tempArray])
+          break
         }
       }
 
       showNotification({
-        title: "Edits Applied",
-        message: "Your changes have been applied",
-        color: "green",
-      });
-      setDisplayOpportunityEditModal(false);
+        title: 'Edits Applied',
+        message: 'Your changes have been applied',
+        color: 'green',
+      })
+      setDisplayOpportunityEditModal(false)
     } catch (err) {
-      console.log(err);
+      console.log(err)
       showNotification({
-        title: "Error",
-        message: "There was a problem, please try again later",
-        color: "red",
-      });
+        title: 'Error',
+        message: 'There was a problem, please try again later',
+        color: 'red',
+      })
     }
-  };
-  
+  }
 
   const rows = ConcertList?.map((item, index) => (
-    <tr 
+    <tr
       onMouseDown={() => handleMouseDown(index)}
       onMouseEnter={() => handleMouseEnter(index)}
       onMouseUp={handleMouseUp}
-      
-        onClick={() => handleRowSelect(item.idposts ?? -1)}
-        style={{
-          backgroundColor: selectedRows.includes(item.idposts ?? -1) ? "#e6f7ff" : "inherit",
-          cursor: "pointer",
-          
-        }}
+      onClick={() => handleRowSelect(item.idposts ?? -1)}
+      style={{
+        backgroundColor: selectedRows.includes(item.idposts ?? -1)
+          ? '#e6f7ff'
+          : 'inherit',
+        cursor: 'pointer',
+      }}
     >
-      
       <td>
         <Text size="sm" weight={500}>
           {item.title}
@@ -425,26 +433,31 @@
       </td>
       {!mobileScreen && (
         <td>
-          <Container style={{ width: 400 }}>
-          <Text size="sm" color="dimmed">
-            {item.description}
-          </Text>
+          <Container style={{width: 400}}>
+            <Text size="sm" color="dimmed">
+              {item.description}
+            </Text>
           </Container>
         </td>
       )}
       {!mobileScreen && (
         <td>
-          <Text size="sm" color="dimmed" >
+          <Text size="sm" color="dimmed">
             {item.organization}
           </Text>
         </td>
       )}
       {!mobileScreen && (
         <td>
-          <Container style={{ width: 100 }}>
-          <a href={item.link} target='_blank'  color="dimmed" style={{ overflowWrap: 'break-word' }}>
-          {item.link}
-          </a>
+          <Container style={{width: 100}}>
+            <a
+              href={item.link}
+              target="_blank"
+              color="dimmed"
+              style={{overflowWrap: 'break-word'}}
+            >
+              {item.link}
+            </a>
           </Container>
         </td>
       )}
@@ -484,37 +497,30 @@
         </td>
       )}
       <td>
-      <Button 
-        variant="outline" 
-        size="sm" 
-        onClick={() => {
-          setDisplayOpportunityEditModal(true);
-          setCurrentOpportunity(rawConcertList[index]);
-        }}
-      >
-        Edit
-      </Button>
-    </td>      
+        <Button
+          variant="outline"
+          size="sm"
+          onClick={() => {
+            setDisplayOpportunityEditModal(true)
+            setCurrentOpportunity(rawConcertList[index])
+          }}
+        >
+          Edit
+        </Button>
+      </td>
     </tr>
-    
-  ));
+  ))
 
   const loadingRows = [1, 2, 3, 4, 5, 6, 7, 8].map((item, index) => (
     <tr key={index}>
       <td>
-        <Skeleton
-          height={8}
-          width="40%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-        />
+        <Skeleton height={8} width="40%" radius="xl" sx={{margin: '8px 0px'}} />
         {mobileScreen && (
           <Skeleton
             height={6}
             width="100%"
             radius="xl"
-            sx={{ margin: "8px 0px" }}
-            
+            sx={{margin: '8px 0px'}}
           />
         )}
       </td>
@@ -524,123 +530,111 @@
             height={16}
             width="100%"
             radius="xl"
-            sx={{ margin: "8px 0px" }}
-            
+            sx={{margin: '8px 0px'}}
           />
         </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="40%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-        
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="40%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
     </tr>
-  ));
-
-
+  ))
 
   const handleSelectAll = () => {
     if (selectAll) {
       // If all rows are selected, deselect all
-      setSelectedRows([]);
-      setSelectAll(false);
+      setSelectedRows([])
+      setSelectAll(false)
     } else {
       // Otherwise, select all rows
-      const allRowIDs = ConcertList.map(item => item.idposts ?? -1);
-      setSelectedRows(allRowIDs);
-      setSelectAll(true);
+      const allRowIDs = ConcertList.map((item) => item.idposts ?? -1)
+      setSelectedRows(allRowIDs)
+      setSelectAll(true)
     }
-  };
+  }
   const handleSelectedRowsUpdate = (updatedSelectedRows: number[]) => {
-    setSelectedRows(updatedSelectedRows);
-    
-  };
-  
+    setSelectedRows(updatedSelectedRows)
+  }
+
   const handleUpdate = () => {
-    setRecall((prevRecall) => prevRecall + 1);
+    setRecall((prevRecall) => prevRecall + 1)
   }
 
   return (
@@ -651,16 +645,16 @@
         onUpdateSelectedRows={handleSelectedRowsUpdate}
         onUpdate={handleUpdate}
         rawData={rawConcertList}
-  />
+      />
 
-<Paper
+      <Paper
         withBorder
         mt={30}
         radius="lg"
         className={cx(classes.userContainer, {
           [classes.noDataContainer]: rawConcertList.length === 0,
         })}
-        sx={{ padding: "40px 20px" }}
+        sx={{padding: '40px 20px'}}
       >
         <LoadingOverlay
           visible={loading}
@@ -669,188 +663,189 @@
           radius="lg"
         />
         {rawConcertList.length === 0 ? (
-        
-          <Text size="lg" weight={500} align="center" style={{ color: '#42A563',
-    fontSize: '36px',
-    textAlign: "center",
-    display: "flex",
-    justifyContent: "center",
-    alignItems: "center",
-    height: "100%",}}>
+          <Text
+            size="lg"
+            weight={500}
+            align="center"
+            style={{
+              color: '#42A563',
+              fontSize: '36px',
+              textAlign: 'center',
+              display: 'flex',
+              justifyContent: 'center',
+              alignItems: 'center',
+              height: '100%',
+            }}
+          >
             No New Concerts
           </Text>
-       
         ) : (
-        <ScrollArea w="100%" h="90%">
-          <Container className={classes.table}>
-            <Table verticalSpacing="sm">
-              <thead
-                className={cx(classes.header, {
-                  [classes.scrolled]: scrolled,
-                })}
-              >
-                <tr>
-                  
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="40%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Title"
-                    )}
-                  </th>
-                  {!mobileScreen && (
-                    <th style={{textAlign: "center"}}>
-                      {loading ? (
-                        <Skeleton
-                          height={12}
-                          width="50%"
-                          radius="xl"
-                          sx={{ margin: "8px 0px" }}
-                          
-                        />
-                      ) : (
-                        "Description"
-                      )}
-                    </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Organization"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Link"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Date"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                       
-                      />
-                    ) : (
-                      "Start Time"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (              
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "City/State"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Address"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Genre"
-                    )}
-                  </th>
-                  )}
-                  <th></th>
-                </tr>
-              </thead>
-              <tbody>{loading ? loadingRows : rows}</tbody>
-            </Table>
-          </Container>
-        </ScrollArea>
+          <ScrollArea w="100%" h="90%">
+            <Container className={classes.table}>
+              <Table verticalSpacing="sm">
+                <thead
+                  className={cx(classes.header, {
+                    [classes.scrolled]: scrolled,
+                  })}
+                >
+                  <tr>
+                    <th style={{textAlign: 'center'}}>
+                      {loading ? (
+                        <Skeleton
+                          height={12}
+                          width="40%"
+                          radius="xl"
+                          sx={{margin: '8px 0px'}}
+                        />
+                      ) : (
+                        'Title'
+                      )}
+                    </th>
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="50%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Description'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Organization'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Link'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Date'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Start Time'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'City/State'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Address'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Genre'
+                        )}
+                      </th>
+                    )}
+                    <th></th>
+                  </tr>
+                </thead>
+                <tbody>{loading ? loadingRows : rows}</tbody>
+              </Table>
+            </Container>
+          </ScrollArea>
         )}
         {
-          <Container sx={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginTop: "30px" }}>
-          <PaginationNavbarScraper
-            apiEndpointExtension={"concerts"}
-            numberOfItemsPerPage={10}
-            setListOfObjects={setRawConcertList}
-            searchFilterObject={searchParams}
-            setLoading={setLoading}
-            recall={recall}
-            //curPage = {CurrentPage}
-          />
-          
+          <Container
+            sx={{
+              display: 'flex',
+              justifyContent: 'space-between',
+              alignItems: 'center',
+              marginTop: '30px',
+            }}
+          >
+            <PaginationNavbarScraper
+              apiEndpointExtension={'concerts'}
+              numberOfItemsPerPage={10}
+              setListOfObjects={setRawConcertList}
+              searchFilterObject={searchParams}
+              setLoading={setLoading}
+              recall={recall}
+              //curPage = {CurrentPage}
+            />
           </Container>
         }
       </Paper>
       <Modal
         opened={displayOpportunityEditModal}
         onClose={() => {
-          setDisplayOpportunityEditModal(false);
+          setDisplayOpportunityEditModal(false)
         }}
         fullScreen={smallerScreen}
         size="60%"
@@ -858,14 +853,12 @@
         <FormHeader>Edit Post</FormHeader>
         <ScrapedPostForm
           edit={true}
-          opportunityType={
-            "concerts"
-          }
+          opportunityType={'concerts'}
           opportunity={currentOpportunity ? currentOpportunity : undefined}
           displayWinnerInput
           handleSubmission={handleEditButton}
         />
       </Modal>
     </Container>
-  );
+  )
 }
Index: src/pages/Festivals.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Opportunity } from \"../components/opportunity/Opportunity\";\nimport { motion } from \"framer-motion\";\n\nexport function Festivals() {\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Opportunity apiEndpoint=\"festivals\" />\n    </motion.div>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/Festivals.tsx b/src/pages/Festivals.tsx
--- a/src/pages/Festivals.tsx	
+++ b/src/pages/Festivals.tsx	
@@ -1,14 +1,14 @@
-import { Opportunity } from "../components/opportunity/Opportunity";
-import { motion } from "framer-motion";
+import {Opportunity} from '../components/opportunity/Opportunity'
+import {motion} from 'framer-motion'
 
 export function Festivals() {
   return (
     <motion.div
-      initial={{ opacity: 0 }}
-      animate={{ opacity: 1 }}
-      transition={{ duration: 0.3 }}
+      initial={{opacity: 0}}
+      animate={{opacity: 1}}
+      transition={{duration: 0.3}}
     >
       <Opportunity apiEndpoint="festivals" />
     </motion.div>
-  );
+  )
 }
Index: src/pages/MyPosts.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Opportunity } from \"../components/opportunity/Opportunity\";\nimport { auth } from \"../Firebase\";\nimport React, { useState, useEffect } from \"react\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { useNavigate } from \"react-router-dom\";\nimport { motion } from \"framer-motion\";\n\nexport function MyPosts() {\n  const [userUid, setUserUid] = useState(\"\");\n  const [pathName, setPathName] = useState(\"\");\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    onAuthStateChanged(auth, (user) => {\n      if (user) {\n        if (!user.emailVerified) {\n          navigate(\"/verify\");\n        }\n        console.log('auth = ' + auth.toString());\n        console.log('user = ' + user.toString());\n        let temp = 'posts/'+user.uid;\n        console.log(\"HERE!\");\n        setPathName(temp);\n      } else {\n        navigate(\"/\");\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    console.log(\"pathname: \", pathName);\n  }, [pathName]);\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Opportunity apiEndpoint={pathName} />\n    </motion.div>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/MyPosts.tsx b/src/pages/MyPosts.tsx
--- a/src/pages/MyPosts.tsx	
+++ b/src/pages/MyPosts.tsx	
@@ -1,43 +1,43 @@
-import { Opportunity } from "../components/opportunity/Opportunity";
-import { auth } from "../Firebase";
-import React, { useState, useEffect } from "react";
-import { onAuthStateChanged } from "firebase/auth";
-import { useNavigate } from "react-router-dom";
-import { motion } from "framer-motion";
+import {Opportunity} from '../components/opportunity/Opportunity'
+import {auth} from '../Firebase'
+import React, {useState, useEffect} from 'react'
+import {onAuthStateChanged} from 'firebase/auth'
+import {useNavigate} from 'react-router-dom'
+import {motion} from 'framer-motion'
 
 export function MyPosts() {
-  const [userUid, setUserUid] = useState("");
-  const [pathName, setPathName] = useState("");
-  const navigate = useNavigate();
+  const [userUid, setUserUid] = useState('')
+  const [pathName, setPathName] = useState('')
+  const navigate = useNavigate()
 
   useEffect(() => {
     onAuthStateChanged(auth, (user) => {
       if (user) {
         if (!user.emailVerified) {
-          navigate("/verify");
+          navigate('/verify')
         }
-        console.log('auth = ' + auth.toString());
-        console.log('user = ' + user.toString());
-        let temp = 'posts/'+user.uid;
-        console.log("HERE!");
-        setPathName(temp);
+        console.log('auth = ' + auth.toString())
+        console.log('user = ' + user.toString())
+        let temp = 'posts/' + user.uid
+        console.log('HERE!')
+        setPathName(temp)
       } else {
-        navigate("/");
+        navigate('/')
       }
-    });
-  }, []);
+    })
+  }, [])
 
   useEffect(() => {
-    console.log("pathname: ", pathName);
-  }, [pathName]);
+    console.log('pathname: ', pathName)
+  }, [pathName])
 
   return (
     <motion.div
-      initial={{ opacity: 0 }}
-      animate={{ opacity: 1 }}
-      transition={{ duration: 0.3 }}
+      initial={{opacity: 0}}
+      animate={{opacity: 1}}
+      transition={{duration: 0.3}}
     >
       <Opportunity apiEndpoint={pathName} />
     </motion.div>
-  );
+  )
 }
Index: src/components/adminView/ScrapedNews.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {\n  Paper,\n  Menu,\n  Badge,\n  Table,\n  Text,\n  ActionIcon,\n  ScrollArea,\n  useMantineTheme,\n  Container,\n  createStyles,\n  LoadingOverlay,\n  Skeleton,\n  Checkbox,\n  Button,\n  Modal,\n  Flex,\n} from \"@mantine/core\";\nimport { OpportunityItem } from \"../opportunity/OpportunityHelper\";\nimport { ScrapedPost } from \"./ScrapedPostHelper\";\nimport { FormHeader } from \"../opportunity/CreateOpportunityHelper\";\nimport {\n  IconBan,\n  IconTrash,\n  IconArrowBigUpLine,\n  IconCheck,\n  IconArrowBigDownLine,\n  IconDots,\n} from \"@tabler/icons\";\nimport { auth } from \"../../Firebase\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { showNotification } from \"@mantine/notifications\";\nimport { openAdminModal } from \"./modals/AdminModal\";\nimport { openDeleteModal } from \"./modals/DeleteModal\";\nimport { openBanModal } from \"./modals/BanModal\";\nimport {\n  PaginationNavbar,\n  PaginationSearchObject,\n} from \"../pagination/PaginationNavbar\";\nimport { useMediaQuery } from \"@mantine/hooks\";\nimport { PaginationNavbarScraper } from \"../pagination/PaginationNavbarScraper\";\nimport { SearchAndFilterScraped } from \"./SearchAndFilterScraped\";\nimport { OpportunityForm } from \"../opportunity/OpportunityForm\";\nimport { ScrapedPostForm } from \"./ScrapedPostForm\";\n\ninterface NewsTableData {\n  UID?: string;\n  idposts?: number;\n  title?: string;\n  description?: string;\n  link?: string;\n  organization?: string;\n  published_date?: string;\n  writer?: string;\n}\n\nconst typeColors: Record<string, string> = {\n  regular: \"blue\",\n  admin: \"green\",\n  banned: \"red\",\n};\n\nconst useStyles = createStyles((theme) => ({\n  container: {\n    width: \"90vw\",\n    padding: \"0px\",\n\n    [theme.fn.smallerThan(\"md\")]: {\n      width: \"100%\",\n    },\n  },\n\n  userContainer: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    position: \"relative\",\n    zIndex: 1,\n    borderColor: \"#939393\",\n\n    [theme.fn.smallerThan(\"md\")]: {\n      padding: \"15px\",\n      borderRadius: \"0px\",\n    },\n\n    [theme.fn.largerThan(\"sm\")]: {\n      height: \"90vh\",\n    },\n  },\n  noDataContainer: {\n    display: \"flex\",\n    justifyContent: \"center\", // Center horizontally\n  alignItems: \"center\",\n    position: \"relative\",\n    zIndex: 1,\n    borderColor: \"#939393\",\n\n    \n\n    [theme.fn.largerThan(\"sm\")]: {\n      height: \"5vh\",\n    },\n  },\n\n  table: {\n    maxWidth: \"100%\",\n    flexBasis: \"100%\",\n\n    [theme.fn.smallerThan(\"md\")]: {\n      maxHeight: \"90vh\",\n      padding: \"0px\",\n    },\n  },\n\n  bold: {\n    fontWeight: 700,\n  },\n\n  header: {\n    position: \"sticky\",\n    top: 0,\n    backgroundColor:\n      theme.colorScheme === \"dark\" ? theme.colors.dark[7] : theme.white,\n    transition: \"box-shadow 150ms ease\",\n\n    \"&::after\": {\n      content: '\"\"',\n      position: \"absolute\",\n      zIndex: 1,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      borderBottom: `1px solid ${\n        theme.colorScheme === \"dark\"\n          ? theme.colors.dark[3]\n          : theme.colors.gray[2]\n      }`,\n    },\n  },\n  buttonsContainer: {\n    marginLeft: \"auto\",\n  },\n\n  scrolled: {\n    // boxShadow: theme.shadows.sm,\n  },\n}));\n\nexport function ScrapedNews() {\n  const theme = useMantineTheme();\n  const { classes, cx } = useStyles();\n  const [rawNewsList, setRawNewsList] = useState<ScrapedPost[]>([]);\n  const [selectedRows, setSelectedRows] = useState<number[]>([]);\n  const [currentOpportunity, setCurrentOpportunity] =\n    useState<ScrapedPost | null>(null);\n  const [selectAll, setSelectAll] = useState(false);\n  const [displayOpportunityEditModal, setDisplayOpportunityEditModal] =\n    useState(false);\n  const [displayOpportunityInfoModal, setDisplayOpportunityInfoModal] =\n    useState(false);\n  const [CurrentPage, setCurrentPage] = useState(1); // Add CurrentPage state\n  const [NewsList, setNewsList] = useState<NewsTableData[]>([]); // Corrected variable name\n  const [searchParams, setSearchParams] = useState<PaginationSearchObject>({\n    keyword: \"\",\n  });\n  const [scrolled, setScrolled] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [recall, setRecall] = useState(0);\n  const smallerScreen = useMediaQuery(\"(max-width: 992px)\");\n\n  const handleCurrentPageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n\n  useEffect(() => {\n    onAuthStateChanged(auth, async (user) => {\n      if (user && user.email) {\n        setSearchParams({ ...searchParams,});\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    convertRawNewsDataToTableData();\n  }, [rawNewsList, searchParams]);\n\n  useEffect(() => {\n    console.log(\"loading changed to:\", loading);\n  }, [loading]);\n\n  const convertRawNewsDataToTableData = () => {\n    let newNewsList: NewsTableData[] = [];\n    rawNewsList?.forEach((NewsItem) => {\n      const startDate = NewsItem.published_date ? new Date(NewsItem.published_date) : null;\n      const endDate = NewsItem.end_date ? new Date(NewsItem.end_date) : null;\n      const deadline = NewsItem.deadline ? new Date(NewsItem.deadline) : null;\n  \n      let formattedNewsData: NewsTableData = {\n        UID: NewsItem.UID,\n        idposts: NewsItem.idposts,\n        title: NewsItem.title,\n        description: NewsItem.description,\n        link: NewsItem.link,\n        organization: NewsItem.organization,\n        published_date: startDate ? `${startDate.toLocaleString('en-us', { month: 'long' })} ${startDate.getDate()}, ${startDate.getFullYear()}` : \"\",\n        writer: NewsItem.writer,\n      };\n      newNewsList.push(formattedNewsData);\n    });\n    setNewsList(newNewsList);\n  };\n\n  const mobileScreen = useMediaQuery(\"(max-width: 768px)\");\n  const dragState = useRef({\n    isDragging: false,\n    startRowIndex: -1,\n    endRowIndex: -1,\n  });\n  \n  const handleMouseDown = (index: number) => {\n    dragState.current.isDragging = true;\n    dragState.current.startRowIndex = index;\n    dragState.current.endRowIndex = index;\n  };\n  \n  const handleMouseEnter = (index: number) => {\n    if (dragState.current.isDragging) {\n      dragState.current.endRowIndex = index;\n      const start = Math.min(\n        dragState.current.startRowIndex,\n        dragState.current.endRowIndex\n      );\n      const end = Math.max(\n        dragState.current.startRowIndex,\n        dragState.current.endRowIndex\n      );\n      const selectedIDPosts = [...selectedRows];\n      const id = rawNewsList[dragState.current.startRowIndex]?.idposts ?? -1;\n    if (selectedIDPosts.includes(id)) {\n      // If the startRowIndex is in the selectedRows list,\n      // add new IDPosts to the selectedRows\n      for (let i = start; i <= end; i++) {\n        if (!selectedIDPosts.includes(rawNewsList[i]?.idposts ?? -1)) {\n          selectedIDPosts.push(rawNewsList[i]?.idposts ?? -1);\n        }\n      }\n    } else {\n      // Otherwise, remove dragged elements if they are in the list\n      for (let i = start; i <= end; i++) {\n        const indexToRemove = selectedIDPosts.indexOf(rawNewsList[i]?.idposts ?? -1);\n        if (indexToRemove !== -1) {\n          selectedIDPosts.splice(indexToRemove, 1);\n        }\n      }\n    }\n    setSelectedRows(selectedIDPosts);\n    }\n  };\n  \n  const handleMouseUp = () => {\n    dragState.current.isDragging = false;\n  };\n\n  const handleRowSelect = (idposts: number) => {\n    setSelectedRows(prevSelectedRows => {\n      if (prevSelectedRows.includes(idposts)) {\n        // If UID is already selected, remove it from the selectedRows\n        return prevSelectedRows.filter(row => row !== idposts);\n      } else {\n        // Otherwise, add it to the selectedRows\n        return [...prevSelectedRows, idposts];\n      }\n    });\n  };\n  const editFunction = async (opportunity: ScrapedPost) => {\n    try {\n      let idpost = currentOpportunity?.idposts;\n      // Delete the idposts in the opportunity such that the backend doesn't actually update the idpost column in mySQL.\n      // This shouldn't be necessary to do at all but have it here just in-case the idposts here is some how different from the idposts in the url parameters and/or in mySQL\n      \n      delete opportunity.idposts;\n      delete opportunity.first_name;\n      delete opportunity.last_name;\n      delete opportunity.email;\n      delete opportunity.is_banned;\n      delete opportunity.is_admin;\n      delete opportunity.ban_message;\n\n      for (let key in opportunity) {\n        if (\n          !opportunity[key as keyof typeof opportunity] &&\n          key !== \"winner\" &&\n          key !== \"city\" &&\n          key !== \"state\" &&\n          key !== \"address\"\n        ) {\n          delete opportunity[key as keyof typeof opportunity];\n        }\n      }\n\n      console.log(\"formatted edit body:\", opportunity);\n      let temp = opportunity.published_date;\n      opportunity.published_date = new Date(temp ? temp: \"\").getTime();\n      \n\n      let requestOptions = {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(opportunity),\n      };\n\n      let response = await fetch(\n        `https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday/news/${idpost}`,\n        requestOptions\n      );\n\n      let responseJson = await response.json();\n\n      let editedOpportunity = responseJson.listOfObjects[0];\n      console.log(\"edited body:\" + editedOpportunity);\n\n      return editedOpportunity;\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const handleEditButton = async (opportunity: ScrapedPost) => {\n    try {\n      //delete opportunity.UID;\n      //delete opportunity.date_posted;\n      \n\n      // Format any keys of type number to be as type strings since the APIs only accept strings for the request body\n      opportunity.end_date = opportunity.end_date?.toString();\n      opportunity.start_date = opportunity.start_date?.toString();\n      opportunity.deadline = opportunity.deadline?.toString();\n      opportunity.salary = opportunity.salary?.toString();\n      opportunity.fee = opportunity.fee?.toString();\n      opportunity.published_date = opportunity.published_date?.toString();\n\n      let editedOpportunity = await editFunction(opportunity);\n      console.log(\"Edited Op \"+ editedOpportunity);\n\n      for (let i = 0; i < rawNewsList.length; i++) {\n        if (rawNewsList[i].idposts === editedOpportunity.idposts) {\n          let tempArray = rawNewsList;\n          tempArray[i] = editedOpportunity;\n          setRawNewsList([...tempArray]);\n          break;\n        }\n      }\n\n      showNotification({\n        title: \"Edits Applied\",\n        message: \"Your changes have been applied\",\n        color: \"green\",\n      });\n      setDisplayOpportunityEditModal(false);\n    } catch (err) {\n      console.log(err);\n      showNotification({\n        title: \"Error\",\n        message: \"There was a problem, please try again later\",\n        color: \"red\",\n      });\n    }\n  };\n  \n\n  const rows = NewsList?.map((item, index) => (\n    <tr \n      onMouseDown={() => handleMouseDown(index)}\n      onMouseEnter={() => handleMouseEnter(index)}\n      onMouseUp={handleMouseUp}\n      \n        onClick={() => handleRowSelect(item.idposts ?? -1)}\n        style={{\n          backgroundColor: selectedRows.includes(item.idposts ?? -1) ? \"#e6f7ff\" : \"inherit\",\n          cursor: \"pointer\",\n          \n        }}\n    >\n      \n      <td>\n        <Text size=\"sm\" weight={500}>\n          {item.title}\n        </Text>\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.link}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.organization}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.published_date}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.writer}\n          </Text>\n        )}\n      </td>\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\" >\n            {item.organization}\n          </Text>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Container style={{ width: 100 }}>\n          <a href={item.link} target='_blank'  color=\"dimmed\" style={{ overflowWrap: 'break-word' }}>\n          {item.link}\n          </a>\n          </Container>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.published_date}\n          </Text>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.writer}\n          </Text>\n        </td>\n      )}\n      <td>\n      <Button \n        variant=\"outline\" \n        size=\"sm\" \n        onClick={() => {\n          setDisplayOpportunityEditModal(true);\n          setCurrentOpportunity(rawNewsList[index]);\n        }}\n      >\n        Edit\n      </Button>\n    </td>      \n    </tr>\n    \n  ));\n\n  const loadingRows = [1, 2, 3, 4, 5].map((item, index) => (\n    <tr key={index}>\n      <td>\n        <Skeleton\n          height={8}\n          width=\"40%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n        />\n        {mobileScreen && (\n          <Skeleton\n            height={6}\n            width=\"100%\"\n            radius=\"xl\"\n            sx={{ margin: \"8px 0px\" }}\n            \n          />\n        )}\n      </td>\n      {!mobileScreen && (\n        <td>\n          <Skeleton\n            height={16}\n            width=\"100%\"\n            radius=\"xl\"\n            sx={{ margin: \"8px 0px\" }}\n            \n          />\n        </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"40%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n        \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n    </tr>\n  ));\n\n\n\n  const handleSelectAll = () => {\n    if (selectAll) {\n      // If all rows are selected, deselect all\n      setSelectedRows([]);\n      setSelectAll(false);\n    } else {\n      // Otherwise, select all rows\n      const allRowIDs = NewsList.map(item => item.idposts ?? -1);\n      setSelectedRows(allRowIDs);\n      setSelectAll(true);\n    }\n  };\n  const handleSelectedRowsUpdate = (updatedSelectedRows: number[]) => {\n    setSelectedRows(updatedSelectedRows);\n    \n  };\n  const handleUpdate = () => {\n    setRecall((prevRecall) => prevRecall + 1);\n  }\n\n  return (\n    <Container fluid className={classes.container}>\n      <SearchAndFilterScraped\n        setSearchObjs={setSearchParams}\n        selectedRows={selectedRows}\n        onUpdateSelectedRows={handleSelectedRowsUpdate}\n        onUpdate={handleUpdate}\n        rawData={rawNewsList}\n  />\n\n<Paper\n        withBorder\n        mt={30}\n        radius=\"lg\"\n        className={cx(classes.userContainer, {\n          [classes.noDataContainer]: rawNewsList.length === 0,\n        })}\n        sx={{ padding: \"40px 20px\" }}\n      >\n        <LoadingOverlay\n          visible={loading}\n          overlayOpacity={0.2}\n          overlayBlur={0.2}\n          radius=\"lg\"\n        />\n        {rawNewsList.length === 0 ? (\n        \n          <Text size=\"lg\" weight={500} align=\"center\" style={{ color: '#42A563',\n    fontSize: '36px',\n    textAlign: \"center\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"100%\",}}>\n            No New News\n          </Text>\n       \n        ) : (\n        <ScrollArea w=\"100%\" h=\"90%\">\n          <Container className={classes.table}>\n            <Table verticalSpacing=\"sm\">\n              <thead\n                className={cx(classes.header, {\n                  [classes.scrolled]: scrolled,\n                })}\n              >\n                <tr>\n                {mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                  {loading ? (\n                    <Skeleton\n                      height={12}\n                      width=\"40%\"\n                      radius=\"xl\"\n                      sx={{ margin: \"8px 0px\" }}\n                      \n                    />\n                  ) : (\n                    \"Item\"\n                  )}\n                </th>\n                )}\n                {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"40%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Title\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Organization\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Link\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Published Date\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                       \n                      />\n                    ) : (\n                      \"Writer\"\n                    )}\n                  </th>\n                  )}\n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>{loading ? loadingRows : rows}</tbody>\n            </Table>\n          </Container>\n        </ScrollArea>\n        )}\n        <Container sx={{ display: \"flex\", justifyContent: \"\", alignItems: \"center\", marginTop: \"30px\"}}>\n          \n        <PaginationNavbarScraper\n          apiEndpointExtension={\"news\"}\n          numberOfItemsPerPage={10}\n          setListOfObjects={setRawNewsList}\n          searchFilterObject={searchParams}\n          setLoading={setLoading}\n          recall={recall}\n          //curPage = {CurrentPage}\n        />\n        </Container>\n        \n        \n      </Paper>\n      <Modal\n        opened={displayOpportunityEditModal}\n        onClose={() => {\n          setDisplayOpportunityEditModal(false);\n        }}\n        fullScreen={smallerScreen}\n        size=\"60%\"\n      >\n        <FormHeader>Edit Post</FormHeader>\n        <ScrapedPostForm\n          edit={true}\n          opportunityType={\n            \"news\"\n          }\n          opportunity={currentOpportunity ? currentOpportunity : undefined}\n          displayWinnerInput\n          handleSubmission={handleEditButton}\n        />\n      </Modal>\n    </Container>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/adminView/ScrapedNews.tsx b/src/components/adminView/ScrapedNews.tsx
--- a/src/components/adminView/ScrapedNews.tsx	
+++ b/src/components/adminView/ScrapedNews.tsx	
@@ -15,10 +15,10 @@
   Button,
   Modal,
   Flex,
-} from "@mantine/core";
-import { OpportunityItem } from "../opportunity/OpportunityHelper";
-import { ScrapedPost } from "./ScrapedPostHelper";
-import { FormHeader } from "../opportunity/CreateOpportunityHelper";
+} from '@mantine/core'
+import {OpportunityItem} from '../opportunity/OpportunityHelper'
+import {ScrapedPost} from './ScrapedPostHelper'
+import {FormHeader} from '../opportunity/CreateOpportunityHelper'
 import {
   IconBan,
   IconTrash,
@@ -26,89 +26,87 @@
   IconCheck,
   IconArrowBigDownLine,
   IconDots,
-} from "@tabler/icons";
-import { auth } from "../../Firebase";
-import { onAuthStateChanged } from "firebase/auth";
-import { useEffect, useState, useRef } from "react";
-import { showNotification } from "@mantine/notifications";
-import { openAdminModal } from "./modals/AdminModal";
-import { openDeleteModal } from "./modals/DeleteModal";
-import { openBanModal } from "./modals/BanModal";
+} from '@tabler/icons'
+import {auth} from '../../Firebase'
+import {onAuthStateChanged} from 'firebase/auth'
+import {useEffect, useState, useRef} from 'react'
+import {showNotification} from '@mantine/notifications'
+import {openAdminModal} from './modals/AdminModal'
+import {openDeleteModal} from './modals/DeleteModal'
+import {openBanModal} from './modals/BanModal'
 import {
   PaginationNavbar,
   PaginationSearchObject,
-} from "../pagination/PaginationNavbar";
-import { useMediaQuery } from "@mantine/hooks";
-import { PaginationNavbarScraper } from "../pagination/PaginationNavbarScraper";
-import { SearchAndFilterScraped } from "./SearchAndFilterScraped";
-import { OpportunityForm } from "../opportunity/OpportunityForm";
-import { ScrapedPostForm } from "./ScrapedPostForm";
+} from '../pagination/PaginationNavbar'
+import {useMediaQuery} from '@mantine/hooks'
+import {PaginationNavbarScraper} from '../pagination/PaginationNavbarScraper'
+import {SearchAndFilterScraped} from './SearchAndFilterScraped'
+import {OpportunityForm} from '../opportunity/OpportunityForm'
+import {ScrapedPostForm} from './ScrapedPostForm'
 
 interface NewsTableData {
-  UID?: string;
-  idposts?: number;
-  title?: string;
-  description?: string;
-  link?: string;
-  organization?: string;
-  published_date?: string;
-  writer?: string;
+  UID?: string
+  idposts?: number
+  title?: string
+  description?: string
+  link?: string
+  organization?: string
+  published_date?: string
+  writer?: string
 }
 
 const typeColors: Record<string, string> = {
-  regular: "blue",
-  admin: "green",
-  banned: "red",
-};
+  regular: 'blue',
+  admin: 'green',
+  banned: 'red',
+}
 
 const useStyles = createStyles((theme) => ({
   container: {
-    width: "90vw",
-    padding: "0px",
+    width: '90vw',
+    padding: '0px',
 
-    [theme.fn.smallerThan("md")]: {
-      width: "100%",
+    [theme.fn.smallerThan('md')]: {
+      width: '100%',
     },
   },
 
   userContainer: {
-    display: "flex",
-    flexWrap: "wrap",
-    position: "relative",
+    display: 'flex',
+    flexWrap: 'wrap',
+    position: 'relative',
     zIndex: 1,
-    borderColor: "#939393",
+    borderColor: '#939393',
 
-    [theme.fn.smallerThan("md")]: {
-      padding: "15px",
-      borderRadius: "0px",
+    [theme.fn.smallerThan('md')]: {
+      padding: '15px',
+      borderRadius: '0px',
     },
 
-    [theme.fn.largerThan("sm")]: {
-      height: "90vh",
+    [theme.fn.largerThan('sm')]: {
+      height: '90vh',
     },
   },
   noDataContainer: {
-    display: "flex",
-    justifyContent: "center", // Center horizontally
-  alignItems: "center",
-    position: "relative",
+    display: 'flex',
+    justifyContent: 'center', // Center horizontally
+    alignItems: 'center',
+    position: 'relative',
     zIndex: 1,
-    borderColor: "#939393",
+    borderColor: '#939393',
 
-    
-
-    [theme.fn.largerThan("sm")]: {
-      height: "5vh",
+    [theme.fn.largerThan('sm')]: {
+      height: '5vh',
     },
   },
 
   table: {
-    maxWidth: "100%",
-    flexBasis: "100%",
+    maxWidth: '100%',
+    flexBasis: '100%',
 
-    [theme.fn.smallerThan("md")]: {
-      maxHeight: "90vh",
-      padding: "0px",
+    [theme.fn.smallerThan('md')]: {
+      maxHeight: '90vh',
+      padding: '0px',
     },
   },
 
@@ -117,85 +115,86 @@
   },
 
   header: {
-    position: "sticky",
+    position: 'sticky',
     top: 0,
     backgroundColor:
-      theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white,
-    transition: "box-shadow 150ms ease",
+      theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,
+    transition: 'box-shadow 150ms ease',
 
-    "&::after": {
+    '&::after': {
       content: '""',
-      position: "absolute",
+      position: 'absolute',
       zIndex: 1,
       left: 0,
       right: 0,
       bottom: 0,
       borderBottom: `1px solid ${
-        theme.colorScheme === "dark"
+        theme.colorScheme === 'dark'
           ? theme.colors.dark[3]
           : theme.colors.gray[2]
       }`,
     },
   },
   buttonsContainer: {
-    marginLeft: "auto",
+    marginLeft: 'auto',
   },
 
   scrolled: {
     // boxShadow: theme.shadows.sm,
   },
-}));
+}))
 
 export function ScrapedNews() {
-  const theme = useMantineTheme();
-  const { classes, cx } = useStyles();
-  const [rawNewsList, setRawNewsList] = useState<ScrapedPost[]>([]);
-  const [selectedRows, setSelectedRows] = useState<number[]>([]);
+  const theme = useMantineTheme()
+  const {classes, cx} = useStyles()
+  const [rawNewsList, setRawNewsList] = useState<ScrapedPost[]>([])
+  const [selectedRows, setSelectedRows] = useState<number[]>([])
   const [currentOpportunity, setCurrentOpportunity] =
-    useState<ScrapedPost | null>(null);
-  const [selectAll, setSelectAll] = useState(false);
+    useState<ScrapedPost | null>(null)
+  const [selectAll, setSelectAll] = useState(false)
   const [displayOpportunityEditModal, setDisplayOpportunityEditModal] =
-    useState(false);
+    useState(false)
   const [displayOpportunityInfoModal, setDisplayOpportunityInfoModal] =
-    useState(false);
-  const [CurrentPage, setCurrentPage] = useState(1); // Add CurrentPage state
-  const [NewsList, setNewsList] = useState<NewsTableData[]>([]); // Corrected variable name
+    useState(false)
+  const [CurrentPage, setCurrentPage] = useState(1) // Add CurrentPage state
+  const [NewsList, setNewsList] = useState<NewsTableData[]>([]) // Corrected variable name
   const [searchParams, setSearchParams] = useState<PaginationSearchObject>({
-    keyword: "",
-  });
-  const [scrolled, setScrolled] = useState(false);
-  const [loading, setLoading] = useState(true);
-  const [recall, setRecall] = useState(0);
-  const smallerScreen = useMediaQuery("(max-width: 992px)");
+    keyword: '',
+  })
+  const [scrolled, setScrolled] = useState(false)
+  const [loading, setLoading] = useState(true)
+  const [recall, setRecall] = useState(0)
+  const smallerScreen = useMediaQuery('(max-width: 992px)')
 
   const handleCurrentPageChange = (page: number) => {
-    setCurrentPage(page);
-  };
-
+    setCurrentPage(page)
+  }
 
   useEffect(() => {
     onAuthStateChanged(auth, async (user) => {
       if (user && user.email) {
-        setSearchParams({ ...searchParams,});
+        setSearchParams({...searchParams})
       }
-    });
-  }, []);
+    })
+  }, [])
 
   useEffect(() => {
-    convertRawNewsDataToTableData();
-  }, [rawNewsList, searchParams]);
+    convertRawNewsDataToTableData()
+  }, [rawNewsList, searchParams])
 
   useEffect(() => {
-    console.log("loading changed to:", loading);
-  }, [loading]);
+    console.log('loading changed to:', loading)
+  }, [loading])
 
   const convertRawNewsDataToTableData = () => {
-    let newNewsList: NewsTableData[] = [];
+    let newNewsList: NewsTableData[] = []
     rawNewsList?.forEach((NewsItem) => {
-      const startDate = NewsItem.published_date ? new Date(NewsItem.published_date) : null;
-      const endDate = NewsItem.end_date ? new Date(NewsItem.end_date) : null;
-      const deadline = NewsItem.deadline ? new Date(NewsItem.deadline) : null;
-  
+      const startDate = NewsItem.published_date
+        ? new Date(NewsItem.published_date)
+        : null
+      const endDate = NewsItem.end_date ? new Date(NewsItem.end_date) : null
+      const deadline = NewsItem.deadline ? new Date(NewsItem.deadline) : null
+
       let formattedNewsData: NewsTableData = {
         UID: NewsItem.UID,
         idposts: NewsItem.idposts,
@@ -203,186 +202,188 @@
         description: NewsItem.description,
         link: NewsItem.link,
         organization: NewsItem.organization,
-        published_date: startDate ? `${startDate.toLocaleString('en-us', { month: 'long' })} ${startDate.getDate()}, ${startDate.getFullYear()}` : "",
+        published_date: startDate
+          ? `${startDate.toLocaleString('en-us', {
+              month: 'long',
+            })} ${startDate.getDate()}, ${startDate.getFullYear()}`
+          : '',
         writer: NewsItem.writer,
-      };
-      newNewsList.push(formattedNewsData);
-    });
-    setNewsList(newNewsList);
-  };
+      }
+      newNewsList.push(formattedNewsData)
+    })
+    setNewsList(newNewsList)
+  }
 
-  const mobileScreen = useMediaQuery("(max-width: 768px)");
+  const mobileScreen = useMediaQuery('(max-width: 768px)')
   const dragState = useRef({
     isDragging: false,
     startRowIndex: -1,
     endRowIndex: -1,
-  });
-  
+  })
+
   const handleMouseDown = (index: number) => {
-    dragState.current.isDragging = true;
-    dragState.current.startRowIndex = index;
-    dragState.current.endRowIndex = index;
-  };
-  
+    dragState.current.isDragging = true
+    dragState.current.startRowIndex = index
+    dragState.current.endRowIndex = index
+  }
+
   const handleMouseEnter = (index: number) => {
     if (dragState.current.isDragging) {
-      dragState.current.endRowIndex = index;
+      dragState.current.endRowIndex = index
       const start = Math.min(
         dragState.current.startRowIndex,
-        dragState.current.endRowIndex
-      );
+        dragState.current.endRowIndex,
+      )
       const end = Math.max(
         dragState.current.startRowIndex,
-        dragState.current.endRowIndex
-      );
-      const selectedIDPosts = [...selectedRows];
-      const id = rawNewsList[dragState.current.startRowIndex]?.idposts ?? -1;
-    if (selectedIDPosts.includes(id)) {
-      // If the startRowIndex is in the selectedRows list,
-      // add new IDPosts to the selectedRows
-      for (let i = start; i <= end; i++) {
-        if (!selectedIDPosts.includes(rawNewsList[i]?.idposts ?? -1)) {
-          selectedIDPosts.push(rawNewsList[i]?.idposts ?? -1);
-        }
-      }
-    } else {
-      // Otherwise, remove dragged elements if they are in the list
-      for (let i = start; i <= end; i++) {
-        const indexToRemove = selectedIDPosts.indexOf(rawNewsList[i]?.idposts ?? -1);
-        if (indexToRemove !== -1) {
-          selectedIDPosts.splice(indexToRemove, 1);
+        dragState.current.endRowIndex,
+      )
+      const selectedIDPosts = [...selectedRows]
+      const id = rawNewsList[dragState.current.startRowIndex]?.idposts ?? -1
+      if (selectedIDPosts.includes(id)) {
+        // If the startRowIndex is in the selectedRows list,
+        // add new IDPosts to the selectedRows
+        for (let i = start; i <= end; i++) {
+          if (!selectedIDPosts.includes(rawNewsList[i]?.idposts ?? -1)) {
+            selectedIDPosts.push(rawNewsList[i]?.idposts ?? -1)
+          }
+        }
+      } else {
+        // Otherwise, remove dragged elements if they are in the list
+        for (let i = start; i <= end; i++) {
+          const indexToRemove = selectedIDPosts.indexOf(
+            rawNewsList[i]?.idposts ?? -1,
+          )
+          if (indexToRemove !== -1) {
+            selectedIDPosts.splice(indexToRemove, 1)
+          }
         }
       }
+      setSelectedRows(selectedIDPosts)
     }
-    setSelectedRows(selectedIDPosts);
-    }
-  };
-  
+  }
+
   const handleMouseUp = () => {
-    dragState.current.isDragging = false;
-  };
+    dragState.current.isDragging = false
+  }
 
   const handleRowSelect = (idposts: number) => {
-    setSelectedRows(prevSelectedRows => {
+    setSelectedRows((prevSelectedRows) => {
       if (prevSelectedRows.includes(idposts)) {
         // If UID is already selected, remove it from the selectedRows
-        return prevSelectedRows.filter(row => row !== idposts);
+        return prevSelectedRows.filter((row) => row !== idposts)
       } else {
         // Otherwise, add it to the selectedRows
-        return [...prevSelectedRows, idposts];
+        return [...prevSelectedRows, idposts]
       }
-    });
-  };
+    })
+  }
   const editFunction = async (opportunity: ScrapedPost) => {
     try {
-      let idpost = currentOpportunity?.idposts;
+      let idpost = currentOpportunity?.idposts
       // Delete the idposts in the opportunity such that the backend doesn't actually update the idpost column in mySQL.
       // This shouldn't be necessary to do at all but have it here just in-case the idposts here is some how different from the idposts in the url parameters and/or in mySQL
-      
-      delete opportunity.idposts;
-      delete opportunity.first_name;
-      delete opportunity.last_name;
-      delete opportunity.email;
-      delete opportunity.is_banned;
-      delete opportunity.is_admin;
-      delete opportunity.ban_message;
+
+      delete opportunity.idposts
+      delete opportunity.first_name
+      delete opportunity.last_name
+      delete opportunity.email
+      delete opportunity.is_banned
+      delete opportunity.is_admin
+      delete opportunity.ban_message
 
       for (let key in opportunity) {
         if (
           !opportunity[key as keyof typeof opportunity] &&
-          key !== "winner" &&
-          key !== "city" &&
-          key !== "state" &&
-          key !== "address"
+          key !== 'winner' &&
+          key !== 'city' &&
+          key !== 'state' &&
+          key !== 'address'
         ) {
-          delete opportunity[key as keyof typeof opportunity];
+          delete opportunity[key as keyof typeof opportunity]
         }
       }
 
-      console.log("formatted edit body:", opportunity);
-      let temp = opportunity.published_date;
-      opportunity.published_date = new Date(temp ? temp: "").getTime();
-      
+      console.log('formatted edit body:', opportunity)
+      let temp = opportunity.published_date
+      opportunity.published_date = new Date(temp ? temp : '').getTime()
 
       let requestOptions = {
-        method: "PUT",
-        headers: { "Content-Type": "application/json" },
+        method: 'PUT',
+        headers: {'Content-Type': 'application/json'},
         body: JSON.stringify(opportunity),
-      };
+      }
 
       let response = await fetch(
         `https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday/news/${idpost}`,
-        requestOptions
-      );
+        requestOptions,
+      )
 
-      let responseJson = await response.json();
+      let responseJson = await response.json()
 
-      let editedOpportunity = responseJson.listOfObjects[0];
-      console.log("edited body:" + editedOpportunity);
+      let editedOpportunity = responseJson.listOfObjects[0]
+      console.log('edited body:' + editedOpportunity)
 
-      return editedOpportunity;
+      return editedOpportunity
     } catch (err) {
-      console.log(err);
+      console.log(err)
     }
-  };
+  }
 
   const handleEditButton = async (opportunity: ScrapedPost) => {
     try {
       //delete opportunity.UID;
       //delete opportunity.date_posted;
-      
 
       // Format any keys of type number to be as type strings since the APIs only accept strings for the request body
-      opportunity.end_date = opportunity.end_date?.toString();
-      opportunity.start_date = opportunity.start_date?.toString();
-      opportunity.deadline = opportunity.deadline?.toString();
-      opportunity.salary = opportunity.salary?.toString();
-      opportunity.fee = opportunity.fee?.toString();
-      opportunity.published_date = opportunity.published_date?.toString();
+      opportunity.end_date = opportunity.end_date?.toString()
+      opportunity.start_date = opportunity.start_date?.toString()
+      opportunity.deadline = opportunity.deadline?.toString()
+      opportunity.salary = opportunity.salary?.toString()
+      opportunity.fee = opportunity.fee?.toString()
+      opportunity.published_date = opportunity.published_date?.toString()
 
-      let editedOpportunity = await editFunction(opportunity);
-      console.log("Edited Op "+ editedOpportunity);
+      let editedOpportunity = await editFunction(opportunity)
+      console.log('Edited Op ' + editedOpportunity)
 
       for (let i = 0; i < rawNewsList.length; i++) {
         if (rawNewsList[i].idposts === editedOpportunity.idposts) {
-          let tempArray = rawNewsList;
-          tempArray[i] = editedOpportunity;
-          setRawNewsList([...tempArray]);
-          break;
+          let tempArray = rawNewsList
+          tempArray[i] = editedOpportunity
+          setRawNewsList([...tempArray])
+          break
         }
       }
 
       showNotification({
-        title: "Edits Applied",
-        message: "Your changes have been applied",
-        color: "green",
-      });
-      setDisplayOpportunityEditModal(false);
+        title: 'Edits Applied',
+        message: 'Your changes have been applied',
+        color: 'green',
+      })
+      setDisplayOpportunityEditModal(false)
     } catch (err) {
-      console.log(err);
+      console.log(err)
       showNotification({
-        title: "Error",
-        message: "There was a problem, please try again later",
-        color: "red",
-      });
+        title: 'Error',
+        message: 'There was a problem, please try again later',
+        color: 'red',
+      })
     }
-  };
-  
+  }
 
   const rows = NewsList?.map((item, index) => (
-    <tr 
+    <tr
       onMouseDown={() => handleMouseDown(index)}
       onMouseEnter={() => handleMouseEnter(index)}
       onMouseUp={handleMouseUp}
-      
-        onClick={() => handleRowSelect(item.idposts ?? -1)}
-        style={{
-          backgroundColor: selectedRows.includes(item.idposts ?? -1) ? "#e6f7ff" : "inherit",
-          cursor: "pointer",
-          
-        }}
+      onClick={() => handleRowSelect(item.idposts ?? -1)}
+      style={{
+        backgroundColor: selectedRows.includes(item.idposts ?? -1)
+          ? '#e6f7ff'
+          : 'inherit',
+        cursor: 'pointer',
+      }}
     >
-      
       <td>
         <Text size="sm" weight={500}>
           {item.title}
@@ -410,17 +411,22 @@
       </td>
       {!mobileScreen && (
         <td>
-          <Text size="sm" color="dimmed" >
+          <Text size="sm" color="dimmed">
             {item.organization}
           </Text>
         </td>
       )}
       {!mobileScreen && (
         <td>
-          <Container style={{ width: 100 }}>
-          <a href={item.link} target='_blank'  color="dimmed" style={{ overflowWrap: 'break-word' }}>
-          {item.link}
-          </a>
+          <Container style={{width: 100}}>
+            <a
+              href={item.link}
+              target="_blank"
+              color="dimmed"
+              style={{overflowWrap: 'break-word'}}
+            >
+              {item.link}
+            </a>
           </Container>
         </td>
       )}
@@ -439,37 +445,30 @@
         </td>
       )}
       <td>
-      <Button 
-        variant="outline" 
-        size="sm" 
-        onClick={() => {
-          setDisplayOpportunityEditModal(true);
-          setCurrentOpportunity(rawNewsList[index]);
-        }}
-      >
-        Edit
-      </Button>
-    </td>      
+        <Button
+          variant="outline"
+          size="sm"
+          onClick={() => {
+            setDisplayOpportunityEditModal(true)
+            setCurrentOpportunity(rawNewsList[index])
+          }}
+        >
+          Edit
+        </Button>
+      </td>
     </tr>
-    
-  ));
+  ))
 
   const loadingRows = [1, 2, 3, 4, 5].map((item, index) => (
     <tr key={index}>
       <td>
-        <Skeleton
-          height={8}
-          width="40%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-        />
+        <Skeleton height={8} width="40%" radius="xl" sx={{margin: '8px 0px'}} />
         {mobileScreen && (
           <Skeleton
             height={6}
             width="100%"
             radius="xl"
-            sx={{ margin: "8px 0px" }}
-            
+            sx={{margin: '8px 0px'}}
           />
         )}
       </td>
@@ -479,67 +478,60 @@
             height={16}
             width="100%"
             radius="xl"
-            sx={{ margin: "8px 0px" }}
-            
+            sx={{margin: '8px 0px'}}
           />
         </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="40%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-        
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="40%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
     </tr>
-  ));
-
-
+  ))
 
   const handleSelectAll = () => {
     if (selectAll) {
       // If all rows are selected, deselect all
-      setSelectedRows([]);
-      setSelectAll(false);
+      setSelectedRows([])
+      setSelectAll(false)
     } else {
       // Otherwise, select all rows
-      const allRowIDs = NewsList.map(item => item.idposts ?? -1);
-      setSelectedRows(allRowIDs);
-      setSelectAll(true);
+      const allRowIDs = NewsList.map((item) => item.idposts ?? -1)
+      setSelectedRows(allRowIDs)
+      setSelectAll(true)
     }
-  };
+  }
   const handleSelectedRowsUpdate = (updatedSelectedRows: number[]) => {
-    setSelectedRows(updatedSelectedRows);
-    
-  };
+    setSelectedRows(updatedSelectedRows)
+  }
   const handleUpdate = () => {
-    setRecall((prevRecall) => prevRecall + 1);
+    setRecall((prevRecall) => prevRecall + 1)
   }
 
   return (
@@ -550,16 +542,16 @@
         onUpdateSelectedRows={handleSelectedRowsUpdate}
         onUpdate={handleUpdate}
         rawData={rawNewsList}
-  />
+      />
 
-<Paper
+      <Paper
         withBorder
         mt={30}
         radius="lg"
         className={cx(classes.userContainer, {
           [classes.noDataContainer]: rawNewsList.length === 0,
         })}
-        sx={{ padding: "40px 20px" }}
+        sx={{padding: '40px 20px'}}
       >
         <LoadingOverlay
           visible={loading}
@@ -568,144 +560,147 @@
           radius="lg"
         />
         {rawNewsList.length === 0 ? (
-        
-          <Text size="lg" weight={500} align="center" style={{ color: '#42A563',
-    fontSize: '36px',
-    textAlign: "center",
-    display: "flex",
-    justifyContent: "center",
-    alignItems: "center",
-    height: "100%",}}>
+          <Text
+            size="lg"
+            weight={500}
+            align="center"
+            style={{
+              color: '#42A563',
+              fontSize: '36px',
+              textAlign: 'center',
+              display: 'flex',
+              justifyContent: 'center',
+              alignItems: 'center',
+              height: '100%',
+            }}
+          >
             No New News
           </Text>
-       
         ) : (
-        <ScrollArea w="100%" h="90%">
-          <Container className={classes.table}>
-            <Table verticalSpacing="sm">
-              <thead
-                className={cx(classes.header, {
-                  [classes.scrolled]: scrolled,
-                })}
-              >
-                <tr>
-                {mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                  {loading ? (
-                    <Skeleton
-                      height={12}
-                      width="40%"
-                      radius="xl"
-                      sx={{ margin: "8px 0px" }}
-                      
-                    />
-                  ) : (
-                    "Item"
-                  )}
-                </th>
-                )}
-                {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="40%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Title"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Organization"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Link"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Published Date"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                       
-                      />
-                    ) : (
-                      "Writer"
-                    )}
-                  </th>
-                  )}
-                  <th></th>
-                </tr>
-              </thead>
-              <tbody>{loading ? loadingRows : rows}</tbody>
-            </Table>
-          </Container>
-        </ScrollArea>
+          <ScrollArea w="100%" h="90%">
+            <Container className={classes.table}>
+              <Table verticalSpacing="sm">
+                <thead
+                  className={cx(classes.header, {
+                    [classes.scrolled]: scrolled,
+                  })}
+                >
+                  <tr>
+                    {mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="40%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Item'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="40%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Title'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Organization'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Link'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Published Date'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Writer'
+                        )}
+                      </th>
+                    )}
+                    <th></th>
+                  </tr>
+                </thead>
+                <tbody>{loading ? loadingRows : rows}</tbody>
+              </Table>
+            </Container>
+          </ScrollArea>
         )}
-        <Container sx={{ display: "flex", justifyContent: "", alignItems: "center", marginTop: "30px"}}>
-          
-        <PaginationNavbarScraper
-          apiEndpointExtension={"news"}
-          numberOfItemsPerPage={10}
-          setListOfObjects={setRawNewsList}
-          searchFilterObject={searchParams}
-          setLoading={setLoading}
-          recall={recall}
-          //curPage = {CurrentPage}
-        />
+        <Container
+          sx={{
+            display: 'flex',
+            justifyContent: '',
+            alignItems: 'center',
+            marginTop: '30px',
+          }}
+        >
+          <PaginationNavbarScraper
+            apiEndpointExtension={'news'}
+            numberOfItemsPerPage={10}
+            setListOfObjects={setRawNewsList}
+            searchFilterObject={searchParams}
+            setLoading={setLoading}
+            recall={recall}
+            //curPage = {CurrentPage}
+          />
         </Container>
-        
-        
       </Paper>
       <Modal
         opened={displayOpportunityEditModal}
         onClose={() => {
-          setDisplayOpportunityEditModal(false);
+          setDisplayOpportunityEditModal(false)
         }}
         fullScreen={smallerScreen}
         size="60%"
@@ -713,14 +708,12 @@
         <FormHeader>Edit Post</FormHeader>
         <ScrapedPostForm
           edit={true}
-          opportunityType={
-            "news"
-          }
+          opportunityType={'news'}
           opportunity={currentOpportunity ? currentOpportunity : undefined}
           displayWinnerInput
           handleSubmission={handleEditButton}
         />
       </Modal>
     </Container>
-  );
+  )
 }
Index: src/components/adminView/ScrapedPostForm.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {\n  TextInputFullWidth,\n  OpportunityFormContainer,\n  OpportunityFormContentContainer,\n  MultipleInputRow,\n  DescriptionInput,\n  EndDateInput,\n  StartEndDatePicker,\n  SalaryInput,\n  SubmitButtonContainer,\n  DropdownCategory,\n  StartTimeInput,\n} from \"../opportunity/OpportunityFormHelper\";\nimport { ScrapedPost } from \"./ScrapedPostHelper\";\nimport { Location } from \"../filter/Location\";\nimport { auth } from \"../../Firebase\";\nimport { useState, useEffect } from \"react\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { Paper, Button, createStyles, Checkbox } from \"@mantine/core\";\nimport { DateRangePickerValue, TimeInput } from \"@mantine/dates\";\nimport { useMediaQuery } from \"@mantine/hooks\";\nimport { useForm } from \"@mantine/form\";\nimport { start } from \"repl\";\n\ninterface OpportunityFormProp {\n  edit: boolean;\n  opportunityType: string;\n  opportunity?: ScrapedPost;\n  displayWinnerInput?: boolean;\n  handleSubmission: (opportunity: ScrapedPost) => void;\n}\n\nconst useStyles = createStyles((theme) => ({\n  noShadow: {\n    boxShadow: \"none\",\n  },\n\n  shadow: {\n    boxShadow:\n      \"0 1px 3px rgb(0 0 0 / 5%), rgb(0 0 0 / 5%) 0px 10px 15px -5px, rgb(0 0 0 / 4%) 0px 7px 7px -5px;\",\n  },\n}));\n\nexport function ScrapedPostForm({\n  edit,\n  opportunityType,\n  opportunity,\n  handleSubmission,\n  displayWinnerInput = false,\n}: OpportunityFormProp) {\n  const [city, setCity] = useState(opportunity?.city ? opportunity.city : \"\");\n  const [state, setState] = useState(\n    opportunity?.state ? opportunity.state : \"\"\n  );\n  const [dateRange, setDateRange] = useState<DateRangePickerValue>([\n    opportunity && opportunity?.start_date\n      ? new Date(opportunity?.start_date)\n      : null,\n    opportunity && opportunity?.end_date\n      ? new Date(opportunity?.end_date)\n      : null,\n  ]);\n  console.log(opportunity);\n  const [startTime, setStartTime] = useState<Date | null>(\n    opportunity?.start_time ? new Date(opportunity?.start_time) : null\n  );\n  const [displayLocationError, setDisplayLocationError] = useState(false);\n  const [displayDateRangeError, setDisplayDateRangeError] = useState(false);\n  const [displayStartTimeError, setDisplayStartTimeError] = useState(false);\n  const [displayLocationInput, setDisplayLocationInput] = useState(true);\n  const [pageLoaded, setPageLoaded] = useState(false);\n  const [userUID, setUserUID] = useState(\"\");\n  \n  const medianScreen = useMediaQuery(\"(max-width: 992px)\");\n  const { classes } = useStyles();\n\n  const getCurrentDate = (time = new Date().valueOf()) => {\n    let tempDate: Date;\n\n    tempDate = new Date(time);\n\n    let day = tempDate.getDate();\n    let month = tempDate.getMonth();\n    let year = tempDate.getFullYear();\n    let currentDate = new Date(year, month, day, 0, 0, 0, 0);\n\n    return currentDate.valueOf();\n  };\n\n  function validateUrl(value: string) {\n    return /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(\n      value\n    );\n  }\n\n  const form = useForm({\n    initialValues: {\n      title: opportunity?.title || \"\",\n      link: opportunity?.link || \"\",\n      organization: opportunity?.organization || \"\",\n      description: opportunity?.description || \"\",\n      date_posted: opportunity?.date_posted\n        ? new Date(opportunity?.date_posted)\n        : new Date(getCurrentDate()),\n      city: city,\n      state: state,\n      published_date: opportunity?.published_date\n      ? new Date(opportunity?.published_date)\n      : new Date(getCurrentDate()),\n      end_date: opportunity?.end_date ? new Date(opportunity?.end_date) : null,\n      salary: +(opportunity?.salary as number) || \"\",\n      job_category: opportunity?.job_category || \"\",\n      job_type: opportunity?.job_type || \"\",\n      winner: opportunity?.winner || \"\",\n      competition_category: opportunity?.competition_category || \"\",\n      address: opportunity?.address || \"\",\n      start_date: opportunity?.start_date\n        ? new Date(opportunity?.start_date)\n        : new Date(getCurrentDate()),\n      start_time: opportunity?.start_time\n        ? new Date(opportunity?.start_time)\n        : null,\n      writer: opportunity?.writer || \"\",\n      \n      deadline: opportunity?.deadline ? new Date(opportunity?.deadline) : null,\n    },\n    validate: {\n      title: (value) =>\n        value.trim()\n          ? value.trim().length <= 100\n            ? null\n            : \"Please shorten the title\"\n          : \"Please give a title\",\n      organization: (value) =>\n        value.trim() ||\n        opportunityType === \"festivals\" ||\n        opportunityType === \"concerts\"\n          ? value.trim().length <= 100\n            ? null\n            : \"Please shorten the organization\"\n          : \"Please give an organization name\",\n      link: (value) =>\n        value.trim() && validateUrl(value.trim())\n          ? value.trim().length <= 250\n            ? null\n            : \"Please shorten the link\"\n          : \"Please give a valid URL link\",\n      description: (value: string) =>{\n        if (opportunityType !== \"news\") {\n          if (value.trim()) {\n            if (value.trim().length) {\n              // Description is not empty, no need for validation message\n              return null;\n            } else {\n              // Description is empty, return validation message\n              return \"Please shorten the description\";\n            }\n          } else {\n            // No description provided, return validation message\n            return \"Please give a description\";\n          }\n        }\n      },\n      end_date: (value: Date | string) => {\n        if (opportunityType !== \"festivals\") {\n          if (value && (value.valueOf() as number) < getCurrentDate()) {\n            return \"Please choose today's or a future date\";\n          } else if (!value) {\n            if (opportunityType !== \"jobs\" && opportunityType !== \"festivals\") {\n              return opportunityType !== \"concerts\"\n                ? \"Please give an application deadline\"\n                : \"Please give a date\";\n            }\n          }\n        }\n\n        return null;\n      },\n      // (value && value.valueOf >= getCurrentDate.valueOf()) ||\n      // opportunityType === \"jobs\"\n      //   ? null\n      //   : \"Please give an end date\",\n      job_category: (value) =>\n        value.trim() || opportunityType !== \"jobs\"\n          ? null\n          : \"Please give the category of job\",\n      competition_category: (value) =>\n        value.trim() || opportunityType !== \"competitions\"\n          ? null\n          : \"Please give the category\",\n      winner: (value) =>\n        value.trim().length <= 100 ? null : \"Please shorten the winner\",\n      address: (value) =>\n        // value.trim() ||\n        // (opportunityType !== \"concerts\" &&\n        //   opportunityType !== \"festivals\" &&\n        //   (city !== \"Remote\" || state !== \"Remote\"))\n        //   ? value.trim().length <= 150\n        //     ? null\n        //     : \"Please shorten the address\"\n        //   : \"Please give an address\",'address'\n        {\n          if (\n            city === \"Remote\" ||\n            state === \"Remote\" ||\n            value.trim() ||\n            (opportunityType !== \"concerts\" && opportunityType !== \"festivals\")\n          ) {\n            if (value.trim().length <= 150) {\n              return null;\n            } else {\n              return \"Please shorten the address\";\n            }\n          } else {\n            return \"Please give an address\";\n          }\n        },\n      // start_date: (value: Date | string | DateRangePickerValue) =>\n      //   value ? null : \"Please give a start date\",\n      \n      deadline: (value: Date | string) => {\n        if (value && (value.valueOf() as number) < getCurrentDate()) {\n          return \"Please choose today's or a future date\";\n        } else if (!value) {\n          if (opportunityType === \"festivals\") {\n            return \"Please give an submission date\";\n          }\n        }\n\n        return null;\n      },\n    },\n  });\n  const essentialOpportunityKey = [\n    \"UID\",\n    \"idposts\",\n    \"title\",\n    \"link\",\n    \"organization\",\n    \"description\",\n    \"date_posted\",\n    \"city\",\n    \"state\",\n    \"end_date\",\n  ];\n  const jobOpportunityKey = [\"salary\", \"job_type\", \"job_category\"];\n  const competitionOpportunityKey = [\"winner\", \"competition_category\"];\n  const concertOpportunityKey = [\"address\", \"start_time\"];\n  const festivalOpportunityKey = [\"start_date\", \"address\", \"deadline\"];\n  const newsOpportunityKey = [\"published_date\", \"writer\"];\n\n\n  // FIXME: When creating the request object, need to make sure that we use keyword\n  // instead of explicitly using title and organization\n  const handleFormSubmission = (values: ScrapedPost) => {\n    console.log(\"these are the values: \", values);\n    if (\n      opportunityType === \"festivals\" &&\n      (!dateRange || !dateRange[0] || !dateRange[1])\n    ) {\n      console.log(\n        \"There is no date range given for a festival, returning out of function\"\n      );\n      return;\n    } else if (\n      opportunityType === \"festivals\" &&\n      ((dateRange[0] && dateRange[0].valueOf() < getCurrentDate()) ||\n        (dateRange[1] && dateRange[1].valueOf() < getCurrentDate()))\n    ) {\n      console.log(\"One of the date in the date range is in the past\");\n      return;\n    }\n\n    if (opportunityType === \"concerts\" && !startTime) {\n      console.log(\"There is no start time given, returning out of function\");\n      return;\n    }\n\n    if (\n      (opportunityType === \"concerts\" || opportunityType === \"festivals\") &&\n      (!city || !state)\n    ) {\n      console.log(\n        \"there is no location that was selected, now returning out of function\"\n      );\n      return;\n    }\n\n    let opportunityKeys: string[] = [...essentialOpportunityKey];\n    if (opportunityType === \"jobs\") {\n      opportunityKeys = essentialOpportunityKey.concat(jobOpportunityKey);\n    } else if (opportunityType === \"competitions\") {\n      opportunityKeys = essentialOpportunityKey.concat(\n        competitionOpportunityKey\n      );\n    } else if (opportunityType === \"concerts\") {\n      opportunityKeys = essentialOpportunityKey.concat(concertOpportunityKey);\n    } else if (opportunityType === \"festivals\") {\n      opportunityKeys = essentialOpportunityKey.concat(festivalOpportunityKey);\n    } else if (opportunityType === \"news\") {\n      opportunityKeys = essentialOpportunityKey.concat(newsOpportunityKey);\n    } \n\n    let req: ScrapedPost = {};\n\n    for (let key in values) {\n      let formattedKey = key as keyof ScrapedPost;\n      if (!opportunityKeys.includes(key)) {\n        continue;\n      } else if (typeof values[formattedKey] === \"string\") {\n        let temp = values[formattedKey] as string;\n        temp = temp.trim();\n        req = { ...req, [formattedKey]: temp };\n      } else {\n        req = { ...req, [formattedKey]: values[formattedKey] };\n      }\n    }\n\n    if (\n      opportunityType === \"festivals\" &&\n      dateRange &&\n      dateRange[0] &&\n      dateRange[1]\n    ) {\n      req.start_date = getCurrentDate(dateRange[0].valueOf());\n      req.end_date = getCurrentDate(dateRange[1].valueOf());\n      req.deadline = getCurrentDate(\n        values.deadline instanceof Date ? values.deadline?.valueOf() : undefined\n      );\n    } else if (opportunityType === \"jobs\" && !req.end_date) {\n      const getSixMonthFromToday = () => {\n        let tempDate: number | Date = getCurrentDate();\n        tempDate = new Date(tempDate);\n        tempDate.setMonth(tempDate.getMonth() + 6);\n        return tempDate.valueOf();\n      };\n      req.end_date = getSixMonthFromToday();\n      console.log(\n        \"getting 6 month from today\",\n        req.end_date,\n        new Date(req.end_date)\n      );\n    } else {\n      req.end_date = getCurrentDate(\n        values.end_date instanceof Date ? values.end_date?.valueOf() : undefined\n      );\n      req.end_date = new Date(req.end_date).setHours(23, 59, 59);\n    }\n\n    if (opportunityType === \"concerts\") {\n      const hours = startTime ? startTime?.getHours() : 23;\n      const mins = startTime ? startTime?.getMinutes() : 59;\n\n      const endDate = new Date(req.end_date);\n      // console.log(\"startTime\", startTime, \"hours\", hours, \"mins\", mins);\n\n      req.end_date = endDate.setHours(hours, mins, 59);\n\n      req.start_time = startTime?.valueOf() ? startTime?.valueOf() : '';\n    }\n\n    req.city = city;\n    req.state = state;\n    req.UID = userUID;\n\n    req.date_posted = getCurrentDate();\n\n    handleSubmission(req);\n  };\n\n  const dateRangeErrorFunction = () => {\n    if (displayDateRangeError) {\n      if (!dateRange || !dateRange[0] || !dateRange[1]) {\n        return \"Please give a date range\";\n      } else if (\n        dateRange[0].valueOf() < getCurrentDate() ||\n        dateRange[1].valueOf() < getCurrentDate()\n      ) {\n        return \"Please make sure that the dates given set to today and/or in the future\";\n      }\n    }\n    return false;\n  };\n\n  useEffect(() => {\n    onAuthStateChanged(auth, (user) => {\n      if (user) {\n        setUserUID(user.uid);\n      }\n    });\n\n    console.log(\"Here is the opportunity passed into the form: \", opportunity);\n    let sal = opportunity?.salary as number;\n    console.log(+sal);\n    console.log(sal);\n  }, []);\n\n  useEffect(() => {\n    console.log(opportunityType);\n\n    if (opportunityType === \"competitions\") {\n      setCity(\"Remote\");\n      setState(\"Remote\");\n    } else if (pageLoaded) {\n      setCity(\"\");\n      setState(\"\");\n    }\n\n    setPageLoaded(true);\n    setDisplayLocationInput(opportunityType !== \"competitions\");\n    setDisplayLocationError(false);\n  }, [opportunityType]);\n\n  useEffect(() => {\n    if (city === \"Remote\" || state === \"Remote\") {\n      form.setFieldValue(\"address\", \"\");\n    }\n  }, [city, state]);\n\n  const smallerScreen = useMediaQuery(\"(max-width: 992px)\");\n\n  return (\n    <OpportunityFormContainer>\n      <Paper\n        shadow=\"sm\"\n        withBorder={!edit}\n        className={edit ? classes.noShadow : classes.shadow}\n        radius=\"lg\"\n        sx={{ padding: smallerScreen ? \"20px\" : \"20px 40px\" }}\n      >\n        <OpportunityFormContentContainer>\n          <form\n            onSubmit={form.onSubmit((values) => handleFormSubmission(values))}\n          >\n            <MultipleInputRow\n              justify=\"space-around\"\n              gap=\"md\"\n              display\n              direction={medianScreen ? \"column\" : \"row\"}\n            >\n              <TextInputFullWidth\n                label=\"Title\"\n                placeholder=\"Title\"\n                display\n                withAsterisk\n                {...form.getInputProps(\"title\")}\n              />\n              <TextInputFullWidth\n                label=\"Organization\"\n                placeholder=\"Organization\"\n                display\n                withAsterisk={\n                  opportunityType !== \"festivals\" &&\n                  opportunityType !== \"concerts\"\n                }\n                {...form.getInputProps(\"organization\")}\n              />\n            </MultipleInputRow>\n            <MultipleInputRow\n              justify=\"space-around\"\n              gap=\"md\"\n              direction={medianScreen ? \"column\" : \"row\"}\n              display={opportunityType === \"jobs\"}\n            >\n              <DropdownCategory\n                label=\"Job type\"\n                allowDeselect\n                clearable\n                placeholder={`Select job type`}\n                display={opportunityType === \"jobs\"}\n                data={[\n                  \"Full-time\",\n                  \"Part-time\",\n                  \"Contract\",\n                  \"Temporary\",\n                  \"Volunteer\",\n                  \"Internship\",\n                ]}\n                {...form.getInputProps(\"job_type\")}\n              />\n              <DropdownCategory\n                label=\"Job Category\"\n                placeholder={`Select job category`}\n                withAsterisk\n                allowDeselect\n                clearable\n                display={opportunityType === \"jobs\"}\n                data={[\n                  { value: \"Faculty\", label: \"Faculty\" },\n                  {\n                    value: \"Pre-K Instruction\",\n                    label: \"Pre-K Instruction\",\n                    group: \"Instruction\",\n                  },\n                  {\n                    value: \"Elementary Instruction\",\n                    label: \"Elementary Instruction\",\n                    group: \"Instruction\",\n                  },\n                  {\n                    value: \"Junior High Instruction\",\n                    label: \"Junior High Instruction\",\n                    group: \"Instruction\",\n                  },\n                  {\n                    value: \"High School Instruction\",\n                    label: \"High School Instruction\",\n                    group: \"Instruction\",\n                  },\n                  {\n                    value: \"Post-Secondary Instruction\",\n                    label: \"Post-Secondary Instruction\",\n                    group: \"Instruction\",\n                  },\n                  {\n                    value: \"Other Instruction\",\n                    label: \"Other Instruction\",\n                    group: \"Instruction\",\n                  },\n                  { value: \"Publishing\", label: \"Publishing\" },\n                  { value: \"Performance\", label: \"Performance\" },\n                  { value: \"Composing\", label: \"Composing\" },\n                  { value: \"Other\", label: \"Other\" },\n                ]}\n                // data={[\n                //   \"Faculty\",\n                //   \"Instruction\",\n                //   \"Publishing\",\n                //   \"Performance\",\n                //   \"Composing\",\n                //   \"Other\",\n                // ]}\n                {...form.getInputProps(\"job_category\")}\n              />\n              <SalaryInput\n                label=\"Salary\"\n                placeholder=\"Enter an amount\"\n                display={opportunityType === \"jobs\"}\n                min={0}\n                icon={<p style={{ color: \"black\" }}>$</p>}\n                parser={(value) => value?.replace(/\\$\\s?|(,*)/g, \"\")}\n                formatter={(value) =>\n                  !Number.isNaN(parseFloat(value ? value : \"\"))\n                    ? `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n                    : \"\"\n                }\n                {...form.getInputProps(\"salary\")}\n              />\n            </MultipleInputRow>\n            <TextInputFullWidth\n              label=\"Address\"\n              placeholder=\"Address\"\n              display={\n                (opportunityType === \"concerts\" ||\n                  opportunityType === \"festivals\") &&\n                (city !== \"Remote\" || state != \"Remote\")\n              }\n              withAsterisk\n              {...form.getInputProps(\"address\")}\n            />\n            <Location\n              city={city}\n              setCity={setCity}\n              state={state}\n              setState={setState}\n              displayError={displayLocationError}\n              setDisplayError={setDisplayLocationError}\n              withAsterisk={\n                opportunityType === \"festivals\" ||\n                opportunityType === \"concerts\"\n              }\n              display={displayLocationInput && opportunityType !== \"news\"}\n            />\n            <StartTimeInput\n              label=\"Start Time\"\n              format=\"12\"\n              withAsterisk\n              clearable\n              display={opportunityType === \"concerts\"}\n              onChange={(e) => {\n                console.log(\"timeinput: \", e);\n                setStartTime(e);\n                setDisplayStartTimeError(false);\n              }}\n              value={startTime}\n              error={\n                displayStartTimeError && !startTime\n                  ? \"Please give a start time\"\n                  : false\n              }\n            />\n            <DropdownCategory\n              label=\"Category\"\n              placeholder={`Select competition category`}\n              withAsterisk\n              display={opportunityType === \"competitions\"}\n              searchable\n              data={[\n                {\n                  value: \"Multiple Categories\",\n                  label: \"Multiple Categories\",\n                },\n                {\n                  value: \"All Woodwind\",\n                  label: \"All Woodwind\",\n                  group: \"Woodwind\",\n                },\n                { value: \"Flute\", label: \"Flute\", group: \"Woodwind\" },\n                { value: \"Folk Flute\", label: \"Folk Flute\", group: \"Woodwind\" },\n                { value: \"Oboe\", label: \"Oboe\", group: \"Woodwind\" },\n                { value: \"Clarinet\", label: \"Clarinet\", group: \"Woodwind\" },\n                { value: \"Bassoon\", label: \"Bassoon\", group: \"Woodwind\" },\n                { value: \"Saxophone\", label: \"Saxophone\", group: \"Woodwind\" },\n                { value: \"Recorder\", label: \"Recorder\", group: \"Woodwind\" },\n                {\n                  value: \"Other Woodwind\",\n                  label: \"Other Woodwind\",\n                  group: \"Woodwind\",\n                },\n\n                { value: \"All Brass\", label: \"All Brass\", group: \"Brass\" },\n                { value: \"French Horn\", label: \"French Horn\", group: \"Brass\" },\n                { value: \"Trumpet\", label: \"Trumpet\", group: \"Brass\" },\n                { value: \"Trombone\", label: \"Trombone\", group: \"Brass\" },\n                { value: \"Tuba\", label: \"Tuba\", group: \"Brass\" },\n                { value: \"Euphonium\", label: \"Euphonium\", group: \"Brass\" },\n                { value: \"Other Brass\", label: \"Other Brass\", group: \"Brass\" },\n\n                {\n                  value: \"All Strings\",\n                  label: \"All Strings\",\n                  group: \"Strings\",\n                },\n                { value: \"Violin\", label: \"Violin\", group: \"Strings\" },\n                {\n                  value: \"Folk Fiddle\",\n                  label: \"Folk Fiddle\",\n                  group: \"Strings\",\n                },\n                { value: \"Viola\", label: \"Viola\", group: \"Strings\" },\n                { value: \"Cello\", label: \"Cello\", group: \"Strings\" },\n                {\n                  value: \"Double Bass\",\n                  label: \"Double Bass\",\n                  group: \"Strings\",\n                },\n                { value: \"Harp\", label: \"Harp\", group: \"Strings\" },\n                { value: \"Guitar\", label: \"Guitar\", group: \"Strings\" },\n                {\n                  value: \"Early Guitar\",\n                  label: \"Early Guitar\",\n                  group: \"Strings\",\n                },\n                { value: \"Lute\", label: \"Lute\", group: \"Strings\" },\n                { value: \"Theorbo\", label: \"Theorbo\", group: \"Strings\" },\n                {\n                  value: \"Other Strings\",\n                  label: \"Other Strings\",\n                  group: \"Strings\",\n                },\n\n                {\n                  value: \"All Keyboard\",\n                  label: \"All Keyboard\",\n                  group: \"Keyboard\",\n                },\n                { value: \"Piano\", label: \"Piano\", group: \"Keyboard\" },\n                {\n                  value: \"Piano Accompaniment\",\n                  label: \"Piano Accompaniment\",\n                  group: \"Keyboard\",\n                },\n                { value: \"Organ\", label: \"Organ\", group: \"Keyboard\" },\n                {\n                  value: \"Harpsichord\",\n                  label: \"Harpsichord\",\n                  group: \"Keyboard\",\n                },\n                { value: \"Accordian\", label: \"Accordian\", group: \"Keyboard\" },\n                {\n                  value: \"Other Keyboard\",\n                  label: \"Other Keyboard\",\n                  group: \"Keyboard\",\n                },\n\n                {\n                  value: \"Percussion\",\n                  label: \"Percussion\",\n                  group: \"Percussion\",\n                },\n                { value: \"Voice\", label: \"Voice\", group: \"Voice\" },\n                {\n                  value: \"All Chamber\",\n                  label: \"All Chamber\",\n                  group: \"Chamber Music\",\n                },\n                {\n                  value: \"Strings Chamber\",\n                  label: \"Strings Chamber\",\n                  group: \"Chamber Music\",\n                },\n                {\n                  value: \"Woodwind Chamber\",\n                  label: \"Woodwind Chamber\",\n                  group: \"Chamber Music\",\n                },\n                {\n                  value: \"Brass Chamber\",\n                  label: \"Brass Chamber\",\n                  group: \"Chamber Music\",\n                },\n                {\n                  value: \"Mixed Chamber Ensemble\",\n                  label: \"Mixed Chamber Ensemble\",\n                  group: \"Chamber Music\",\n                },\n                {\n                  value: \"Vocal Ensemble\",\n                  label: \"Vocal Ensemble\",\n                  group: \"Chamber Music\",\n                },\n                {\n                  value: \"Piano Duo\",\n                  label: \"Piano Duo\",\n                  group: \"Chamber Music\",\n                },\n                {\n                  value: \"Other Chamber\",\n                  label: \"Other Chamber\",\n                  group: \"Chamber Music\",\n                },\n\n                {\n                  value: \"Conductor\",\n                  label: \"Conductor\",\n                  group: \"Music Direction\",\n                },\n                {\n                  value: \"Repetiteur\",\n                  label: \"Repetiteur\",\n                  group: \"Music Direction\",\n                },\n                { value: \"Composer\", label: \"Composer\", group: \"Composition\" },\n                { value: \"Arranger\", label: \"Arranger\", group: \"Composition\" },\n              ]}\n              {...form.getInputProps(\"competition_category\")}\n            />\n            <EndDateInput\n              placeholder=\"Published Date\"\n              label=\"Published Date\"\n              display={opportunityType === \"news\"}\n              withAsterisk={opportunityType === \"news\"}\n              {...form.getInputProps(\"published_date\")}\n            />\n            <EndDateInput\n              placeholder=\"Submission Deadline\"\n              label=\"Submission Deadline\"\n              display={opportunityType === \"festivals\"}\n              withAsterisk={opportunityType === \"festivals\"}\n              {...form.getInputProps(\"deadline\")}\n            />\n            <EndDateInput\n              placeholder={\n                opportunityType !== \"concerts\" ? \"Application Deadline\" : \"Date\"\n              }\n              label={\n                opportunityType !== \"concerts\" ? \"Application Deadline\" : \"Date\"\n              }\n              display={opportunityType !== \"festivals\" && opportunityType !== \"news\"}\n              withAsterisk={opportunityType !== \"jobs\" && opportunityType !== \"news\"}\n              {...form.getInputProps(\"end_date\")}\n            />\n            <StartEndDatePicker\n              placeholder=\"Choose start and end date\"\n              label=\"Date Range\"\n              display={opportunityType === \"festivals\"}\n              withAsterisk\n              value={dateRange}\n              onChange={(e) => {\n                console.log(e);\n                setDateRange(e);\n                setDisplayDateRangeError(false);\n              }}\n              error={dateRangeErrorFunction()}\n              // error=\"this is a test\"\n              // {...form.getInputProps(\"dateRange\")}\n            />\n            <TextInputFullWidth\n              label=\"Link\"\n              placeholder=\"Link\"\n              display\n              withAsterisk\n              {...form.getInputProps(\"link\")}\n            />\n            <TextInputFullWidth\n              label=\"Writer\"\n              placeholder=\"Writer\"\n              display={opportunityType === \"news\"}\n              {...form.getInputProps(\"writer\")}\n            />\n            <DescriptionInput\n              label=\"Description\"\n              placeholder=\"Description\"\n              autosize\n              withAsterisk={opportunityType !== \"news\"}\n              display={opportunityType !== \"news\"}\n              minRows={5}\n              {...form.getInputProps(\"description\")}\n            />\n            <TextInputFullWidth\n              label=\"Winner\"\n              placeholder=\"Give the name of the winner if applicable\"\n              description=\"Leave the field empty if you want to delete the winner's name\"\n              display={displayWinnerInput && opportunityType === \"competitions\"}\n              {...form.getInputProps(\"winner\")}\n            />\n            <SubmitButtonContainer\n              justify=\"center\"\n              sx={{ marginBottom: \"20px\" }}\n            >\n              <Button\n                type=\"submit\"\n                onClick={() => {\n                  if (\n                    opportunityType === \"concerts\" ||\n                    opportunityType === \"festivals\"\n                  ) {\n                    setDisplayLocationError(true);\n                  }\n                  setDisplayDateRangeError(true);\n                  setDisplayStartTimeError(true);\n                  console.log(form.isValid());\n                  console.log(form.isValid(\"title\"));\n                  console.log(form.isValid(\"organization\"));\n                  console.log(form.isValid(\"link\"));\n                  console.log(form.isValid(\"description\"));\n                  console.log(form.isValid(\"end_date\"));\n                  console.log(form.isValid(\"salary\"));\n                  console.log(form.isValid(\"job_category\"));\n                  console.log(form.isValid(\"job_type\"));\n                  console.log(form.isValid(\"job_type\"));\n                  console.log(form.isValid(\"competition_category\"));\n                  console.log(form.isValid(\"address\"));\n\n                  console.log(displayLocationError);\n                  console.log(displayDateRangeError);\n                }}\n              >\n                Submit\n              </Button>\n            </SubmitButtonContainer>\n          </form>\n        </OpportunityFormContentContainer>\n      </Paper>\n    </OpportunityFormContainer>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/adminView/ScrapedPostForm.tsx b/src/components/adminView/ScrapedPostForm.tsx
--- a/src/components/adminView/ScrapedPostForm.tsx	
+++ b/src/components/adminView/ScrapedPostForm.tsx	
@@ -10,36 +10,36 @@
   SubmitButtonContainer,
   DropdownCategory,
   StartTimeInput,
-} from "../opportunity/OpportunityFormHelper";
-import { ScrapedPost } from "./ScrapedPostHelper";
-import { Location } from "../filter/Location";
-import { auth } from "../../Firebase";
-import { useState, useEffect } from "react";
-import { onAuthStateChanged } from "firebase/auth";
-import { Paper, Button, createStyles, Checkbox } from "@mantine/core";
-import { DateRangePickerValue, TimeInput } from "@mantine/dates";
-import { useMediaQuery } from "@mantine/hooks";
-import { useForm } from "@mantine/form";
-import { start } from "repl";
+} from '../opportunity/OpportunityFormHelper'
+import {ScrapedPost} from './ScrapedPostHelper'
+import {Location} from '../filter/Location'
+import {auth} from '../../Firebase'
+import {useState, useEffect} from 'react'
+import {onAuthStateChanged} from 'firebase/auth'
+import {Paper, Button, createStyles, Checkbox} from '@mantine/core'
+import {DateRangePickerValue, TimeInput} from '@mantine/dates'
+import {useMediaQuery} from '@mantine/hooks'
+import {useForm} from '@mantine/form'
+import {start} from 'repl'
 
 interface OpportunityFormProp {
-  edit: boolean;
-  opportunityType: string;
-  opportunity?: ScrapedPost;
-  displayWinnerInput?: boolean;
-  handleSubmission: (opportunity: ScrapedPost) => void;
+  edit: boolean
+  opportunityType: string
+  opportunity?: ScrapedPost
+  displayWinnerInput?: boolean
+  handleSubmission: (opportunity: ScrapedPost) => void
 }
 
 const useStyles = createStyles((theme) => ({
   noShadow: {
-    boxShadow: "none",
+    boxShadow: 'none',
   },
 
   shadow: {
     boxShadow:
-      "0 1px 3px rgb(0 0 0 / 5%), rgb(0 0 0 / 5%) 0px 10px 15px -5px, rgb(0 0 0 / 4%) 0px 7px 7px -5px;",
+      '0 1px 3px rgb(0 0 0 / 5%), rgb(0 0 0 / 5%) 0px 10px 15px -5px, rgb(0 0 0 / 4%) 0px 7px 7px -5px;',
   },
-}));
+}))
 
 export function ScrapedPostForm({
   edit,
@@ -48,10 +48,10 @@
   handleSubmission,
   displayWinnerInput = false,
 }: OpportunityFormProp) {
-  const [city, setCity] = useState(opportunity?.city ? opportunity.city : "");
+  const [city, setCity] = useState(opportunity?.city ? opportunity.city : '')
   const [state, setState] = useState(
-    opportunity?.state ? opportunity.state : ""
-  );
+    opportunity?.state ? opportunity.state : '',
+  )
   const [dateRange, setDateRange] = useState<DateRangePickerValue>([
     opportunity && opportunity?.start_date
       ? new Date(opportunity?.start_date)
@@ -59,69 +59,69 @@
     opportunity && opportunity?.end_date
       ? new Date(opportunity?.end_date)
       : null,
-  ]);
-  console.log(opportunity);
+  ])
+  console.log(opportunity)
   const [startTime, setStartTime] = useState<Date | null>(
-    opportunity?.start_time ? new Date(opportunity?.start_time) : null
-  );
-  const [displayLocationError, setDisplayLocationError] = useState(false);
-  const [displayDateRangeError, setDisplayDateRangeError] = useState(false);
-  const [displayStartTimeError, setDisplayStartTimeError] = useState(false);
-  const [displayLocationInput, setDisplayLocationInput] = useState(true);
-  const [pageLoaded, setPageLoaded] = useState(false);
-  const [userUID, setUserUID] = useState("");
-  
-  const medianScreen = useMediaQuery("(max-width: 992px)");
-  const { classes } = useStyles();
+    opportunity?.start_time ? new Date(opportunity?.start_time) : null,
+  )
+  const [displayLocationError, setDisplayLocationError] = useState(false)
+  const [displayDateRangeError, setDisplayDateRangeError] = useState(false)
+  const [displayStartTimeError, setDisplayStartTimeError] = useState(false)
+  const [displayLocationInput, setDisplayLocationInput] = useState(true)
+  const [pageLoaded, setPageLoaded] = useState(false)
+  const [userUID, setUserUID] = useState('')
+
+  const medianScreen = useMediaQuery('(max-width: 992px)')
+  const {classes} = useStyles()
 
   const getCurrentDate = (time = new Date().valueOf()) => {
-    let tempDate: Date;
+    let tempDate: Date
 
-    tempDate = new Date(time);
+    tempDate = new Date(time)
 
-    let day = tempDate.getDate();
-    let month = tempDate.getMonth();
-    let year = tempDate.getFullYear();
-    let currentDate = new Date(year, month, day, 0, 0, 0, 0);
+    let day = tempDate.getDate()
+    let month = tempDate.getMonth()
+    let year = tempDate.getFullYear()
+    let currentDate = new Date(year, month, day, 0, 0, 0, 0)
 
-    return currentDate.valueOf();
-  };
+    return currentDate.valueOf()
+  }
 
   function validateUrl(value: string) {
     return /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(
-      value
-    );
+      value,
+    )
   }
 
   const form = useForm({
     initialValues: {
-      title: opportunity?.title || "",
-      link: opportunity?.link || "",
-      organization: opportunity?.organization || "",
-      description: opportunity?.description || "",
+      title: opportunity?.title || '',
+      link: opportunity?.link || '',
+      organization: opportunity?.organization || '',
+      description: opportunity?.description || '',
       date_posted: opportunity?.date_posted
         ? new Date(opportunity?.date_posted)
         : new Date(getCurrentDate()),
       city: city,
       state: state,
       published_date: opportunity?.published_date
-      ? new Date(opportunity?.published_date)
-      : new Date(getCurrentDate()),
+        ? new Date(opportunity?.published_date)
+        : new Date(getCurrentDate()),
       end_date: opportunity?.end_date ? new Date(opportunity?.end_date) : null,
-      salary: +(opportunity?.salary as number) || "",
-      job_category: opportunity?.job_category || "",
-      job_type: opportunity?.job_type || "",
-      winner: opportunity?.winner || "",
-      competition_category: opportunity?.competition_category || "",
-      address: opportunity?.address || "",
+      salary: +(opportunity?.salary as number) || '',
+      job_category: opportunity?.job_category || '',
+      job_type: opportunity?.job_type || '',
+      winner: opportunity?.winner || '',
+      competition_category: opportunity?.competition_category || '',
+      address: opportunity?.address || '',
       start_date: opportunity?.start_date
         ? new Date(opportunity?.start_date)
         : new Date(getCurrentDate()),
       start_time: opportunity?.start_time
         ? new Date(opportunity?.start_time)
         : null,
-      writer: opportunity?.writer || "",
-      
+      writer: opportunity?.writer || '',
+
       deadline: opportunity?.deadline ? new Date(opportunity?.deadline) : null,
     },
     validate: {
@@ -129,67 +129,67 @@
         value.trim()
           ? value.trim().length <= 100
             ? null
-            : "Please shorten the title"
-          : "Please give a title",
+            : 'Please shorten the title'
+          : 'Please give a title',
       organization: (value) =>
         value.trim() ||
-        opportunityType === "festivals" ||
-        opportunityType === "concerts"
+        opportunityType === 'festivals' ||
+        opportunityType === 'concerts'
           ? value.trim().length <= 100
             ? null
-            : "Please shorten the organization"
-          : "Please give an organization name",
+            : 'Please shorten the organization'
+          : 'Please give an organization name',
       link: (value) =>
         value.trim() && validateUrl(value.trim())
           ? value.trim().length <= 250
             ? null
-            : "Please shorten the link"
-          : "Please give a valid URL link",
-      description: (value: string) =>{
-        if (opportunityType !== "news") {
+            : 'Please shorten the link'
+          : 'Please give a valid URL link',
+      description: (value: string) => {
+        if (opportunityType !== 'news') {
           if (value.trim()) {
             if (value.trim().length) {
               // Description is not empty, no need for validation message
-              return null;
+              return null
             } else {
               // Description is empty, return validation message
-              return "Please shorten the description";
+              return 'Please shorten the description'
             }
           } else {
             // No description provided, return validation message
-            return "Please give a description";
+            return 'Please give a description'
           }
         }
       },
       end_date: (value: Date | string) => {
-        if (opportunityType !== "festivals") {
+        if (opportunityType !== 'festivals') {
           if (value && (value.valueOf() as number) < getCurrentDate()) {
-            return "Please choose today's or a future date";
+            return "Please choose today's or a future date"
           } else if (!value) {
-            if (opportunityType !== "jobs" && opportunityType !== "festivals") {
-              return opportunityType !== "concerts"
-                ? "Please give an application deadline"
-                : "Please give a date";
+            if (opportunityType !== 'jobs' && opportunityType !== 'festivals') {
+              return opportunityType !== 'concerts'
+                ? 'Please give an application deadline'
+                : 'Please give a date'
             }
           }
         }
 
-        return null;
+        return null
       },
       // (value && value.valueOf >= getCurrentDate.valueOf()) ||
       // opportunityType === "jobs"
       //   ? null
       //   : "Please give an end date",
       job_category: (value) =>
-        value.trim() || opportunityType !== "jobs"
+        value.trim() || opportunityType !== 'jobs'
           ? null
-          : "Please give the category of job",
+          : 'Please give the category of job',
       competition_category: (value) =>
-        value.trim() || opportunityType !== "competitions"
+        value.trim() || opportunityType !== 'competitions'
           ? null
-          : "Please give the category",
+          : 'Please give the category',
       winner: (value) =>
-        value.trim().length <= 100 ? null : "Please shorten the winner",
+        value.trim().length <= 100 ? null : 'Please shorten the winner',
       address: (value) =>
         // value.trim() ||
         // (opportunityType !== "concerts" &&
@@ -201,223 +201,226 @@
         //   : "Please give an address",'address'
         {
           if (
-            city === "Remote" ||
-            state === "Remote" ||
+            city === 'Remote' ||
+            state === 'Remote' ||
             value.trim() ||
-            (opportunityType !== "concerts" && opportunityType !== "festivals")
+            (opportunityType !== 'concerts' && opportunityType !== 'festivals')
           ) {
             if (value.trim().length <= 150) {
-              return null;
+              return null
             } else {
-              return "Please shorten the address";
+              return 'Please shorten the address'
             }
           } else {
-            return "Please give an address";
+            return 'Please give an address'
           }
         },
       // start_date: (value: Date | string | DateRangePickerValue) =>
       //   value ? null : "Please give a start date",
-      
+
       deadline: (value: Date | string) => {
         if (value && (value.valueOf() as number) < getCurrentDate()) {
-          return "Please choose today's or a future date";
+          return "Please choose today's or a future date"
         } else if (!value) {
-          if (opportunityType === "festivals") {
-            return "Please give an submission date";
+          if (opportunityType === 'festivals') {
+            return 'Please give an submission date'
           }
         }
 
-        return null;
+        return null
       },
     },
-  });
+  })
   const essentialOpportunityKey = [
-    "UID",
-    "idposts",
-    "title",
-    "link",
-    "organization",
-    "description",
-    "date_posted",
-    "city",
-    "state",
-    "end_date",
-  ];
-  const jobOpportunityKey = ["salary", "job_type", "job_category"];
-  const competitionOpportunityKey = ["winner", "competition_category"];
-  const concertOpportunityKey = ["address", "start_time"];
-  const festivalOpportunityKey = ["start_date", "address", "deadline"];
-  const newsOpportunityKey = ["published_date", "writer"];
-
+    'UID',
+    'idposts',
+    'title',
+    'link',
+    'organization',
+    'description',
+    'date_posted',
+    'city',
+    'state',
+    'end_date',
+  ]
+  const jobOpportunityKey = ['salary', 'job_type', 'job_category']
+  const competitionOpportunityKey = ['winner', 'competition_category']
+  const concertOpportunityKey = ['address', 'start_time']
+  const festivalOpportunityKey = ['start_date', 'address', 'deadline']
+  const newsOpportunityKey = ['published_date', 'writer']
 
   // FIXME: When creating the request object, need to make sure that we use keyword
   // instead of explicitly using title and organization
   const handleFormSubmission = (values: ScrapedPost) => {
-    console.log("these are the values: ", values);
+    console.log('these are the values: ', values)
     if (
-      opportunityType === "festivals" &&
+      opportunityType === 'festivals' &&
       (!dateRange || !dateRange[0] || !dateRange[1])
     ) {
       console.log(
-        "There is no date range given for a festival, returning out of function"
-      );
-      return;
+        'There is no date range given for a festival, returning out of function',
+      )
+      return
     } else if (
-      opportunityType === "festivals" &&
+      opportunityType === 'festivals' &&
       ((dateRange[0] && dateRange[0].valueOf() < getCurrentDate()) ||
         (dateRange[1] && dateRange[1].valueOf() < getCurrentDate()))
     ) {
-      console.log("One of the date in the date range is in the past");
-      return;
+      console.log('One of the date in the date range is in the past')
+      return
     }
 
-    if (opportunityType === "concerts" && !startTime) {
-      console.log("There is no start time given, returning out of function");
-      return;
+    if (opportunityType === 'concerts' && !startTime) {
+      console.log('There is no start time given, returning out of function')
+      return
     }
 
     if (
-      (opportunityType === "concerts" || opportunityType === "festivals") &&
+      (opportunityType === 'concerts' || opportunityType === 'festivals') &&
       (!city || !state)
     ) {
       console.log(
-        "there is no location that was selected, now returning out of function"
-      );
-      return;
+        'there is no location that was selected, now returning out of function',
+      )
+      return
     }
 
-    let opportunityKeys: string[] = [...essentialOpportunityKey];
-    if (opportunityType === "jobs") {
-      opportunityKeys = essentialOpportunityKey.concat(jobOpportunityKey);
-    } else if (opportunityType === "competitions") {
+    let opportunityKeys: string[] = [...essentialOpportunityKey]
+    if (opportunityType === 'jobs') {
+      opportunityKeys = essentialOpportunityKey.concat(jobOpportunityKey)
+    } else if (opportunityType === 'competitions') {
       opportunityKeys = essentialOpportunityKey.concat(
-        competitionOpportunityKey
-      );
-    } else if (opportunityType === "concerts") {
-      opportunityKeys = essentialOpportunityKey.concat(concertOpportunityKey);
-    } else if (opportunityType === "festivals") {
-      opportunityKeys = essentialOpportunityKey.concat(festivalOpportunityKey);
-    } else if (opportunityType === "news") {
-      opportunityKeys = essentialOpportunityKey.concat(newsOpportunityKey);
-    } 
+        competitionOpportunityKey,
+      )
+    } else if (opportunityType === 'concerts') {
+      opportunityKeys = essentialOpportunityKey.concat(concertOpportunityKey)
+    } else if (opportunityType === 'festivals') {
+      opportunityKeys = essentialOpportunityKey.concat(festivalOpportunityKey)
+    } else if (opportunityType === 'news') {
+      opportunityKeys = essentialOpportunityKey.concat(newsOpportunityKey)
+    }
 
-    let req: ScrapedPost = {};
+    let req: ScrapedPost = {}
 
     for (let key in values) {
-      let formattedKey = key as keyof ScrapedPost;
+      let formattedKey = key as keyof ScrapedPost
       if (!opportunityKeys.includes(key)) {
-        continue;
-      } else if (typeof values[formattedKey] === "string") {
-        let temp = values[formattedKey] as string;
-        temp = temp.trim();
-        req = { ...req, [formattedKey]: temp };
+        continue
+      } else if (typeof values[formattedKey] === 'string') {
+        let temp = values[formattedKey] as string
+        temp = temp.trim()
+        req = {...req, [formattedKey]: temp}
       } else {
-        req = { ...req, [formattedKey]: values[formattedKey] };
+        req = {...req, [formattedKey]: values[formattedKey]}
       }
     }
 
     if (
-      opportunityType === "festivals" &&
+      opportunityType === 'festivals' &&
       dateRange &&
       dateRange[0] &&
       dateRange[1]
     ) {
-      req.start_date = getCurrentDate(dateRange[0].valueOf());
-      req.end_date = getCurrentDate(dateRange[1].valueOf());
+      req.start_date = getCurrentDate(dateRange[0].valueOf())
+      req.end_date = getCurrentDate(dateRange[1].valueOf())
       req.deadline = getCurrentDate(
-        values.deadline instanceof Date ? values.deadline?.valueOf() : undefined
-      );
-    } else if (opportunityType === "jobs" && !req.end_date) {
+        values.deadline instanceof Date
+          ? values.deadline?.valueOf()
+          : undefined,
+      )
+    } else if (opportunityType === 'jobs' && !req.end_date) {
       const getSixMonthFromToday = () => {
-        let tempDate: number | Date = getCurrentDate();
-        tempDate = new Date(tempDate);
-        tempDate.setMonth(tempDate.getMonth() + 6);
-        return tempDate.valueOf();
-      };
-      req.end_date = getSixMonthFromToday();
+        let tempDate: number | Date = getCurrentDate()
+        tempDate = new Date(tempDate)
+        tempDate.setMonth(tempDate.getMonth() + 6)
+        return tempDate.valueOf()
+      }
+      req.end_date = getSixMonthFromToday()
       console.log(
-        "getting 6 month from today",
+        'getting 6 month from today',
         req.end_date,
-        new Date(req.end_date)
-      );
+        new Date(req.end_date),
+      )
     } else {
       req.end_date = getCurrentDate(
-        values.end_date instanceof Date ? values.end_date?.valueOf() : undefined
-      );
-      req.end_date = new Date(req.end_date).setHours(23, 59, 59);
+        values.end_date instanceof Date
+          ? values.end_date?.valueOf()
+          : undefined,
+      )
+      req.end_date = new Date(req.end_date).setHours(23, 59, 59)
     }
 
-    if (opportunityType === "concerts") {
-      const hours = startTime ? startTime?.getHours() : 23;
-      const mins = startTime ? startTime?.getMinutes() : 59;
+    if (opportunityType === 'concerts') {
+      const hours = startTime ? startTime?.getHours() : 23
+      const mins = startTime ? startTime?.getMinutes() : 59
 
-      const endDate = new Date(req.end_date);
+      const endDate = new Date(req.end_date)
       // console.log("startTime", startTime, "hours", hours, "mins", mins);
 
-      req.end_date = endDate.setHours(hours, mins, 59);
+      req.end_date = endDate.setHours(hours, mins, 59)
 
-      req.start_time = startTime?.valueOf() ? startTime?.valueOf() : '';
+      req.start_time = startTime?.valueOf() ? startTime?.valueOf() : ''
     }
 
-    req.city = city;
-    req.state = state;
-    req.UID = userUID;
+    req.city = city
+    req.state = state
+    req.UID = userUID
 
-    req.date_posted = getCurrentDate();
+    req.date_posted = getCurrentDate()
 
-    handleSubmission(req);
-  };
+    handleSubmission(req)
+  }
 
   const dateRangeErrorFunction = () => {
     if (displayDateRangeError) {
       if (!dateRange || !dateRange[0] || !dateRange[1]) {
-        return "Please give a date range";
+        return 'Please give a date range'
       } else if (
         dateRange[0].valueOf() < getCurrentDate() ||
         dateRange[1].valueOf() < getCurrentDate()
       ) {
-        return "Please make sure that the dates given set to today and/or in the future";
+        return 'Please make sure that the dates given set to today and/or in the future'
       }
     }
-    return false;
-  };
+    return false
+  }
 
   useEffect(() => {
     onAuthStateChanged(auth, (user) => {
       if (user) {
-        setUserUID(user.uid);
+        setUserUID(user.uid)
       }
-    });
+    })
 
-    console.log("Here is the opportunity passed into the form: ", opportunity);
-    let sal = opportunity?.salary as number;
-    console.log(+sal);
-    console.log(sal);
-  }, []);
+    console.log('Here is the opportunity passed into the form: ', opportunity)
+    let sal = opportunity?.salary as number
+    console.log(+sal)
+    console.log(sal)
+  }, [])
 
   useEffect(() => {
-    console.log(opportunityType);
+    console.log(opportunityType)
 
-    if (opportunityType === "competitions") {
-      setCity("Remote");
-      setState("Remote");
+    if (opportunityType === 'competitions') {
+      setCity('Remote')
+      setState('Remote')
     } else if (pageLoaded) {
-      setCity("");
-      setState("");
+      setCity('')
+      setState('')
     }
 
-    setPageLoaded(true);
-    setDisplayLocationInput(opportunityType !== "competitions");
-    setDisplayLocationError(false);
-  }, [opportunityType]);
+    setPageLoaded(true)
+    setDisplayLocationInput(opportunityType !== 'competitions')
+    setDisplayLocationError(false)
+  }, [opportunityType])
 
   useEffect(() => {
-    if (city === "Remote" || state === "Remote") {
-      form.setFieldValue("address", "");
+    if (city === 'Remote' || state === 'Remote') {
+      form.setFieldValue('address', '')
     }
-  }, [city, state]);
+  }, [city, state])
 
-  const smallerScreen = useMediaQuery("(max-width: 992px)");
+  const smallerScreen = useMediaQuery('(max-width: 992px)')
 
   return (
     <OpportunityFormContainer>
@@ -426,7 +429,7 @@
         withBorder={!edit}
         className={edit ? classes.noShadow : classes.shadow}
         radius="lg"
-        sx={{ padding: smallerScreen ? "20px" : "20px 40px" }}
+        sx={{padding: smallerScreen ? '20px' : '20px 40px'}}
       >
         <OpportunityFormContentContainer>
           <form
@@ -436,47 +439,47 @@
               justify="space-around"
               gap="md"
               display
-              direction={medianScreen ? "column" : "row"}
+              direction={medianScreen ? 'column' : 'row'}
             >
               <TextInputFullWidth
                 label="Title"
                 placeholder="Title"
                 display
                 withAsterisk
-                {...form.getInputProps("title")}
+                {...form.getInputProps('title')}
               />
               <TextInputFullWidth
                 label="Organization"
                 placeholder="Organization"
                 display
                 withAsterisk={
-                  opportunityType !== "festivals" &&
-                  opportunityType !== "concerts"
+                  opportunityType !== 'festivals' &&
+                  opportunityType !== 'concerts'
                 }
-                {...form.getInputProps("organization")}
+                {...form.getInputProps('organization')}
               />
             </MultipleInputRow>
             <MultipleInputRow
               justify="space-around"
               gap="md"
-              direction={medianScreen ? "column" : "row"}
-              display={opportunityType === "jobs"}
+              direction={medianScreen ? 'column' : 'row'}
+              display={opportunityType === 'jobs'}
             >
               <DropdownCategory
                 label="Job type"
                 allowDeselect
                 clearable
                 placeholder={`Select job type`}
-                display={opportunityType === "jobs"}
+                display={opportunityType === 'jobs'}
                 data={[
-                  "Full-time",
-                  "Part-time",
-                  "Contract",
-                  "Temporary",
-                  "Volunteer",
-                  "Internship",
+                  'Full-time',
+                  'Part-time',
+                  'Contract',
+                  'Temporary',
+                  'Volunteer',
+                  'Internship',
                 ]}
-                {...form.getInputProps("job_type")}
+                {...form.getInputProps('job_type')}
               />
               <DropdownCategory
                 label="Job Category"
@@ -484,43 +487,43 @@
                 withAsterisk
                 allowDeselect
                 clearable
-                display={opportunityType === "jobs"}
+                display={opportunityType === 'jobs'}
                 data={[
-                  { value: "Faculty", label: "Faculty" },
+                  {value: 'Faculty', label: 'Faculty'},
                   {
-                    value: "Pre-K Instruction",
-                    label: "Pre-K Instruction",
-                    group: "Instruction",
+                    value: 'Pre-K Instruction',
+                    label: 'Pre-K Instruction',
+                    group: 'Instruction',
                   },
                   {
-                    value: "Elementary Instruction",
-                    label: "Elementary Instruction",
-                    group: "Instruction",
+                    value: 'Elementary Instruction',
+                    label: 'Elementary Instruction',
+                    group: 'Instruction',
                   },
                   {
-                    value: "Junior High Instruction",
-                    label: "Junior High Instruction",
-                    group: "Instruction",
+                    value: 'Junior High Instruction',
+                    label: 'Junior High Instruction',
+                    group: 'Instruction',
                   },
                   {
-                    value: "High School Instruction",
-                    label: "High School Instruction",
-                    group: "Instruction",
+                    value: 'High School Instruction',
+                    label: 'High School Instruction',
+                    group: 'Instruction',
                   },
                   {
-                    value: "Post-Secondary Instruction",
-                    label: "Post-Secondary Instruction",
-                    group: "Instruction",
+                    value: 'Post-Secondary Instruction',
+                    label: 'Post-Secondary Instruction',
+                    group: 'Instruction',
                   },
                   {
-                    value: "Other Instruction",
-                    label: "Other Instruction",
-                    group: "Instruction",
+                    value: 'Other Instruction',
+                    label: 'Other Instruction',
+                    group: 'Instruction',
                   },
-                  { value: "Publishing", label: "Publishing" },
-                  { value: "Performance", label: "Performance" },
-                  { value: "Composing", label: "Composing" },
-                  { value: "Other", label: "Other" },
+                  {value: 'Publishing', label: 'Publishing'},
+                  {value: 'Performance', label: 'Performance'},
+                  {value: 'Composing', label: 'Composing'},
+                  {value: 'Other', label: 'Other'},
                 ]}
                 // data={[
                 //   "Faculty",
@@ -530,33 +533,33 @@
                 //   "Composing",
                 //   "Other",
                 // ]}
-                {...form.getInputProps("job_category")}
+                {...form.getInputProps('job_category')}
               />
               <SalaryInput
                 label="Salary"
                 placeholder="Enter an amount"
-                display={opportunityType === "jobs"}
+                display={opportunityType === 'jobs'}
                 min={0}
-                icon={<p style={{ color: "black" }}>$</p>}
-                parser={(value) => value?.replace(/\$\s?|(,*)/g, "")}
+                icon={<p style={{color: 'black'}}>$</p>}
+                parser={(value) => value?.replace(/\$\s?|(,*)/g, '')}
                 formatter={(value) =>
-                  !Number.isNaN(parseFloat(value ? value : ""))
-                    ? `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")
-                    : ""
+                  !Number.isNaN(parseFloat(value ? value : ''))
+                    ? `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')
+                    : ''
                 }
-                {...form.getInputProps("salary")}
+                {...form.getInputProps('salary')}
               />
             </MultipleInputRow>
             <TextInputFullWidth
               label="Address"
               placeholder="Address"
               display={
-                (opportunityType === "concerts" ||
-                  opportunityType === "festivals") &&
-                (city !== "Remote" || state != "Remote")
+                (opportunityType === 'concerts' ||
+                  opportunityType === 'festivals') &&
+                (city !== 'Remote' || state != 'Remote')
               }
               withAsterisk
-              {...form.getInputProps("address")}
+              {...form.getInputProps('address')}
             />
             <Location
               city={city}
@@ -566,26 +569,26 @@
               displayError={displayLocationError}
               setDisplayError={setDisplayLocationError}
               withAsterisk={
-                opportunityType === "festivals" ||
-                opportunityType === "concerts"
+                opportunityType === 'festivals' ||
+                opportunityType === 'concerts'
               }
-              display={displayLocationInput && opportunityType !== "news"}
+              display={displayLocationInput && opportunityType !== 'news'}
             />
             <StartTimeInput
               label="Start Time"
               format="12"
               withAsterisk
               clearable
-              display={opportunityType === "concerts"}
+              display={opportunityType === 'concerts'}
               onChange={(e) => {
-                console.log("timeinput: ", e);
-                setStartTime(e);
-                setDisplayStartTimeError(false);
+                console.log('timeinput: ', e)
+                setStartTime(e)
+                setDisplayStartTimeError(false)
               }}
               value={startTime}
               error={
                 displayStartTimeError && !startTime
-                  ? "Please give a start time"
+                  ? 'Please give a start time'
                   : false
               }
             />
@@ -593,193 +596,197 @@
               label="Category"
               placeholder={`Select competition category`}
               withAsterisk
-              display={opportunityType === "competitions"}
+              display={opportunityType === 'competitions'}
               searchable
               data={[
                 {
-                  value: "Multiple Categories",
-                  label: "Multiple Categories",
+                  value: 'Multiple Categories',
+                  label: 'Multiple Categories',
                 },
                 {
-                  value: "All Woodwind",
-                  label: "All Woodwind",
-                  group: "Woodwind",
+                  value: 'All Woodwind',
+                  label: 'All Woodwind',
+                  group: 'Woodwind',
                 },
-                { value: "Flute", label: "Flute", group: "Woodwind" },
-                { value: "Folk Flute", label: "Folk Flute", group: "Woodwind" },
-                { value: "Oboe", label: "Oboe", group: "Woodwind" },
-                { value: "Clarinet", label: "Clarinet", group: "Woodwind" },
-                { value: "Bassoon", label: "Bassoon", group: "Woodwind" },
-                { value: "Saxophone", label: "Saxophone", group: "Woodwind" },
-                { value: "Recorder", label: "Recorder", group: "Woodwind" },
+                {value: 'Flute', label: 'Flute', group: 'Woodwind'},
+                {value: 'Folk Flute', label: 'Folk Flute', group: 'Woodwind'},
+                {value: 'Oboe', label: 'Oboe', group: 'Woodwind'},
+                {value: 'Clarinet', label: 'Clarinet', group: 'Woodwind'},
+                {value: 'Bassoon', label: 'Bassoon', group: 'Woodwind'},
+                {value: 'Saxophone', label: 'Saxophone', group: 'Woodwind'},
+                {value: 'Recorder', label: 'Recorder', group: 'Woodwind'},
                 {
-                  value: "Other Woodwind",
-                  label: "Other Woodwind",
-                  group: "Woodwind",
+                  value: 'Other Woodwind',
+                  label: 'Other Woodwind',
+                  group: 'Woodwind',
                 },
 
-                { value: "All Brass", label: "All Brass", group: "Brass" },
-                { value: "French Horn", label: "French Horn", group: "Brass" },
-                { value: "Trumpet", label: "Trumpet", group: "Brass" },
-                { value: "Trombone", label: "Trombone", group: "Brass" },
-                { value: "Tuba", label: "Tuba", group: "Brass" },
-                { value: "Euphonium", label: "Euphonium", group: "Brass" },
-                { value: "Other Brass", label: "Other Brass", group: "Brass" },
+                {value: 'All Brass', label: 'All Brass', group: 'Brass'},
+                {value: 'French Horn', label: 'French Horn', group: 'Brass'},
+                {value: 'Trumpet', label: 'Trumpet', group: 'Brass'},
+                {value: 'Trombone', label: 'Trombone', group: 'Brass'},
+                {value: 'Tuba', label: 'Tuba', group: 'Brass'},
+                {value: 'Euphonium', label: 'Euphonium', group: 'Brass'},
+                {value: 'Other Brass', label: 'Other Brass', group: 'Brass'},
 
                 {
-                  value: "All Strings",
-                  label: "All Strings",
-                  group: "Strings",
+                  value: 'All Strings',
+                  label: 'All Strings',
+                  group: 'Strings',
                 },
-                { value: "Violin", label: "Violin", group: "Strings" },
+                {value: 'Violin', label: 'Violin', group: 'Strings'},
                 {
-                  value: "Folk Fiddle",
-                  label: "Folk Fiddle",
-                  group: "Strings",
+                  value: 'Folk Fiddle',
+                  label: 'Folk Fiddle',
+                  group: 'Strings',
                 },
-                { value: "Viola", label: "Viola", group: "Strings" },
-                { value: "Cello", label: "Cello", group: "Strings" },
+                {value: 'Viola', label: 'Viola', group: 'Strings'},
+                {value: 'Cello', label: 'Cello', group: 'Strings'},
                 {
-                  value: "Double Bass",
-                  label: "Double Bass",
-                  group: "Strings",
+                  value: 'Double Bass',
+                  label: 'Double Bass',
+                  group: 'Strings',
                 },
-                { value: "Harp", label: "Harp", group: "Strings" },
-                { value: "Guitar", label: "Guitar", group: "Strings" },
+                {value: 'Harp', label: 'Harp', group: 'Strings'},
+                {value: 'Guitar', label: 'Guitar', group: 'Strings'},
                 {
-                  value: "Early Guitar",
-                  label: "Early Guitar",
-                  group: "Strings",
+                  value: 'Early Guitar',
+                  label: 'Early Guitar',
+                  group: 'Strings',
                 },
-                { value: "Lute", label: "Lute", group: "Strings" },
-                { value: "Theorbo", label: "Theorbo", group: "Strings" },
+                {value: 'Lute', label: 'Lute', group: 'Strings'},
+                {value: 'Theorbo', label: 'Theorbo', group: 'Strings'},
                 {
-                  value: "Other Strings",
-                  label: "Other Strings",
-                  group: "Strings",
+                  value: 'Other Strings',
+                  label: 'Other Strings',
+                  group: 'Strings',
                 },
 
                 {
-                  value: "All Keyboard",
-                  label: "All Keyboard",
-                  group: "Keyboard",
+                  value: 'All Keyboard',
+                  label: 'All Keyboard',
+                  group: 'Keyboard',
                 },
-                { value: "Piano", label: "Piano", group: "Keyboard" },
+                {value: 'Piano', label: 'Piano', group: 'Keyboard'},
                 {
-                  value: "Piano Accompaniment",
-                  label: "Piano Accompaniment",
-                  group: "Keyboard",
+                  value: 'Piano Accompaniment',
+                  label: 'Piano Accompaniment',
+                  group: 'Keyboard',
                 },
-                { value: "Organ", label: "Organ", group: "Keyboard" },
+                {value: 'Organ', label: 'Organ', group: 'Keyboard'},
                 {
-                  value: "Harpsichord",
-                  label: "Harpsichord",
-                  group: "Keyboard",
+                  value: 'Harpsichord',
+                  label: 'Harpsichord',
+                  group: 'Keyboard',
                 },
-                { value: "Accordian", label: "Accordian", group: "Keyboard" },
+                {value: 'Accordian', label: 'Accordian', group: 'Keyboard'},
                 {
-                  value: "Other Keyboard",
-                  label: "Other Keyboard",
-                  group: "Keyboard",
+                  value: 'Other Keyboard',
+                  label: 'Other Keyboard',
+                  group: 'Keyboard',
                 },
 
                 {
-                  value: "Percussion",
-                  label: "Percussion",
-                  group: "Percussion",
+                  value: 'Percussion',
+                  label: 'Percussion',
+                  group: 'Percussion',
                 },
-                { value: "Voice", label: "Voice", group: "Voice" },
+                {value: 'Voice', label: 'Voice', group: 'Voice'},
                 {
-                  value: "All Chamber",
-                  label: "All Chamber",
-                  group: "Chamber Music",
+                  value: 'All Chamber',
+                  label: 'All Chamber',
+                  group: 'Chamber Music',
                 },
                 {
-                  value: "Strings Chamber",
-                  label: "Strings Chamber",
-                  group: "Chamber Music",
+                  value: 'Strings Chamber',
+                  label: 'Strings Chamber',
+                  group: 'Chamber Music',
                 },
                 {
-                  value: "Woodwind Chamber",
-                  label: "Woodwind Chamber",
-                  group: "Chamber Music",
+                  value: 'Woodwind Chamber',
+                  label: 'Woodwind Chamber',
+                  group: 'Chamber Music',
                 },
                 {
-                  value: "Brass Chamber",
-                  label: "Brass Chamber",
-                  group: "Chamber Music",
+                  value: 'Brass Chamber',
+                  label: 'Brass Chamber',
+                  group: 'Chamber Music',
                 },
                 {
-                  value: "Mixed Chamber Ensemble",
-                  label: "Mixed Chamber Ensemble",
-                  group: "Chamber Music",
+                  value: 'Mixed Chamber Ensemble',
+                  label: 'Mixed Chamber Ensemble',
+                  group: 'Chamber Music',
                 },
                 {
-                  value: "Vocal Ensemble",
-                  label: "Vocal Ensemble",
-                  group: "Chamber Music",
+                  value: 'Vocal Ensemble',
+                  label: 'Vocal Ensemble',
+                  group: 'Chamber Music',
                 },
                 {
-                  value: "Piano Duo",
-                  label: "Piano Duo",
-                  group: "Chamber Music",
+                  value: 'Piano Duo',
+                  label: 'Piano Duo',
+                  group: 'Chamber Music',
                 },
                 {
-                  value: "Other Chamber",
-                  label: "Other Chamber",
-                  group: "Chamber Music",
+                  value: 'Other Chamber',
+                  label: 'Other Chamber',
+                  group: 'Chamber Music',
                 },
 
                 {
-                  value: "Conductor",
-                  label: "Conductor",
-                  group: "Music Direction",
+                  value: 'Conductor',
+                  label: 'Conductor',
+                  group: 'Music Direction',
                 },
                 {
-                  value: "Repetiteur",
-                  label: "Repetiteur",
-                  group: "Music Direction",
+                  value: 'Repetiteur',
+                  label: 'Repetiteur',
+                  group: 'Music Direction',
                 },
-                { value: "Composer", label: "Composer", group: "Composition" },
-                { value: "Arranger", label: "Arranger", group: "Composition" },
+                {value: 'Composer', label: 'Composer', group: 'Composition'},
+                {value: 'Arranger', label: 'Arranger', group: 'Composition'},
               ]}
-              {...form.getInputProps("competition_category")}
+              {...form.getInputProps('competition_category')}
             />
             <EndDateInput
               placeholder="Published Date"
               label="Published Date"
-              display={opportunityType === "news"}
-              withAsterisk={opportunityType === "news"}
-              {...form.getInputProps("published_date")}
+              display={opportunityType === 'news'}
+              withAsterisk={opportunityType === 'news'}
+              {...form.getInputProps('published_date')}
             />
             <EndDateInput
               placeholder="Submission Deadline"
               label="Submission Deadline"
-              display={opportunityType === "festivals"}
-              withAsterisk={opportunityType === "festivals"}
-              {...form.getInputProps("deadline")}
+              display={opportunityType === 'festivals'}
+              withAsterisk={opportunityType === 'festivals'}
+              {...form.getInputProps('deadline')}
             />
             <EndDateInput
               placeholder={
-                opportunityType !== "concerts" ? "Application Deadline" : "Date"
+                opportunityType !== 'concerts' ? 'Application Deadline' : 'Date'
               }
               label={
-                opportunityType !== "concerts" ? "Application Deadline" : "Date"
+                opportunityType !== 'concerts' ? 'Application Deadline' : 'Date'
+              }
+              display={
+                opportunityType !== 'festivals' && opportunityType !== 'news'
               }
-              display={opportunityType !== "festivals" && opportunityType !== "news"}
-              withAsterisk={opportunityType !== "jobs" && opportunityType !== "news"}
-              {...form.getInputProps("end_date")}
+              withAsterisk={
+                opportunityType !== 'jobs' && opportunityType !== 'news'
+              }
+              {...form.getInputProps('end_date')}
             />
             <StartEndDatePicker
               placeholder="Choose start and end date"
               label="Date Range"
-              display={opportunityType === "festivals"}
+              display={opportunityType === 'festivals'}
               withAsterisk
               value={dateRange}
               onChange={(e) => {
-                console.log(e);
-                setDateRange(e);
-                setDisplayDateRangeError(false);
+                console.log(e)
+                setDateRange(e)
+                setDisplayDateRangeError(false)
               }}
               error={dateRangeErrorFunction()}
               // error="this is a test"
@@ -790,60 +797,57 @@
               placeholder="Link"
               display
               withAsterisk
-              {...form.getInputProps("link")}
+              {...form.getInputProps('link')}
             />
             <TextInputFullWidth
               label="Writer"
               placeholder="Writer"
-              display={opportunityType === "news"}
-              {...form.getInputProps("writer")}
+              display={opportunityType === 'news'}
+              {...form.getInputProps('writer')}
             />
             <DescriptionInput
               label="Description"
               placeholder="Description"
               autosize
-              withAsterisk={opportunityType !== "news"}
-              display={opportunityType !== "news"}
+              withAsterisk={opportunityType !== 'news'}
+              display={opportunityType !== 'news'}
               minRows={5}
-              {...form.getInputProps("description")}
+              {...form.getInputProps('description')}
             />
             <TextInputFullWidth
               label="Winner"
               placeholder="Give the name of the winner if applicable"
               description="Leave the field empty if you want to delete the winner's name"
-              display={displayWinnerInput && opportunityType === "competitions"}
-              {...form.getInputProps("winner")}
+              display={displayWinnerInput && opportunityType === 'competitions'}
+              {...form.getInputProps('winner')}
             />
-            <SubmitButtonContainer
-              justify="center"
-              sx={{ marginBottom: "20px" }}
-            >
+            <SubmitButtonContainer justify="center" sx={{marginBottom: '20px'}}>
               <Button
                 type="submit"
                 onClick={() => {
                   if (
-                    opportunityType === "concerts" ||
-                    opportunityType === "festivals"
+                    opportunityType === 'concerts' ||
+                    opportunityType === 'festivals'
                   ) {
-                    setDisplayLocationError(true);
+                    setDisplayLocationError(true)
                   }
-                  setDisplayDateRangeError(true);
-                  setDisplayStartTimeError(true);
-                  console.log(form.isValid());
-                  console.log(form.isValid("title"));
-                  console.log(form.isValid("organization"));
-                  console.log(form.isValid("link"));
-                  console.log(form.isValid("description"));
-                  console.log(form.isValid("end_date"));
-                  console.log(form.isValid("salary"));
-                  console.log(form.isValid("job_category"));
-                  console.log(form.isValid("job_type"));
-                  console.log(form.isValid("job_type"));
-                  console.log(form.isValid("competition_category"));
-                  console.log(form.isValid("address"));
+                  setDisplayDateRangeError(true)
+                  setDisplayStartTimeError(true)
+                  console.log(form.isValid())
+                  console.log(form.isValid('title'))
+                  console.log(form.isValid('organization'))
+                  console.log(form.isValid('link'))
+                  console.log(form.isValid('description'))
+                  console.log(form.isValid('end_date'))
+                  console.log(form.isValid('salary'))
+                  console.log(form.isValid('job_category'))
+                  console.log(form.isValid('job_type'))
+                  console.log(form.isValid('job_type'))
+                  console.log(form.isValid('competition_category'))
+                  console.log(form.isValid('address'))
 
-                  console.log(displayLocationError);
-                  console.log(displayDateRangeError);
+                  console.log(displayLocationError)
+                  console.log(displayDateRangeError)
                 }}
               >
                 Submit
@@ -853,5 +857,5 @@
         </OpportunityFormContentContainer>
       </Paper>
     </OpportunityFormContainer>
-  );
+  )
 }
Index: src/pages/ForgotPassword.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { useState, useEffect } from \"react\";\nimport { auth } from \"../Firebase\";\nimport {\n  authErrorList,\n  ErrorMessage,\n  defaultErrorMessage,\n} from \"../components/login/profile\";\nimport { sendPasswordResetEmail, onAuthStateChanged } from \"firebase/auth\";\nimport { FirebaseError } from \"@firebase/util\";\nimport {\n  createStyles,\n  Paper,\n  Title,\n  Text,\n  TextInput,\n  Button,\n  Container,\n  Group,\n  Anchor,\n  Center,\n  Box,\n} from \"@mantine/core\";\nimport { IconArrowLeft } from \"@tabler/icons\";\nimport { useNavigate } from \"react-router-dom\";\nimport { motion } from \"framer-motion\";\n\nconst useStyles = createStyles((theme) => ({\n  title: {\n    fontSize: 26,\n    fontWeight: 900,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n  },\n\n  controls: {\n    [theme.fn.smallerThan(\"xs\")]: {\n      flexDirection: \"column-reverse\",\n    },\n  },\n\n  control: {\n    [theme.fn.smallerThan(\"xs\")]: {\n      width: \"100%\",\n      textAlign: \"center\",\n    },\n  },\n}));\n\nexport function ForgotPassword() {\n  const { classes } = useStyles();\n  const navigate = useNavigate();\n  const [email, setEmail] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [validInput, setValidInput] = useState(false);\n\n  const handleEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(e.target.value.trim());\n  };\n\n  const handlePasswordReset = async () => {\n    try {\n      if (email === \"\") {\n        throw \"Please input an email\";\n      }\n\n      await sendPasswordResetEmail(auth, email);\n      setErrorMessage(\"\");\n      setValidInput(true);\n    } catch (err: unknown) {\n      console.log(err);\n      if (err instanceof FirebaseError) {\n        if (authErrorList[err.code as keyof typeof authErrorList]) {\n          setErrorMessage(\n            authErrorList[err.code as keyof typeof authErrorList]\n          );\n        } else if (err.code === \"auth/user-not-found\") {\n          console.log(\"here\");\n          setValidInput(true);\n          setErrorMessage(\"\");\n          return;\n        } else {\n          setErrorMessage(defaultErrorMessage);\n        }\n      } else if (typeof err === \"string\") {\n        if (authErrorList[err as keyof typeof authErrorList]) {\n          setErrorMessage(authErrorList[err as keyof typeof authErrorList]);\n        } else {\n          setErrorMessage(defaultErrorMessage);\n        }\n      } else {\n        setErrorMessage(defaultErrorMessage);\n      }\n      setValidInput(false);\n    }\n  };\n\n  const refreshPage = () => {\n    window.location.reload();\n  };\n\n  useEffect(() => {\n    onAuthStateChanged(auth, (user) => {\n      if (user) {\n        navigate(\"/\");\n      }\n    });\n  });\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Container size={460} my={30}>\n        <Title className={classes.title} align=\"center\">\n          Forgot your password?\n        </Title>\n        <Text color=\"dimmed\" size=\"sm\" align=\"center\">\n          Enter your email to get a reset link\n        </Text>\n\n        <Paper withBorder shadow=\"md\" p={30} radius=\"md\" mt=\"xl\">\n          <TextInput\n            label=\"Your email\"\n            placeholder=\"me@mantine.dev\"\n            required\n            value={email}\n            onChange={handleEmail}\n          />\n          <ErrorMessage error={!!errorMessage}>{errorMessage}</ErrorMessage>\n          {validInput && (\n            <p>\n              If this email is registered, an email has been sent to reset your\n              password. Please make sure to also check your spam box!\n            </p>\n          )}\n          <Group position=\"apart\" mt=\"lg\" className={classes.controls}>\n            <Anchor\n              color=\"dimmed\"\n              size=\"sm\"\n              className={classes.control}\n              onClick={() => navigate(\"/login\")}\n            >\n              <Center inline>\n                <IconArrowLeft size={12} stroke={1.5} />\n                <Box ml={5}>Back to login page</Box>\n              </Center>\n            </Anchor>\n            {validInput && (\n              <Anchor onClick={refreshPage}>Send to a different email?</Anchor>\n            )}\n            <Button\n              className={classes.control}\n              onClick={handlePasswordReset}\n              disabled={validInput}\n            >\n              {validInput ? \"✓\" : \"Reset password\"}\n            </Button>\n          </Group>\n        </Paper>\n      </Container>\n    </motion.div>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/ForgotPassword.tsx b/src/pages/ForgotPassword.tsx
--- a/src/pages/ForgotPassword.tsx	
+++ b/src/pages/ForgotPassword.tsx	
@@ -1,12 +1,12 @@
-import { useState, useEffect } from "react";
-import { auth } from "../Firebase";
+import {useState, useEffect} from 'react'
+import {auth} from '../Firebase'
 import {
   authErrorList,
   ErrorMessage,
   defaultErrorMessage,
-} from "../components/login/profile";
-import { sendPasswordResetEmail, onAuthStateChanged } from "firebase/auth";
-import { FirebaseError } from "@firebase/util";
+} from '../components/login/profile'
+import {sendPasswordResetEmail, onAuthStateChanged} from 'firebase/auth'
+import {FirebaseError} from '@firebase/util'
 import {
   createStyles,
   Paper,
@@ -19,10 +19,10 @@
   Anchor,
   Center,
   Box,
-} from "@mantine/core";
-import { IconArrowLeft } from "@tabler/icons";
-import { useNavigate } from "react-router-dom";
-import { motion } from "framer-motion";
+} from '@mantine/core'
+import {IconArrowLeft} from '@tabler/icons'
+import {useNavigate} from 'react-router-dom'
+import {motion} from 'framer-motion'
 
 const useStyles = createStyles((theme) => ({
   title: {
@@ -32,84 +32,82 @@
   },
 
   controls: {
-    [theme.fn.smallerThan("xs")]: {
-      flexDirection: "column-reverse",
+    [theme.fn.smallerThan('xs')]: {
+      flexDirection: 'column-reverse',
     },
   },
 
   control: {
-    [theme.fn.smallerThan("xs")]: {
-      width: "100%",
-      textAlign: "center",
+    [theme.fn.smallerThan('xs')]: {
+      width: '100%',
+      textAlign: 'center',
     },
   },
-}));
+}))
 
 export function ForgotPassword() {
-  const { classes } = useStyles();
-  const navigate = useNavigate();
-  const [email, setEmail] = useState("");
-  const [errorMessage, setErrorMessage] = useState("");
-  const [validInput, setValidInput] = useState(false);
+  const {classes} = useStyles()
+  const navigate = useNavigate()
+  const [email, setEmail] = useState('')
+  const [errorMessage, setErrorMessage] = useState('')
+  const [validInput, setValidInput] = useState(false)
 
   const handleEmail = (e: React.ChangeEvent<HTMLInputElement>) => {
-    setEmail(e.target.value.trim());
-  };
+    setEmail(e.target.value.trim())
+  }
 
   const handlePasswordReset = async () => {
     try {
-      if (email === "") {
-        throw "Please input an email";
+      if (email === '') {
+        throw 'Please input an email'
       }
 
-      await sendPasswordResetEmail(auth, email);
-      setErrorMessage("");
-      setValidInput(true);
+      await sendPasswordResetEmail(auth, email)
+      setErrorMessage('')
+      setValidInput(true)
     } catch (err: unknown) {
-      console.log(err);
+      console.log(err)
       if (err instanceof FirebaseError) {
         if (authErrorList[err.code as keyof typeof authErrorList]) {
-          setErrorMessage(
-            authErrorList[err.code as keyof typeof authErrorList]
-          );
-        } else if (err.code === "auth/user-not-found") {
-          console.log("here");
-          setValidInput(true);
-          setErrorMessage("");
-          return;
+          setErrorMessage(authErrorList[err.code as keyof typeof authErrorList])
+        } else if (err.code === 'auth/user-not-found') {
+          console.log('here')
+          setValidInput(true)
+          setErrorMessage('')
+          return
         } else {
-          setErrorMessage(defaultErrorMessage);
+          setErrorMessage(defaultErrorMessage)
         }
-      } else if (typeof err === "string") {
+      } else if (typeof err === 'string') {
         if (authErrorList[err as keyof typeof authErrorList]) {
-          setErrorMessage(authErrorList[err as keyof typeof authErrorList]);
+          setErrorMessage(authErrorList[err as keyof typeof authErrorList])
         } else {
-          setErrorMessage(defaultErrorMessage);
+          setErrorMessage(defaultErrorMessage)
         }
       } else {
-        setErrorMessage(defaultErrorMessage);
+        setErrorMessage(defaultErrorMessage)
       }
-      setValidInput(false);
+      setValidInput(false)
     }
-  };
+  }
 
   const refreshPage = () => {
-    window.location.reload();
-  };
+    window.location.reload()
+  }
 
   useEffect(() => {
     onAuthStateChanged(auth, (user) => {
       if (user) {
-        navigate("/");
+        navigate('/')
       }
-    });
-  });
+    })
+  })
 
   return (
     <motion.div
-      initial={{ opacity: 0 }}
-      animate={{ opacity: 1 }}
-      transition={{ duration: 0.3 }}
+      initial={{opacity: 0}}
+      animate={{opacity: 1}}
+      transition={{duration: 0.3}}
     >
       <Container size={460} my={30}>
         <Title className={classes.title} align="center">
@@ -139,7 +137,7 @@
               color="dimmed"
               size="sm"
               className={classes.control}
-              onClick={() => navigate("/login")}
+              onClick={() => navigate('/login')}
             >
               <Center inline>
                 <IconArrowLeft size={12} stroke={1.5} />
@@ -154,11 +152,11 @@
               onClick={handlePasswordReset}
               disabled={validInput}
             >
-              {validInput ? "✓" : "Reset password"}
+              {validInput ? '✓' : 'Reset password'}
             </Button>
           </Group>
         </Paper>
       </Container>
     </motion.div>
-  );
+  )
 }
Index: src/components/adminView/SearchAndFilterScraped.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {\n  ActionIcon,\n  createStyles,\n  Menu,\n  Chip,\n  Flex,\n  Tooltip,\n  Text,\n  Button,\n} from \"@mantine/core\";\nimport { Input } from \"@mantine/core\";\nimport { IconSearch, IconFilter } from \"@tabler/icons\";\nimport React, { useState, useEffect } from \"react\";\nimport { PaginationScrapedSearchObject } from \"../pagination/PaginationNavbarScraper\";\nimport { ScrapedPost } from \"./ScrapedPostHelper\";\nimport { showNotification } from \"@mantine/notifications\";\nimport { openConfirmationModal } from \"../modal/ConfirmationModal\";\nimport { openDenyModal } from \"./modals/DenyModal\";\n\ninterface SearchAndFilterScrapedProp {\n  setSearchObjs: React.Dispatch<React.SetStateAction<PaginationScrapedSearchObject>>;\n  selectedRows: number[];\n  onUpdateSelectedRows: (updatedRows: number[]) => void;\n  onUpdate: () => void;\n  rawData: ScrapedPost[];\n}\n\nconst useStyles = createStyles((theme) => ({\n  container: {\n    padding: \"0px\",\n    marginTop: \"40px\",\n    \n\n    [theme.fn.smallerThan(\"md\")]: {\n      marginLeft: \"15px\",\n      marginRight: \"15px\",\n    },\n  },\n\n  search: {\n    borderColor: \"#939393\",\n\n    flexBasis: \"100%\",\n    marginRight: \"15px\",\n\n    [theme.fn.largerThan(\"md\")]: {\n      flexBasis: \"40%\",\n    },\n  },\n  buttonsContainer: {\n    marginLeft: \"auto\",\n    [theme.fn.smallerThan(\"md\")]: {\n      marginRight: \"15px\",\n    },\n  },\n}));\n\nconst createSearchObj = (\n  setSearchObjs: React.Dispatch<React.SetStateAction<PaginationScrapedSearchObject>>,\n  searchKeyword: string,\n) => {\n  let searchObj: PaginationScrapedSearchObject = {\n    keyword: searchKeyword,\n  };\n\n  console.log(searchObj);\n\n  setSearchObjs(searchObj);\n};\n\n\nexport function SearchAndFilterScraped({\n  setSearchObjs,\n  selectedRows,\n  onUpdateSelectedRows,\n  onUpdate,\n  rawData,\n}: SearchAndFilterScrapedProp) {\n  const { classes } = useStyles();\n  const [adminChecked, setAdminChecked] = useState(false);\n  const [bannedChecked, setBannedChecked] = useState(false);\n  const [regularChecked, setRegularChecked] = useState(false);\n  const [searchKeyword, setSearchKeyword] = useState(\"\");\n  const [selectAll, setSelectAll] = useState(false);\n  const [selectedPages, setselectedPages] = useState<number[]>([]);\n\n  useEffect(() => {\n    createSearchObj(\n      setSearchObjs,\n      searchKeyword,\n    );\n  }, [adminChecked, bannedChecked, regularChecked]);\n\n  const isFilterEnabled = () => {\n    return adminChecked || bannedChecked || regularChecked;\n  };\n\n  const handleEnterKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      console.log(\"loading set to true\");\n      createSearchObj(\n        setSearchObjs,\n        searchKeyword,        \n      );\n    }\n  };\n\n\n  const handleSelectAll = () => {\n    \n    const updatedSelectedRows = [...selectedRows];\n    let page = false;\n    for (let i = 0; i < rawData.length; i++) {\n      if (!updatedSelectedRows.includes(rawData[i]?.idposts ?? -1)) {\n        page = true;\n        break;\n      }\n    }\n  \n    if (page) {\n      // Add all elements from the current page to selectedRows\n      for (let i = 0; i < rawData.length; i++) {\n        if (!updatedSelectedRows.includes(rawData[i]?.idposts ?? -1)) {\n          updatedSelectedRows.push(rawData[i]?.idposts ?? -1);\n        }\n      }\n      // Add currentPage to selectedPages\n      \n      setSelectAll(true);\n    } else {\n      // Remove all elements from the current page from selectedRows\n      for (let i = 0; i < rawData.length; i++) {\n        const postId = rawData[i]?.idposts ?? -1;\n        const index = updatedSelectedRows.indexOf(postId);\n        if (index !== -1) {\n          updatedSelectedRows.splice(index, 1);\n        }\n      }\n      \n      setSelectAll(false);\n    }\n    \n    onUpdateSelectedRows(updatedSelectedRows);\n  };\n  \n\n  \n\n  const handleApprove = async () => {\n    console.log(\"Approved rows:\", selectedRows);\n    // Implement your approval logic here\n    try {\n      for (let i = 0; i < selectedRows.length; i++) {\n        let requestOptions = {\n          method: \"PUT\",\n          headers: { \"Content-Type\": \"application/json\" },\n        };\n  \n        let response = await fetch(\n          `https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday/webscraping/approve/${selectedRows[i]}`,\n          requestOptions\n        );\n        //let responseJson = await response.json();\n\n      }\n\n    \n      showNotification({\n        title: \"Posts Approved\",\n        message: \"Scraped posts have been added to the site\",\n        color: \"green\",\n      });\n\n      onUpdateSelectedRows([]);\n      onUpdate();\n      \n    } catch (err) {\n      console.log(err);\n      showNotification({\n        title: \"Error\",\n        message: \"There was a problem, please try again later\",\n        color: \"red\",\n      });\n    }\n  };\n  useEffect(() => {\n    allSelected();\n  }, [rawData]);\n  \n  function allSelected(){\n    setSelectAll(true);\n    for (let i = 0; i < rawData.length; i++) {\n      if (!selectedRows.includes(rawData[i]?.idposts ?? -1)) {\n        setSelectAll(false);\n        break;\n      }\n    }\n    console.log(selectAll);\n  }\n\n\n  return (\n    <Flex className={classes.container}>\n      <Input\n        icon={\n          <ActionIcon color=\"dark.2\">\n            <IconSearch />\n          </ActionIcon>\n        }\n        placeholder=\"Search\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n          setSearchKeyword(e.target.value)\n        }\n        onKeyDown={handleEnterKeyDown}\n        className={classes.search}\n      />\n      <Button onClick={handleSelectAll} style={{marginLeft: '0.5%'}}  variant=\"outline\">\n          {selectAll ? 'Deselect Page' : 'Select Page'}\n          </Button>\n        <Flex className={classes.buttonsContainer}>\n          <Button onClick={handleApprove} style={{marginRight: '5%'}}>\n            Approve\n          </Button>\n          <Button onClick={() =>\n            openDenyModal(selectedRows, onUpdateSelectedRows)\n            } style={{marginRight: '20%', backgroundColor: \"#fa5252\"}}>\n            Deny\n          </Button>\n        </Flex>\n      </Flex>\n    \n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/adminView/SearchAndFilterScraped.tsx b/src/components/adminView/SearchAndFilterScraped.tsx
--- a/src/components/adminView/SearchAndFilterScraped.tsx	
+++ b/src/components/adminView/SearchAndFilterScraped.tsx	
@@ -7,67 +7,69 @@
   Tooltip,
   Text,
   Button,
-} from "@mantine/core";
-import { Input } from "@mantine/core";
-import { IconSearch, IconFilter } from "@tabler/icons";
-import React, { useState, useEffect } from "react";
-import { PaginationScrapedSearchObject } from "../pagination/PaginationNavbarScraper";
-import { ScrapedPost } from "./ScrapedPostHelper";
-import { showNotification } from "@mantine/notifications";
-import { openConfirmationModal } from "../modal/ConfirmationModal";
-import { openDenyModal } from "./modals/DenyModal";
+} from '@mantine/core'
+import {Input} from '@mantine/core'
+import {IconSearch, IconFilter} from '@tabler/icons'
+import React, {useState, useEffect} from 'react'
+import {PaginationScrapedSearchObject} from '../pagination/PaginationNavbarScraper'
+import {ScrapedPost} from './ScrapedPostHelper'
+import {showNotification} from '@mantine/notifications'
+import {openConfirmationModal} from '../modal/ConfirmationModal'
+import {openDenyModal} from './modals/DenyModal'
 
 interface SearchAndFilterScrapedProp {
-  setSearchObjs: React.Dispatch<React.SetStateAction<PaginationScrapedSearchObject>>;
-  selectedRows: number[];
-  onUpdateSelectedRows: (updatedRows: number[]) => void;
-  onUpdate: () => void;
-  rawData: ScrapedPost[];
+  setSearchObjs: React.Dispatch<
+    React.SetStateAction<PaginationScrapedSearchObject>
+  >
+  selectedRows: number[]
+  onUpdateSelectedRows: (updatedRows: number[]) => void
+  onUpdate: () => void
+  rawData: ScrapedPost[]
 }
 
 const useStyles = createStyles((theme) => ({
   container: {
-    padding: "0px",
-    marginTop: "40px",
-    
+    padding: '0px',
+    marginTop: '40px',
 
-    [theme.fn.smallerThan("md")]: {
-      marginLeft: "15px",
-      marginRight: "15px",
+    [theme.fn.smallerThan('md')]: {
+      marginLeft: '15px',
+      marginRight: '15px',
     },
   },
 
   search: {
-    borderColor: "#939393",
+    borderColor: '#939393',
 
-    flexBasis: "100%",
-    marginRight: "15px",
+    flexBasis: '100%',
+    marginRight: '15px',
 
-    [theme.fn.largerThan("md")]: {
-      flexBasis: "40%",
+    [theme.fn.largerThan('md')]: {
+      flexBasis: '40%',
     },
   },
   buttonsContainer: {
-    marginLeft: "auto",
-    [theme.fn.smallerThan("md")]: {
-      marginRight: "15px",
+    marginLeft: 'auto',
+    [theme.fn.smallerThan('md')]: {
+      marginRight: '15px',
     },
   },
-}));
+}))
 
 const createSearchObj = (
-  setSearchObjs: React.Dispatch<React.SetStateAction<PaginationScrapedSearchObject>>,
+  setSearchObjs: React.Dispatch<
+    React.SetStateAction<PaginationScrapedSearchObject>
+  >,
   searchKeyword: string,
 ) => {
   let searchObj: PaginationScrapedSearchObject = {
     keyword: searchKeyword,
-  };
+  }
 
-  console.log(searchObj);
+  console.log(searchObj)
 
-  setSearchObjs(searchObj);
-};
-
+  setSearchObjs(searchObj)
+}
 
 export function SearchAndFilterScraped({
   setSearchObjs,
@@ -76,128 +78,113 @@
   onUpdate,
   rawData,
 }: SearchAndFilterScrapedProp) {
-  const { classes } = useStyles();
-  const [adminChecked, setAdminChecked] = useState(false);
-  const [bannedChecked, setBannedChecked] = useState(false);
-  const [regularChecked, setRegularChecked] = useState(false);
-  const [searchKeyword, setSearchKeyword] = useState("");
-  const [selectAll, setSelectAll] = useState(false);
-  const [selectedPages, setselectedPages] = useState<number[]>([]);
+  const {classes} = useStyles()
+  const [adminChecked, setAdminChecked] = useState(false)
+  const [bannedChecked, setBannedChecked] = useState(false)
+  const [regularChecked, setRegularChecked] = useState(false)
+  const [searchKeyword, setSearchKeyword] = useState('')
+  const [selectAll, setSelectAll] = useState(false)
+  const [selectedPages, setselectedPages] = useState<number[]>([])
 
   useEffect(() => {
-    createSearchObj(
-      setSearchObjs,
-      searchKeyword,
-    );
-  }, [adminChecked, bannedChecked, regularChecked]);
+    createSearchObj(setSearchObjs, searchKeyword)
+  }, [adminChecked, bannedChecked, regularChecked])
 
   const isFilterEnabled = () => {
-    return adminChecked || bannedChecked || regularChecked;
-  };
+    return adminChecked || bannedChecked || regularChecked
+  }
 
   const handleEnterKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
-    if (e.key === "Enter") {
-      console.log("loading set to true");
-      createSearchObj(
-        setSearchObjs,
-        searchKeyword,        
-      );
+    if (e.key === 'Enter') {
+      console.log('loading set to true')
+      createSearchObj(setSearchObjs, searchKeyword)
     }
-  };
-
+  }
 
   const handleSelectAll = () => {
-    
-    const updatedSelectedRows = [...selectedRows];
-    let page = false;
+    const updatedSelectedRows = [...selectedRows]
+    let page = false
     for (let i = 0; i < rawData.length; i++) {
       if (!updatedSelectedRows.includes(rawData[i]?.idposts ?? -1)) {
-        page = true;
-        break;
+        page = true
+        break
       }
     }
-  
+
     if (page) {
       // Add all elements from the current page to selectedRows
       for (let i = 0; i < rawData.length; i++) {
         if (!updatedSelectedRows.includes(rawData[i]?.idposts ?? -1)) {
-          updatedSelectedRows.push(rawData[i]?.idposts ?? -1);
+          updatedSelectedRows.push(rawData[i]?.idposts ?? -1)
         }
       }
       // Add currentPage to selectedPages
-      
-      setSelectAll(true);
+
+      setSelectAll(true)
     } else {
       // Remove all elements from the current page from selectedRows
       for (let i = 0; i < rawData.length; i++) {
-        const postId = rawData[i]?.idposts ?? -1;
-        const index = updatedSelectedRows.indexOf(postId);
+        const postId = rawData[i]?.idposts ?? -1
+        const index = updatedSelectedRows.indexOf(postId)
         if (index !== -1) {
-          updatedSelectedRows.splice(index, 1);
+          updatedSelectedRows.splice(index, 1)
         }
       }
-      
-      setSelectAll(false);
+
+      setSelectAll(false)
     }
-    
-    onUpdateSelectedRows(updatedSelectedRows);
-  };
-  
 
-  
+    onUpdateSelectedRows(updatedSelectedRows)
+  }
 
   const handleApprove = async () => {
-    console.log("Approved rows:", selectedRows);
+    console.log('Approved rows:', selectedRows)
     // Implement your approval logic here
     try {
       for (let i = 0; i < selectedRows.length; i++) {
         let requestOptions = {
-          method: "PUT",
-          headers: { "Content-Type": "application/json" },
-        };
-  
+          method: 'PUT',
+          headers: {'Content-Type': 'application/json'},
+        }
+
         let response = await fetch(
           `https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday/webscraping/approve/${selectedRows[i]}`,
-          requestOptions
-        );
+          requestOptions,
+        )
         //let responseJson = await response.json();
-
       }
 
-    
       showNotification({
-        title: "Posts Approved",
-        message: "Scraped posts have been added to the site",
-        color: "green",
-      });
+        title: 'Posts Approved',
+        message: 'Scraped posts have been added to the site',
+        color: 'green',
+      })
 
-      onUpdateSelectedRows([]);
-      onUpdate();
-      
+      onUpdateSelectedRows([])
+      onUpdate()
     } catch (err) {
-      console.log(err);
+      console.log(err)
       showNotification({
-        title: "Error",
-        message: "There was a problem, please try again later",
-        color: "red",
-      });
+        title: 'Error',
+        message: 'There was a problem, please try again later',
+        color: 'red',
+      })
     }
-  };
+  }
   useEffect(() => {
-    allSelected();
-  }, [rawData]);
-  
-  function allSelected(){
-    setSelectAll(true);
+    allSelected()
+  }, [rawData])
+
+  function allSelected() {
+    setSelectAll(true)
     for (let i = 0; i < rawData.length; i++) {
       if (!selectedRows.includes(rawData[i]?.idposts ?? -1)) {
-        setSelectAll(false);
-        break;
+        setSelectAll(false)
+        break
       }
     }
-    console.log(selectAll);
+    console.log(selectAll)
   }
-
 
   return (
     <Flex className={classes.container}>
@@ -214,20 +201,24 @@
         onKeyDown={handleEnterKeyDown}
         className={classes.search}
       />
-      <Button onClick={handleSelectAll} style={{marginLeft: '0.5%'}}  variant="outline">
-          {selectAll ? 'Deselect Page' : 'Select Page'}
-          </Button>
-        <Flex className={classes.buttonsContainer}>
-          <Button onClick={handleApprove} style={{marginRight: '5%'}}>
-            Approve
-          </Button>
-          <Button onClick={() =>
-            openDenyModal(selectedRows, onUpdateSelectedRows)
-            } style={{marginRight: '20%', backgroundColor: "#fa5252"}}>
-            Deny
-          </Button>
-        </Flex>
-      </Flex>
-    
-  );
+      <Button
+        onClick={handleSelectAll}
+        style={{marginLeft: '0.5%'}}
+        variant="outline"
+      >
+        {selectAll ? 'Deselect Page' : 'Select Page'}
+      </Button>
+      <Flex className={classes.buttonsContainer}>
+        <Button onClick={handleApprove} style={{marginRight: '5%'}}>
+          Approve
+        </Button>
+        <Button
+          onClick={() => openDenyModal(selectedRows, onUpdateSelectedRows)}
+          style={{marginRight: '20%', backgroundColor: '#fa5252'}}
+        >
+          Deny
+        </Button>
+      </Flex>
+    </Flex>
+  )
 }
Index: src/pages/adminView/RecentPosts.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Opportunity } from \"../../components/opportunity/Opportunity\";\nimport { auth } from \"../../Firebase\";\nimport React, { useState, useEffect } from \"react\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { useNavigate } from \"react-router-dom\";\nimport { motion } from \"framer-motion\";\n\nexport function RecentPosts() {\n  const url = \"https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday\";\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    onAuthStateChanged(auth, async (user) => {\n      if (user) {\n        if (!user.emailVerified) {\n          navigate(\"/verify\");\n        }\n        let response = await fetch(\n          `${url}/users?page_number=1&keyword=${user.email}`\n        );\n\n        let responseJson = await response.json();\n\n        let userData = responseJson.listOfObjects[0];\n\n        if (!userData.is_admin) {\n          navigate(\"/\");\n        }\n      } else {\n        navigate(\"/\");\n      }\n    });\n  }, []);\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Opportunity apiEndpoint=\"posts\" />\n    </motion.div>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/adminView/RecentPosts.tsx b/src/pages/adminView/RecentPosts.tsx
--- a/src/pages/adminView/RecentPosts.tsx	
+++ b/src/pages/adminView/RecentPosts.tsx	
@@ -1,44 +1,44 @@
-import { Opportunity } from "../../components/opportunity/Opportunity";
-import { auth } from "../../Firebase";
-import React, { useState, useEffect } from "react";
-import { onAuthStateChanged } from "firebase/auth";
-import { useNavigate } from "react-router-dom";
-import { motion } from "framer-motion";
+import {Opportunity} from '../../components/opportunity/Opportunity'
+import {auth} from '../../Firebase'
+import React, {useState, useEffect} from 'react'
+import {onAuthStateChanged} from 'firebase/auth'
+import {useNavigate} from 'react-router-dom'
+import {motion} from 'framer-motion'
 
 export function RecentPosts() {
-  const url = "https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday";
-  const navigate = useNavigate();
+  const url = 'https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday'
+  const navigate = useNavigate()
 
   useEffect(() => {
     onAuthStateChanged(auth, async (user) => {
       if (user) {
         if (!user.emailVerified) {
-          navigate("/verify");
+          navigate('/verify')
         }
         let response = await fetch(
-          `${url}/users?page_number=1&keyword=${user.email}`
-        );
+          `${url}/users?page_number=1&keyword=${user.email}`,
+        )
 
-        let responseJson = await response.json();
+        let responseJson = await response.json()
 
-        let userData = responseJson.listOfObjects[0];
+        let userData = responseJson.listOfObjects[0]
 
         if (!userData.is_admin) {
-          navigate("/");
+          navigate('/')
         }
       } else {
-        navigate("/");
+        navigate('/')
       }
-    });
-  }, []);
+    })
+  }, [])
 
   return (
     <motion.div
-      initial={{ opacity: 0 }}
-      animate={{ opacity: 1 }}
-      transition={{ duration: 0.3 }}
+      initial={{opacity: 0}}
+      animate={{opacity: 1}}
+      transition={{duration: 0.3}}
     >
       <Opportunity apiEndpoint="posts" />
     </motion.div>
-  );
+  )
 }
Index: src/pages/adminView/Users.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { useEffect } from \"react\";\nimport { Container, MediaQuery } from \"@mantine/core\";\nimport { auth } from \"../../Firebase\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { footerInfo } from \"../../components/footer/FooterInfo\";\nimport { Footer } from \"../../components/footer/Footer\";\nimport { UsersList } from \"../../components/adminView/UsersList\";\nimport { Image } from \"@mantine/core\";\nimport { useNavigate } from \"react-router-dom\";\nimport { motion } from \"framer-motion\";\nimport { setNavigationProgress } from \"@mantine/nprogress\";\n\nconst greenTriangle = require(\"../../images/GreenTriangle.png\");\nconst blueTriangle = require(\"../../images/BlueTriangle.png\");\n\nexport function Users() {\n  const url = \"https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday\";\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    onAuthStateChanged(auth, async (user) => {\n      if (user) {\n        if (!user.emailVerified) {\n          navigate(\"/verify\");\n        }\n\n        let response = await fetch(\n          `${url}/users?page_number=1&keyword=${user.email}`\n        );\n\n        let responseJson = await response.json();\n\n        let userData = responseJson.listOfObjects[0];\n\n        if (!userData.is_admin) {\n          navigate(\"/\");\n        }\n      } else {\n        navigate(\"/\");\n      }\n    });\n  });\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Container fluid style={{ padding: 0 }}>\n        <MediaQuery smallerThan=\"md\" styles={{ display: \"none\" }}>\n          <Image\n            src={String(blueTriangle)}\n            style={{\n              width: \"24%\",\n              position: \"absolute\",\n              right: \"0px\",\n            }}\n          />\n        </MediaQuery>\n        <MediaQuery smallerThan=\"md\" styles={{ display: \"none\" }}>\n          <Image\n            src={String(greenTriangle)}\n            style={{ width: \"24%\", position: \"absolute\", bottom: \"0px\" }}\n          />\n        </MediaQuery>\n        <UsersList />\n      </Container>\n    </motion.div>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/adminView/Users.tsx b/src/pages/adminView/Users.tsx
--- a/src/pages/adminView/Users.tsx	
+++ b/src/pages/adminView/Users.tsx	
@@ -1,71 +1,71 @@
-import { useEffect } from "react";
-import { Container, MediaQuery } from "@mantine/core";
-import { auth } from "../../Firebase";
-import { onAuthStateChanged } from "firebase/auth";
-import { footerInfo } from "../../components/footer/FooterInfo";
-import { Footer } from "../../components/footer/Footer";
-import { UsersList } from "../../components/adminView/UsersList";
-import { Image } from "@mantine/core";
-import { useNavigate } from "react-router-dom";
-import { motion } from "framer-motion";
-import { setNavigationProgress } from "@mantine/nprogress";
+import {useEffect} from 'react'
+import {Container, MediaQuery} from '@mantine/core'
+import {auth} from '../../Firebase'
+import {onAuthStateChanged} from 'firebase/auth'
+import {footerInfo} from '../../components/footer/FooterInfo'
+import {Footer} from '../../components/footer/Footer'
+import {UsersList} from '../../components/adminView/UsersList'
+import {Image} from '@mantine/core'
+import {useNavigate} from 'react-router-dom'
+import {motion} from 'framer-motion'
+import {setNavigationProgress} from '@mantine/nprogress'
 
-const greenTriangle = require("../../images/GreenTriangle.png");
-const blueTriangle = require("../../images/BlueTriangle.png");
+const greenTriangle = require('../../images/GreenTriangle.png')
+const blueTriangle = require('../../images/BlueTriangle.png')
 
 export function Users() {
-  const url = "https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday";
-  const navigate = useNavigate();
+  const url = 'https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday'
+  const navigate = useNavigate()
 
   useEffect(() => {
     onAuthStateChanged(auth, async (user) => {
       if (user) {
         if (!user.emailVerified) {
-          navigate("/verify");
+          navigate('/verify')
         }
 
         let response = await fetch(
-          `${url}/users?page_number=1&keyword=${user.email}`
-        );
+          `${url}/users?page_number=1&keyword=${user.email}`,
+        )
 
-        let responseJson = await response.json();
+        let responseJson = await response.json()
 
-        let userData = responseJson.listOfObjects[0];
+        let userData = responseJson.listOfObjects[0]
 
         if (!userData.is_admin) {
-          navigate("/");
+          navigate('/')
         }
       } else {
-        navigate("/");
+        navigate('/')
       }
-    });
-  });
+    })
+  })
 
   return (
     <motion.div
-      initial={{ opacity: 0 }}
-      animate={{ opacity: 1 }}
-      transition={{ duration: 0.3 }}
+      initial={{opacity: 0}}
+      animate={{opacity: 1}}
+      transition={{duration: 0.3}}
     >
-      <Container fluid style={{ padding: 0 }}>
-        <MediaQuery smallerThan="md" styles={{ display: "none" }}>
+      <Container fluid style={{padding: 0}}>
+        <MediaQuery smallerThan="md" styles={{display: 'none'}}>
           <Image
             src={String(blueTriangle)}
             style={{
-              width: "24%",
-              position: "absolute",
-              right: "0px",
+              width: '24%',
+              position: 'absolute',
+              right: '0px',
             }}
           />
         </MediaQuery>
-        <MediaQuery smallerThan="md" styles={{ display: "none" }}>
+        <MediaQuery smallerThan="md" styles={{display: 'none'}}>
           <Image
             src={String(greenTriangle)}
-            style={{ width: "24%", position: "absolute", bottom: "0px" }}
+            style={{width: '24%', position: 'absolute', bottom: '0px'}}
           />
         </MediaQuery>
         <UsersList />
       </Container>
     </motion.div>
-  );
+  )
 }
Index: src/components/adminView/ScrapedFestivals.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {\n  Paper,\n  Menu,\n  Badge,\n  Table,\n  Text,\n  ActionIcon,\n  ScrollArea,\n  useMantineTheme,\n  Container,\n  createStyles,\n  LoadingOverlay,\n  Skeleton,\n  Checkbox,\n  Button,\n  Modal,\n} from \"@mantine/core\";\nimport { OpportunityItem } from \"../opportunity/OpportunityHelper\";\nimport { ScrapedPost } from \"./ScrapedPostHelper\";\nimport { FormHeader } from \"../opportunity/CreateOpportunityHelper\";\nimport {\n  IconBan,\n  IconTrash,\n  IconArrowBigUpLine,\n  IconCheck,\n  IconArrowBigDownLine,\n  IconDots,\n} from \"@tabler/icons\";\nimport { auth } from \"../../Firebase\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { showNotification } from \"@mantine/notifications\";\nimport { openAdminModal } from \"./modals/AdminModal\";\nimport { openDeleteModal } from \"./modals/DeleteModal\";\nimport { openBanModal } from \"./modals/BanModal\";\nimport {\n  PaginationNavbar,\n  PaginationSearchObject,\n} from \"../pagination/PaginationNavbar\";\nimport { useMediaQuery } from \"@mantine/hooks\";\nimport { PaginationNavbarScraper } from \"../pagination/PaginationNavbarScraper\";\nimport { SearchAndFilterScraped } from \"./SearchAndFilterScraped\";\nimport { OpportunityForm } from \"../opportunity/OpportunityForm\";\nimport { ScrapedPostForm } from \"./ScrapedPostForm\";\n\ninterface FestivalTableData {\n  UID?: string;\n  idposts?: number;\n  title?: string;\n  description?: string;\n  link?: string;\n  organization?: string;\n  start_date?: string;\n  end_date?: string;\n  deadline?: string;\n  cityState?: string;\n  address?: string;\n  genre?: string;\n}\n\nconst typeColors: Record<string, string> = {\n  regular: \"blue\",\n  admin: \"green\",\n  banned: \"red\",\n};\n\nconst useStyles = createStyles((theme) => ({\n  container: {\n    width: \"90vw\",\n    padding: \"0px\",\n\n    [theme.fn.smallerThan(\"md\")]: {\n      width: \"100%\",\n    },\n  },\n\n  userContainer: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    position: \"relative\",\n    zIndex: 1,\n    borderColor: \"#939393\",\n\n    [theme.fn.smallerThan(\"md\")]: {\n      padding: \"15px\",\n      borderRadius: \"0px\",\n    },\n\n    [theme.fn.largerThan(\"sm\")]: {\n      height: \"90vh\",\n    },\n  },\n\n  noDataContainer: {\n    display: \"flex\",\n    justifyContent: \"center\", // Center horizontally\n  alignItems: \"center\",\n    position: \"relative\",\n    zIndex: 1,\n    borderColor: \"#939393\",\n\n    \n\n    [theme.fn.largerThan(\"sm\")]: {\n      height: \"5vh\",\n    },\n  },\n\n  table: {\n    maxWidth: \"100%\",\n    flexBasis: \"100%\",\n\n    [theme.fn.smallerThan(\"md\")]: {\n      maxHeight: \"90vh\",\n      padding: \"0px\",\n    },\n  },\n\n  bold: {\n    fontWeight: 700,\n  },\n\n  header: {\n    position: \"sticky\",\n    top: 0,\n    backgroundColor:\n      theme.colorScheme === \"dark\" ? theme.colors.dark[7] : theme.white,\n    transition: \"box-shadow 150ms ease\",\n\n    \"&::after\": {\n      content: '\"\"',\n      position: \"absolute\",\n      zIndex: 1,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      borderBottom: `1px solid ${\n        theme.colorScheme === \"dark\"\n          ? theme.colors.dark[3]\n          : theme.colors.gray[2]\n      }`,\n    },\n  },\n\n  scrolled: {\n    // boxShadow: theme.shadows.sm,\n  },\n}));\n\nexport function ScrapedFestivals() {\n  const theme = useMantineTheme();\n  const { classes, cx } = useStyles();\n  const [rawFestivalList, setRawFestivalList] = useState<ScrapedPost[]>([]);\n  const [selectedRows, setSelectedRows] = useState<number[]>([]);\n  const [currentOpportunity, setCurrentOpportunity] =\n    useState<ScrapedPost | null>(null);\n  const [selectAll, setSelectAll] = useState(false);\n  const [displayOpportunityEditModal, setDisplayOpportunityEditModal] =\n    useState(false);\n  const [displayOpportunityInfoModal, setDisplayOpportunityInfoModal] =\n    useState(false);\n  const [FestivalList, setFestivalList] = useState<FestivalTableData[]>([]); // Corrected variable name\n  const [searchParams, setSearchParams] = useState<PaginationSearchObject>({\n    keyword: \"\",\n  });\n  const [CurrentPage, setCurrentPage] = useState(1); // Add CurrentPage state\n  const [scrolled, setScrolled] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [recall, setRecall] = useState(0);\n  const smallerScreen = useMediaQuery(\"(max-width: 992px)\");\n\n  const handleCurrentPageChange = (count: number) => {\n    setCurrentPage(count);\n  };\n\n\n  useEffect(() => {\n    onAuthStateChanged(auth, async (user) => {\n      if (user && user.email) {\n        setSearchParams({ ...searchParams,});\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    convertRawFestivalDataToTableData();\n  }, [rawFestivalList, searchParams]);\n\n  useEffect(() => {\n    console.log(\"loading changed to:\", loading);\n  }, [loading]);\n\n  const convertRawFestivalDataToTableData = () => {\n    let newFestivalList: FestivalTableData[] = [];\n    rawFestivalList?.forEach((FestivalItem) => {\n      const startDate = FestivalItem.start_date ? new Date(FestivalItem.start_date) : null;\n      const endDate = FestivalItem.end_date ? new Date(FestivalItem.end_date) : null;\n      const deadline = FestivalItem.deadline ? new Date(FestivalItem.deadline) : null;\n  \n      let formattedFestivalData: FestivalTableData = {\n        UID: FestivalItem.UID,\n        idposts: FestivalItem.idposts,\n        title: FestivalItem.title,\n        description: FestivalItem.description,\n        link: FestivalItem.link,\n        organization: FestivalItem.organization,\n        start_date: startDate ? `${startDate.toLocaleString('en-us', { month: 'long' })} ${startDate.getDate()}, ${startDate.getFullYear()}` : \"\",\n        end_date: endDate ? `${endDate.toLocaleString('en-us', { month: 'long' })} ${endDate.getDate()}, ${endDate.getFullYear()}` : \"\",\n        deadline: deadline ? `${deadline.toLocaleString('en-us', { month: 'long' })} ${deadline.getDate()}, ${deadline.getFullYear()}` : \"\",\n        cityState: FestivalItem.city + \", \" + FestivalItem.state,\n        address: FestivalItem.address,\n        genre: FestivalItem.genre,\n      };\n      newFestivalList.push(formattedFestivalData);\n    });\n    setFestivalList(newFestivalList);\n  };\n\n  const mobileScreen = useMediaQuery(\"(max-width: 768px)\");\n  const dragState = useRef({\n    isDragging: false,\n    startRowIndex: -1,\n    endRowIndex: -1,\n  });\n  \n  const handleMouseDown = (index: number) => {\n    dragState.current.isDragging = true;\n    dragState.current.startRowIndex = index;\n    dragState.current.endRowIndex = index;\n  };\n  \n  const handleMouseEnter = (index: number) => {\n    if (dragState.current.isDragging) {\n      dragState.current.endRowIndex = index;\n      const start = Math.min(\n        dragState.current.startRowIndex,\n        dragState.current.endRowIndex\n      );\n      const end = Math.max(\n        dragState.current.startRowIndex,\n        dragState.current.endRowIndex\n      );\n      const selectedIDPosts = [...selectedRows];\n      const id = rawFestivalList[dragState.current.startRowIndex]?.idposts ?? -1;\n    if (selectedIDPosts.includes(id)) {\n      // If the startRowIndex is in the selectedRows list,\n      // add new IDPosts to the selectedRows\n      for (let i = start; i <= end; i++) {\n        if (!selectedIDPosts.includes(rawFestivalList[i]?.idposts ?? -1)) {\n          selectedIDPosts.push(rawFestivalList[i]?.idposts ?? -1);\n        }\n      }\n    } else {\n      // Otherwise, remove dragged elements if they are in the list\n      for (let i = start; i <= end; i++) {\n        const indexToRemove = selectedIDPosts.indexOf(rawFestivalList[i]?.idposts ?? -1);\n        if (indexToRemove !== -1) {\n          selectedIDPosts.splice(indexToRemove, 1);\n        }\n      }\n    }\n    setSelectedRows(selectedIDPosts);\n    }\n  };\n  \n  const handleMouseUp = () => {\n    dragState.current.isDragging = false;\n  };\n\n  const handleRowSelect = (idposts: number) => {\n    setSelectedRows(prevSelectedRows => {\n      if (prevSelectedRows.includes(idposts)) {\n        // If UID is already selected, remove it from the selectedRows\n        return prevSelectedRows.filter(row => row !== idposts);\n      } else {\n        // Otherwise, add it to the selectedRows\n        return [...prevSelectedRows, idposts];\n      }\n    });\n  };\n  const editFunction = async (opportunity: ScrapedPost) => {\n    try {\n      let idpost = currentOpportunity?.idposts;\n      // Delete the idposts in the opportunity such that the backend doesn't actually update the idpost column in mySQL.\n      // This shouldn't be necessary to do at all but have it here just in-case the idposts here is some how different from the idposts in the url parameters and/or in mySQL\n      \n      delete opportunity.idposts;\n      delete opportunity.first_name;\n      delete opportunity.last_name;\n      delete opportunity.email;\n      delete opportunity.is_banned;\n      delete opportunity.is_admin;\n      delete opportunity.ban_message;\n\n      for (let key in opportunity) {\n        if (\n          !opportunity[key as keyof typeof opportunity] &&\n          key !== \"winner\" &&\n          key !== \"city\" &&\n          key !== \"state\" &&\n          key !== \"address\"\n        ) {\n          delete opportunity[key as keyof typeof opportunity];\n        }\n      }\n\n      console.log(\"formatted edit body:\", opportunity);\n\n      let requestOptions = {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(opportunity),\n      };\n\n      let response = await fetch(\n        `https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday/festivals/${idpost}`,\n        requestOptions\n      );\n\n      let responseJson = await response.json();\n\n      let editedOpportunity = responseJson.listOfObjects[0];\n\n      return editedOpportunity;\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const handleEditButton = async (opportunity: ScrapedPost) => {\n    try {\n      //delete opportunity.UID;\n      //delete opportunity.date_posted;\n      \n\n      // Format any keys of type number to be as type strings since the APIs only accept strings for the request body\n      opportunity.end_date = opportunity.end_date?.toString();\n      opportunity.start_date = opportunity.start_date?.toString();\n      opportunity.deadline = opportunity.deadline?.toString();\n      opportunity.salary = opportunity.salary?.toString();\n      opportunity.fee = opportunity.fee?.toString();\n\n      let editedOpportunity = await editFunction(opportunity);\n\n      for (let i = 0; i < rawFestivalList.length; i++) {\n        if (rawFestivalList[i].idposts === editedOpportunity.idposts) {\n          let tempArray = rawFestivalList;\n          tempArray[i] = editedOpportunity;\n          setRawFestivalList([...tempArray]);\n          break;\n        }\n      }\n\n      showNotification({\n        title: \"Edits Applied\",\n        message: \"Your changes have been applied\",\n        color: \"green\",\n      });\n      setDisplayOpportunityEditModal(false);\n    } catch (err) {\n      console.log(err);\n      showNotification({\n        title: \"Error\",\n        message: \"There was a problem, please try again later\",\n        color: \"red\",\n      });\n    }\n  };\n  \n\n  const rows = FestivalList?.map((item, index) => (\n    <tr \n      onMouseDown={() => handleMouseDown(index)}\n      onMouseEnter={() => handleMouseEnter(index)}\n      onMouseUp={handleMouseUp}\n      \n        onClick={() => handleRowSelect(item.idposts ?? -1)}\n        style={{\n          backgroundColor: selectedRows.includes(item.idposts ?? -1) ? \"#e6f7ff\" : \"inherit\",\n          cursor: \"pointer\",\n          \n        }}\n    >\n      \n      <td>\n        <Text size=\"sm\" weight={500}>\n          {item.title}\n        </Text>\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.description}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.link}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.organization}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.start_date}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.end_date}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.deadline}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.cityState}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.address}\n          </Text>\n        )}\n        {mobileScreen && (\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.genre}\n          </Text>\n        )}\n      </td>\n      {!mobileScreen && (\n        <td>\n          <Container style={{ width: 400 }}>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.description}\n          </Text>\n          </Container>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\" >\n            {item.organization}\n          </Text>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Container style={{ width: 100 }}>\n          <a href={item.link} target='_blank'  color=\"dimmed\" style={{ overflowWrap: 'break-word' }}>\n          {item.link}\n          </a>\n          </Container>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.start_date}\n          </Text>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.end_date}\n          </Text>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.deadline}\n          </Text>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.cityState}\n          </Text>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.address}\n          </Text>\n        </td>\n      )}\n      {!mobileScreen && (\n        <td>\n          <Text size=\"sm\" color=\"dimmed\">\n            {item.genre}\n          </Text>\n        </td>\n      )}\n      <td>\n      <Button \n        variant=\"outline\" \n        size=\"sm\" \n        onClick={() => {\n          setDisplayOpportunityEditModal(true);\n          setCurrentOpportunity(rawFestivalList[index]);\n        }}\n      >\n        Edit\n      </Button>\n    </td>      \n    </tr>\n    \n  ));\n\n  const loadingRows = [1, 2, 3, 4, 5, 6, 7, 8, 9].map((item, index) => (\n    <tr key={index}>\n      <td>\n        <Skeleton\n          height={8}\n          width=\"40%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n        />\n        {mobileScreen && (\n          <Skeleton\n            height={6}\n            width=\"100%\"\n            radius=\"xl\"\n            sx={{ margin: \"8px 0px\" }}\n            \n          />\n        )}\n      </td>\n      {!mobileScreen && (\n        <td>\n          <Skeleton\n            height={16}\n            width=\"100%\"\n            radius=\"xl\"\n            sx={{ margin: \"8px 0px\" }}\n            \n          />\n        </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"40%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n        \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n      {!mobileScreen && (\n      <td>\n        <Skeleton\n          height={8}\n          width=\"15%\"\n          radius=\"xl\"\n          sx={{ margin: \"8px 0px\" }}\n          \n        />\n      </td>\n      )}\n    </tr>\n  ));\n\n\n\n  const handleSelectAll = () => {\n    if (selectAll) {\n      // If all rows are selected, deselect all\n      setSelectedRows([]);\n      setSelectAll(false);\n    } else {\n      // Otherwise, select all rows\n      const allRowIDs = FestivalList.map(item => item.idposts ?? -1);\n      setSelectedRows(allRowIDs);\n      setSelectAll(true);\n    }\n  };\n  const handleSelectedRowsUpdate = (updatedSelectedRows: number[]) => {\n    setSelectedRows(updatedSelectedRows);\n    \n  };\n\n  const handleUpdate = () => {\n    setRecall((prevRecall) => prevRecall + 1);\n  }\n\n  return (\n    <Container fluid className={classes.container}>\n      <SearchAndFilterScraped\n        setSearchObjs={setSearchParams}\n        selectedRows={selectedRows}\n        onUpdateSelectedRows={handleSelectedRowsUpdate}\n        onUpdate={handleUpdate}\n        rawData={rawFestivalList}\n  />\n\n<Paper\n        withBorder\n        mt={30}\n        radius=\"lg\"\n        className={cx(classes.userContainer, {\n          [classes.noDataContainer]: rawFestivalList.length === 0,\n        })}\n        sx={{ padding: \"40px 20px\" }}\n      >\n        <LoadingOverlay\n          visible={loading}\n          overlayOpacity={0.2}\n          overlayBlur={0.2}\n          radius=\"lg\"\n        />\n        {rawFestivalList.length === 0 ? (\n        \n          <Text size=\"lg\" weight={500} align=\"center\" style={{ color: '#42A563',\n    fontSize: '36px',\n    textAlign: \"center\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"100%\",}}>\n            No New Festivals\n          </Text>\n       \n        ) : (\n        <ScrollArea w=\"100%\" h=\"90%\">\n          <Container className={classes.table}>\n            <Table verticalSpacing=\"sm\">\n              <thead\n                className={cx(classes.header, {\n                  [classes.scrolled]: scrolled,\n                })}\n              >\n                <tr>\n                  \n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"40%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Title\"\n                    )}\n                  </th>\n                  {!mobileScreen && (\n                    <th style={{textAlign: \"center\"}}>\n                      {loading ? (\n                        <Skeleton\n                          height={12}\n                          width=\"50%\"\n                          radius=\"xl\"\n                          sx={{ margin: \"8px 0px\" }}\n                          \n                        />\n                      ) : (\n                        \"Description\"\n                      )}\n                    </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Organization\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Link\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Start Date\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                       \n                      />\n                    ) : (\n                      \"End Date\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Deadline\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"City/State\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Address\"\n                    )}\n                  </th>\n                  )}\n                  {!mobileScreen && (\n                  <th style={{textAlign: \"center\"}}>\n                    {loading ? (\n                      <Skeleton\n                        height={12}\n                        width=\"10%\"\n                        radius=\"xl\"\n                        sx={{ margin: \"8px 0px\" }}\n                        \n                      />\n                    ) : (\n                      \"Genre\"\n                    )}\n                  </th>\n                  )}\n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>{loading ? loadingRows : rows}</tbody>\n            </Table>\n          </Container>\n        </ScrollArea>\n)}\n        {\n          <Container sx={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", marginTop: \"30px\" }}>\n          <PaginationNavbarScraper\n            apiEndpointExtension={\"festivals\"}\n            numberOfItemsPerPage={10}\n            setListOfObjects={setRawFestivalList}\n            searchFilterObject={searchParams}\n            setLoading={setLoading}\n            recall={recall}\n            //curPage = {CurrentPage}\n          />\n          \n          </Container>\n        }\n      </Paper>\n      <Modal\n        opened={displayOpportunityEditModal}\n        onClose={() => {\n          setDisplayOpportunityEditModal(false);\n        }}\n        fullScreen={smallerScreen}\n        size=\"60%\"\n      >\n        <FormHeader>Edit Post</FormHeader>\n        <ScrapedPostForm\n          edit={true}\n          opportunityType={\n            \"festivals\"\n          }\n          opportunity={currentOpportunity ? currentOpportunity : undefined}\n          displayWinnerInput\n          handleSubmission={handleEditButton}\n        />\n      </Modal>\n    </Container>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/adminView/ScrapedFestivals.tsx b/src/components/adminView/ScrapedFestivals.tsx
--- a/src/components/adminView/ScrapedFestivals.tsx	
+++ b/src/components/adminView/ScrapedFestivals.tsx	
@@ -14,10 +14,10 @@
   Checkbox,
   Button,
   Modal,
-} from "@mantine/core";
-import { OpportunityItem } from "../opportunity/OpportunityHelper";
-import { ScrapedPost } from "./ScrapedPostHelper";
-import { FormHeader } from "../opportunity/CreateOpportunityHelper";
+} from '@mantine/core'
+import {OpportunityItem} from '../opportunity/OpportunityHelper'
+import {ScrapedPost} from './ScrapedPostHelper'
+import {FormHeader} from '../opportunity/CreateOpportunityHelper'
 import {
   IconBan,
   IconTrash,
@@ -25,94 +25,92 @@
   IconCheck,
   IconArrowBigDownLine,
   IconDots,
-} from "@tabler/icons";
-import { auth } from "../../Firebase";
-import { onAuthStateChanged } from "firebase/auth";
-import { useEffect, useState, useRef } from "react";
-import { showNotification } from "@mantine/notifications";
-import { openAdminModal } from "./modals/AdminModal";
-import { openDeleteModal } from "./modals/DeleteModal";
-import { openBanModal } from "./modals/BanModal";
+} from '@tabler/icons'
+import {auth} from '../../Firebase'
+import {onAuthStateChanged} from 'firebase/auth'
+import {useEffect, useState, useRef} from 'react'
+import {showNotification} from '@mantine/notifications'
+import {openAdminModal} from './modals/AdminModal'
+import {openDeleteModal} from './modals/DeleteModal'
+import {openBanModal} from './modals/BanModal'
 import {
   PaginationNavbar,
   PaginationSearchObject,
-} from "../pagination/PaginationNavbar";
-import { useMediaQuery } from "@mantine/hooks";
-import { PaginationNavbarScraper } from "../pagination/PaginationNavbarScraper";
-import { SearchAndFilterScraped } from "./SearchAndFilterScraped";
-import { OpportunityForm } from "../opportunity/OpportunityForm";
-import { ScrapedPostForm } from "./ScrapedPostForm";
+} from '../pagination/PaginationNavbar'
+import {useMediaQuery} from '@mantine/hooks'
+import {PaginationNavbarScraper} from '../pagination/PaginationNavbarScraper'
+import {SearchAndFilterScraped} from './SearchAndFilterScraped'
+import {OpportunityForm} from '../opportunity/OpportunityForm'
+import {ScrapedPostForm} from './ScrapedPostForm'
 
 interface FestivalTableData {
-  UID?: string;
-  idposts?: number;
-  title?: string;
-  description?: string;
-  link?: string;
-  organization?: string;
-  start_date?: string;
-  end_date?: string;
-  deadline?: string;
-  cityState?: string;
-  address?: string;
-  genre?: string;
+  UID?: string
+  idposts?: number
+  title?: string
+  description?: string
+  link?: string
+  organization?: string
+  start_date?: string
+  end_date?: string
+  deadline?: string
+  cityState?: string
+  address?: string
+  genre?: string
 }
 
 const typeColors: Record<string, string> = {
-  regular: "blue",
-  admin: "green",
-  banned: "red",
-};
+  regular: 'blue',
+  admin: 'green',
+  banned: 'red',
+}
 
 const useStyles = createStyles((theme) => ({
   container: {
-    width: "90vw",
-    padding: "0px",
+    width: '90vw',
+    padding: '0px',
 
-    [theme.fn.smallerThan("md")]: {
-      width: "100%",
+    [theme.fn.smallerThan('md')]: {
+      width: '100%',
     },
   },
 
   userContainer: {
-    display: "flex",
-    flexWrap: "wrap",
-    position: "relative",
+    display: 'flex',
+    flexWrap: 'wrap',
+    position: 'relative',
     zIndex: 1,
-    borderColor: "#939393",
+    borderColor: '#939393',
 
-    [theme.fn.smallerThan("md")]: {
-      padding: "15px",
-      borderRadius: "0px",
+    [theme.fn.smallerThan('md')]: {
+      padding: '15px',
+      borderRadius: '0px',
     },
 
-    [theme.fn.largerThan("sm")]: {
-      height: "90vh",
+    [theme.fn.largerThan('sm')]: {
+      height: '90vh',
     },
   },
 
   noDataContainer: {
-    display: "flex",
-    justifyContent: "center", // Center horizontally
-  alignItems: "center",
-    position: "relative",
+    display: 'flex',
+    justifyContent: 'center', // Center horizontally
+    alignItems: 'center',
+    position: 'relative',
     zIndex: 1,
-    borderColor: "#939393",
+    borderColor: '#939393',
 
-    
-
-    [theme.fn.largerThan("sm")]: {
-      height: "5vh",
+    [theme.fn.largerThan('sm')]: {
+      height: '5vh',
     },
   },
 
   table: {
-    maxWidth: "100%",
-    flexBasis: "100%",
+    maxWidth: '100%',
+    flexBasis: '100%',
 
-    [theme.fn.smallerThan("md")]: {
-      maxHeight: "90vh",
-      padding: "0px",
+    [theme.fn.smallerThan('md')]: {
+      maxHeight: '90vh',
+      padding: '0px',
     },
   },
 
@@ -121,21 +119,21 @@
   },
 
   header: {
-    position: "sticky",
+    position: 'sticky',
     top: 0,
     backgroundColor:
-      theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white,
-    transition: "box-shadow 150ms ease",
+      theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,
+    transition: 'box-shadow 150ms ease',
 
-    "&::after": {
+    '&::after': {
       content: '""',
-      position: "absolute",
+      position: 'absolute',
       zIndex: 1,
       left: 0,
       right: 0,
       bottom: 0,
       borderBottom: `1px solid ${
-        theme.colorScheme === "dark"
+        theme.colorScheme === 'dark'
           ? theme.colors.dark[3]
           : theme.colors.gray[2]
       }`,
@@ -145,58 +143,63 @@
   scrolled: {
     // boxShadow: theme.shadows.sm,
   },
-}));
+}))
 
 export function ScrapedFestivals() {
-  const theme = useMantineTheme();
-  const { classes, cx } = useStyles();
-  const [rawFestivalList, setRawFestivalList] = useState<ScrapedPost[]>([]);
-  const [selectedRows, setSelectedRows] = useState<number[]>([]);
+  const theme = useMantineTheme()
+  const {classes, cx} = useStyles()
+  const [rawFestivalList, setRawFestivalList] = useState<ScrapedPost[]>([])
+  const [selectedRows, setSelectedRows] = useState<number[]>([])
   const [currentOpportunity, setCurrentOpportunity] =
-    useState<ScrapedPost | null>(null);
-  const [selectAll, setSelectAll] = useState(false);
+    useState<ScrapedPost | null>(null)
+  const [selectAll, setSelectAll] = useState(false)
   const [displayOpportunityEditModal, setDisplayOpportunityEditModal] =
-    useState(false);
+    useState(false)
   const [displayOpportunityInfoModal, setDisplayOpportunityInfoModal] =
-    useState(false);
-  const [FestivalList, setFestivalList] = useState<FestivalTableData[]>([]); // Corrected variable name
+    useState(false)
+  const [FestivalList, setFestivalList] = useState<FestivalTableData[]>([]) // Corrected variable name
   const [searchParams, setSearchParams] = useState<PaginationSearchObject>({
-    keyword: "",
-  });
-  const [CurrentPage, setCurrentPage] = useState(1); // Add CurrentPage state
-  const [scrolled, setScrolled] = useState(false);
-  const [loading, setLoading] = useState(true);
-  const [recall, setRecall] = useState(0);
-  const smallerScreen = useMediaQuery("(max-width: 992px)");
+    keyword: '',
+  })
+  const [CurrentPage, setCurrentPage] = useState(1) // Add CurrentPage state
+  const [scrolled, setScrolled] = useState(false)
+  const [loading, setLoading] = useState(true)
+  const [recall, setRecall] = useState(0)
+  const smallerScreen = useMediaQuery('(max-width: 992px)')
 
   const handleCurrentPageChange = (count: number) => {
-    setCurrentPage(count);
-  };
-
+    setCurrentPage(count)
+  }
 
   useEffect(() => {
     onAuthStateChanged(auth, async (user) => {
       if (user && user.email) {
-        setSearchParams({ ...searchParams,});
+        setSearchParams({...searchParams})
       }
-    });
-  }, []);
+    })
+  }, [])
 
   useEffect(() => {
-    convertRawFestivalDataToTableData();
-  }, [rawFestivalList, searchParams]);
+    convertRawFestivalDataToTableData()
+  }, [rawFestivalList, searchParams])
 
   useEffect(() => {
-    console.log("loading changed to:", loading);
-  }, [loading]);
+    console.log('loading changed to:', loading)
+  }, [loading])
 
   const convertRawFestivalDataToTableData = () => {
-    let newFestivalList: FestivalTableData[] = [];
+    let newFestivalList: FestivalTableData[] = []
     rawFestivalList?.forEach((FestivalItem) => {
-      const startDate = FestivalItem.start_date ? new Date(FestivalItem.start_date) : null;
-      const endDate = FestivalItem.end_date ? new Date(FestivalItem.end_date) : null;
-      const deadline = FestivalItem.deadline ? new Date(FestivalItem.deadline) : null;
-  
+      const startDate = FestivalItem.start_date
+        ? new Date(FestivalItem.start_date)
+        : null
+      const endDate = FestivalItem.end_date
+        ? new Date(FestivalItem.end_date)
+        : null
+      const deadline = FestivalItem.deadline
+        ? new Date(FestivalItem.deadline)
+        : null
+
       let formattedFestivalData: FestivalTableData = {
         UID: FestivalItem.UID,
         idposts: FestivalItem.idposts,
@@ -204,184 +207,195 @@
         description: FestivalItem.description,
         link: FestivalItem.link,
         organization: FestivalItem.organization,
-        start_date: startDate ? `${startDate.toLocaleString('en-us', { month: 'long' })} ${startDate.getDate()}, ${startDate.getFullYear()}` : "",
-        end_date: endDate ? `${endDate.toLocaleString('en-us', { month: 'long' })} ${endDate.getDate()}, ${endDate.getFullYear()}` : "",
-        deadline: deadline ? `${deadline.toLocaleString('en-us', { month: 'long' })} ${deadline.getDate()}, ${deadline.getFullYear()}` : "",
-        cityState: FestivalItem.city + ", " + FestivalItem.state,
+        start_date: startDate
+          ? `${startDate.toLocaleString('en-us', {
+              month: 'long',
+            })} ${startDate.getDate()}, ${startDate.getFullYear()}`
+          : '',
+        end_date: endDate
+          ? `${endDate.toLocaleString('en-us', {
+              month: 'long',
+            })} ${endDate.getDate()}, ${endDate.getFullYear()}`
+          : '',
+        deadline: deadline
+          ? `${deadline.toLocaleString('en-us', {
+              month: 'long',
+            })} ${deadline.getDate()}, ${deadline.getFullYear()}`
+          : '',
+        cityState: FestivalItem.city + ', ' + FestivalItem.state,
         address: FestivalItem.address,
         genre: FestivalItem.genre,
-      };
-      newFestivalList.push(formattedFestivalData);
-    });
-    setFestivalList(newFestivalList);
-  };
+      }
+      newFestivalList.push(formattedFestivalData)
+    })
+    setFestivalList(newFestivalList)
+  }
 
-  const mobileScreen = useMediaQuery("(max-width: 768px)");
+  const mobileScreen = useMediaQuery('(max-width: 768px)')
   const dragState = useRef({
     isDragging: false,
     startRowIndex: -1,
     endRowIndex: -1,
-  });
-  
+  })
+
   const handleMouseDown = (index: number) => {
-    dragState.current.isDragging = true;
-    dragState.current.startRowIndex = index;
-    dragState.current.endRowIndex = index;
-  };
-  
+    dragState.current.isDragging = true
+    dragState.current.startRowIndex = index
+    dragState.current.endRowIndex = index
+  }
+
   const handleMouseEnter = (index: number) => {
     if (dragState.current.isDragging) {
-      dragState.current.endRowIndex = index;
+      dragState.current.endRowIndex = index
       const start = Math.min(
         dragState.current.startRowIndex,
-        dragState.current.endRowIndex
-      );
+        dragState.current.endRowIndex,
+      )
       const end = Math.max(
         dragState.current.startRowIndex,
-        dragState.current.endRowIndex
-      );
-      const selectedIDPosts = [...selectedRows];
-      const id = rawFestivalList[dragState.current.startRowIndex]?.idposts ?? -1;
-    if (selectedIDPosts.includes(id)) {
-      // If the startRowIndex is in the selectedRows list,
-      // add new IDPosts to the selectedRows
-      for (let i = start; i <= end; i++) {
-        if (!selectedIDPosts.includes(rawFestivalList[i]?.idposts ?? -1)) {
-          selectedIDPosts.push(rawFestivalList[i]?.idposts ?? -1);
-        }
-      }
-    } else {
-      // Otherwise, remove dragged elements if they are in the list
-      for (let i = start; i <= end; i++) {
-        const indexToRemove = selectedIDPosts.indexOf(rawFestivalList[i]?.idposts ?? -1);
-        if (indexToRemove !== -1) {
-          selectedIDPosts.splice(indexToRemove, 1);
+        dragState.current.endRowIndex,
+      )
+      const selectedIDPosts = [...selectedRows]
+      const id = rawFestivalList[dragState.current.startRowIndex]?.idposts ?? -1
+      if (selectedIDPosts.includes(id)) {
+        // If the startRowIndex is in the selectedRows list,
+        // add new IDPosts to the selectedRows
+        for (let i = start; i <= end; i++) {
+          if (!selectedIDPosts.includes(rawFestivalList[i]?.idposts ?? -1)) {
+            selectedIDPosts.push(rawFestivalList[i]?.idposts ?? -1)
+          }
+        }
+      } else {
+        // Otherwise, remove dragged elements if they are in the list
+        for (let i = start; i <= end; i++) {
+          const indexToRemove = selectedIDPosts.indexOf(
+            rawFestivalList[i]?.idposts ?? -1,
+          )
+          if (indexToRemove !== -1) {
+            selectedIDPosts.splice(indexToRemove, 1)
+          }
         }
       }
+      setSelectedRows(selectedIDPosts)
     }
-    setSelectedRows(selectedIDPosts);
-    }
-  };
-  
+  }
+
   const handleMouseUp = () => {
-    dragState.current.isDragging = false;
-  };
+    dragState.current.isDragging = false
+  }
 
   const handleRowSelect = (idposts: number) => {
-    setSelectedRows(prevSelectedRows => {
+    setSelectedRows((prevSelectedRows) => {
       if (prevSelectedRows.includes(idposts)) {
         // If UID is already selected, remove it from the selectedRows
-        return prevSelectedRows.filter(row => row !== idposts);
+        return prevSelectedRows.filter((row) => row !== idposts)
       } else {
         // Otherwise, add it to the selectedRows
-        return [...prevSelectedRows, idposts];
+        return [...prevSelectedRows, idposts]
       }
-    });
-  };
+    })
+  }
   const editFunction = async (opportunity: ScrapedPost) => {
     try {
-      let idpost = currentOpportunity?.idposts;
+      let idpost = currentOpportunity?.idposts
       // Delete the idposts in the opportunity such that the backend doesn't actually update the idpost column in mySQL.
       // This shouldn't be necessary to do at all but have it here just in-case the idposts here is some how different from the idposts in the url parameters and/or in mySQL
-      
-      delete opportunity.idposts;
-      delete opportunity.first_name;
-      delete opportunity.last_name;
-      delete opportunity.email;
-      delete opportunity.is_banned;
-      delete opportunity.is_admin;
-      delete opportunity.ban_message;
+
+      delete opportunity.idposts
+      delete opportunity.first_name
+      delete opportunity.last_name
+      delete opportunity.email
+      delete opportunity.is_banned
+      delete opportunity.is_admin
+      delete opportunity.ban_message
 
       for (let key in opportunity) {
         if (
           !opportunity[key as keyof typeof opportunity] &&
-          key !== "winner" &&
-          key !== "city" &&
-          key !== "state" &&
-          key !== "address"
+          key !== 'winner' &&
+          key !== 'city' &&
+          key !== 'state' &&
+          key !== 'address'
         ) {
-          delete opportunity[key as keyof typeof opportunity];
+          delete opportunity[key as keyof typeof opportunity]
         }
       }
 
-      console.log("formatted edit body:", opportunity);
+      console.log('formatted edit body:', opportunity)
 
       let requestOptions = {
-        method: "PUT",
-        headers: { "Content-Type": "application/json" },
+        method: 'PUT',
+        headers: {'Content-Type': 'application/json'},
         body: JSON.stringify(opportunity),
-      };
+      }
 
       let response = await fetch(
         `https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday/festivals/${idpost}`,
-        requestOptions
-      );
+        requestOptions,
+      )
 
-      let responseJson = await response.json();
+      let responseJson = await response.json()
 
-      let editedOpportunity = responseJson.listOfObjects[0];
+      let editedOpportunity = responseJson.listOfObjects[0]
 
-      return editedOpportunity;
+      return editedOpportunity
     } catch (err) {
-      console.log(err);
+      console.log(err)
     }
-  };
+  }
 
   const handleEditButton = async (opportunity: ScrapedPost) => {
     try {
       //delete opportunity.UID;
       //delete opportunity.date_posted;
-      
 
       // Format any keys of type number to be as type strings since the APIs only accept strings for the request body
-      opportunity.end_date = opportunity.end_date?.toString();
-      opportunity.start_date = opportunity.start_date?.toString();
-      opportunity.deadline = opportunity.deadline?.toString();
-      opportunity.salary = opportunity.salary?.toString();
-      opportunity.fee = opportunity.fee?.toString();
+      opportunity.end_date = opportunity.end_date?.toString()
+      opportunity.start_date = opportunity.start_date?.toString()
+      opportunity.deadline = opportunity.deadline?.toString()
+      opportunity.salary = opportunity.salary?.toString()
+      opportunity.fee = opportunity.fee?.toString()
 
-      let editedOpportunity = await editFunction(opportunity);
+      let editedOpportunity = await editFunction(opportunity)
 
       for (let i = 0; i < rawFestivalList.length; i++) {
         if (rawFestivalList[i].idposts === editedOpportunity.idposts) {
-          let tempArray = rawFestivalList;
-          tempArray[i] = editedOpportunity;
-          setRawFestivalList([...tempArray]);
-          break;
+          let tempArray = rawFestivalList
+          tempArray[i] = editedOpportunity
+          setRawFestivalList([...tempArray])
+          break
         }
       }
 
       showNotification({
-        title: "Edits Applied",
-        message: "Your changes have been applied",
-        color: "green",
-      });
-      setDisplayOpportunityEditModal(false);
+        title: 'Edits Applied',
+        message: 'Your changes have been applied',
+        color: 'green',
+      })
+      setDisplayOpportunityEditModal(false)
     } catch (err) {
-      console.log(err);
+      console.log(err)
       showNotification({
-        title: "Error",
-        message: "There was a problem, please try again later",
-        color: "red",
-      });
+        title: 'Error',
+        message: 'There was a problem, please try again later',
+        color: 'red',
+      })
     }
-  };
-  
+  }
 
   const rows = FestivalList?.map((item, index) => (
-    <tr 
+    <tr
       onMouseDown={() => handleMouseDown(index)}
       onMouseEnter={() => handleMouseEnter(index)}
       onMouseUp={handleMouseUp}
-      
-        onClick={() => handleRowSelect(item.idposts ?? -1)}
-        style={{
-          backgroundColor: selectedRows.includes(item.idposts ?? -1) ? "#e6f7ff" : "inherit",
-          cursor: "pointer",
-          
-        }}
+      onClick={() => handleRowSelect(item.idposts ?? -1)}
+      style={{
+        backgroundColor: selectedRows.includes(item.idposts ?? -1)
+          ? '#e6f7ff'
+          : 'inherit',
+        cursor: 'pointer',
+      }}
     >
-      
       <td>
         <Text size="sm" weight={500}>
           {item.title}
@@ -434,26 +448,31 @@
       </td>
       {!mobileScreen && (
         <td>
-          <Container style={{ width: 400 }}>
-          <Text size="sm" color="dimmed">
-            {item.description}
-          </Text>
+          <Container style={{width: 400}}>
+            <Text size="sm" color="dimmed">
+              {item.description}
+            </Text>
           </Container>
         </td>
       )}
       {!mobileScreen && (
         <td>
-          <Text size="sm" color="dimmed" >
+          <Text size="sm" color="dimmed">
             {item.organization}
           </Text>
         </td>
       )}
       {!mobileScreen && (
         <td>
-          <Container style={{ width: 100 }}>
-          <a href={item.link} target='_blank'  color="dimmed" style={{ overflowWrap: 'break-word' }}>
-          {item.link}
-          </a>
+          <Container style={{width: 100}}>
+            <a
+              href={item.link}
+              target="_blank"
+              color="dimmed"
+              style={{overflowWrap: 'break-word'}}
+            >
+              {item.link}
+            </a>
           </Container>
         </td>
       )}
@@ -500,37 +519,30 @@
         </td>
       )}
       <td>
-      <Button 
-        variant="outline" 
-        size="sm" 
-        onClick={() => {
-          setDisplayOpportunityEditModal(true);
-          setCurrentOpportunity(rawFestivalList[index]);
-        }}
-      >
-        Edit
-      </Button>
-    </td>      
+        <Button
+          variant="outline"
+          size="sm"
+          onClick={() => {
+            setDisplayOpportunityEditModal(true)
+            setCurrentOpportunity(rawFestivalList[index])
+          }}
+        >
+          Edit
+        </Button>
+      </td>
     </tr>
-    
-  ));
+  ))
 
   const loadingRows = [1, 2, 3, 4, 5, 6, 7, 8, 9].map((item, index) => (
     <tr key={index}>
       <td>
-        <Skeleton
-          height={8}
-          width="40%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-        />
+        <Skeleton height={8} width="40%" radius="xl" sx={{margin: '8px 0px'}} />
         {mobileScreen && (
           <Skeleton
             height={6}
             width="100%"
             radius="xl"
-            sx={{ margin: "8px 0px" }}
-            
+            sx={{margin: '8px 0px'}}
           />
         )}
       </td>
@@ -540,123 +552,111 @@
             height={16}
             width="100%"
             radius="xl"
-            sx={{ margin: "8px 0px" }}
-            
+            sx={{margin: '8px 0px'}}
           />
         </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="40%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-        
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="40%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
       {!mobileScreen && (
-      <td>
-        <Skeleton
-          height={8}
-          width="15%"
-          radius="xl"
-          sx={{ margin: "8px 0px" }}
-          
-        />
-      </td>
+        <td>
+          <Skeleton
+            height={8}
+            width="15%"
+            radius="xl"
+            sx={{margin: '8px 0px'}}
+          />
+        </td>
       )}
     </tr>
-  ));
-
-
+  ))
 
   const handleSelectAll = () => {
     if (selectAll) {
       // If all rows are selected, deselect all
-      setSelectedRows([]);
-      setSelectAll(false);
+      setSelectedRows([])
+      setSelectAll(false)
     } else {
       // Otherwise, select all rows
-      const allRowIDs = FestivalList.map(item => item.idposts ?? -1);
-      setSelectedRows(allRowIDs);
-      setSelectAll(true);
+      const allRowIDs = FestivalList.map((item) => item.idposts ?? -1)
+      setSelectedRows(allRowIDs)
+      setSelectAll(true)
     }
-  };
+  }
   const handleSelectedRowsUpdate = (updatedSelectedRows: number[]) => {
-    setSelectedRows(updatedSelectedRows);
-    
-  };
+    setSelectedRows(updatedSelectedRows)
+  }
 
   const handleUpdate = () => {
-    setRecall((prevRecall) => prevRecall + 1);
+    setRecall((prevRecall) => prevRecall + 1)
   }
 
   return (
@@ -667,16 +667,16 @@
         onUpdateSelectedRows={handleSelectedRowsUpdate}
         onUpdate={handleUpdate}
         rawData={rawFestivalList}
-  />
+      />
 
-<Paper
+      <Paper
         withBorder
         mt={30}
         radius="lg"
         className={cx(classes.userContainer, {
           [classes.noDataContainer]: rawFestivalList.length === 0,
         })}
-        sx={{ padding: "40px 20px" }}
+        sx={{padding: '40px 20px'}}
       >
         <LoadingOverlay
           visible={loading}
@@ -685,203 +685,203 @@
           radius="lg"
         />
         {rawFestivalList.length === 0 ? (
-        
-          <Text size="lg" weight={500} align="center" style={{ color: '#42A563',
-    fontSize: '36px',
-    textAlign: "center",
-    display: "flex",
-    justifyContent: "center",
-    alignItems: "center",
-    height: "100%",}}>
+          <Text
+            size="lg"
+            weight={500}
+            align="center"
+            style={{
+              color: '#42A563',
+              fontSize: '36px',
+              textAlign: 'center',
+              display: 'flex',
+              justifyContent: 'center',
+              alignItems: 'center',
+              height: '100%',
+            }}
+          >
             No New Festivals
           </Text>
-       
         ) : (
-        <ScrollArea w="100%" h="90%">
-          <Container className={classes.table}>
-            <Table verticalSpacing="sm">
-              <thead
-                className={cx(classes.header, {
-                  [classes.scrolled]: scrolled,
-                })}
-              >
-                <tr>
-                  
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="40%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Title"
-                    )}
-                  </th>
-                  {!mobileScreen && (
-                    <th style={{textAlign: "center"}}>
-                      {loading ? (
-                        <Skeleton
-                          height={12}
-                          width="50%"
-                          radius="xl"
-                          sx={{ margin: "8px 0px" }}
-                          
-                        />
-                      ) : (
-                        "Description"
-                      )}
-                    </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Organization"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Link"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Start Date"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                       
-                      />
-                    ) : (
-                      "End Date"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Deadline"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "City/State"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Address"
-                    )}
-                  </th>
-                  )}
-                  {!mobileScreen && (
-                  <th style={{textAlign: "center"}}>
-                    {loading ? (
-                      <Skeleton
-                        height={12}
-                        width="10%"
-                        radius="xl"
-                        sx={{ margin: "8px 0px" }}
-                        
-                      />
-                    ) : (
-                      "Genre"
-                    )}
-                  </th>
-                  )}
-                  <th></th>
-                </tr>
-              </thead>
-              <tbody>{loading ? loadingRows : rows}</tbody>
-            </Table>
-          </Container>
-        </ScrollArea>
-)}
+          <ScrollArea w="100%" h="90%">
+            <Container className={classes.table}>
+              <Table verticalSpacing="sm">
+                <thead
+                  className={cx(classes.header, {
+                    [classes.scrolled]: scrolled,
+                  })}
+                >
+                  <tr>
+                    <th style={{textAlign: 'center'}}>
+                      {loading ? (
+                        <Skeleton
+                          height={12}
+                          width="40%"
+                          radius="xl"
+                          sx={{margin: '8px 0px'}}
+                        />
+                      ) : (
+                        'Title'
+                      )}
+                    </th>
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="50%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Description'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Organization'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Link'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Start Date'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'End Date'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Deadline'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'City/State'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Address'
+                        )}
+                      </th>
+                    )}
+                    {!mobileScreen && (
+                      <th style={{textAlign: 'center'}}>
+                        {loading ? (
+                          <Skeleton
+                            height={12}
+                            width="10%"
+                            radius="xl"
+                            sx={{margin: '8px 0px'}}
+                          />
+                        ) : (
+                          'Genre'
+                        )}
+                      </th>
+                    )}
+                    <th></th>
+                  </tr>
+                </thead>
+                <tbody>{loading ? loadingRows : rows}</tbody>
+              </Table>
+            </Container>
+          </ScrollArea>
+        )}
         {
-          <Container sx={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginTop: "30px" }}>
-          <PaginationNavbarScraper
-            apiEndpointExtension={"festivals"}
-            numberOfItemsPerPage={10}
-            setListOfObjects={setRawFestivalList}
-            searchFilterObject={searchParams}
-            setLoading={setLoading}
-            recall={recall}
-            //curPage = {CurrentPage}
-          />
-          
+          <Container
+            sx={{
+              display: 'flex',
+              justifyContent: 'space-between',
+              alignItems: 'center',
+              marginTop: '30px',
+            }}
+          >
+            <PaginationNavbarScraper
+              apiEndpointExtension={'festivals'}
+              numberOfItemsPerPage={10}
+              setListOfObjects={setRawFestivalList}
+              searchFilterObject={searchParams}
+              setLoading={setLoading}
+              recall={recall}
+              //curPage = {CurrentPage}
+            />
           </Container>
         }
       </Paper>
       <Modal
         opened={displayOpportunityEditModal}
         onClose={() => {
-          setDisplayOpportunityEditModal(false);
+          setDisplayOpportunityEditModal(false)
         }}
         fullScreen={smallerScreen}
         size="60%"
@@ -889,14 +889,12 @@
         <FormHeader>Edit Post</FormHeader>
         <ScrapedPostForm
           edit={true}
-          opportunityType={
-            "festivals"
-          }
+          opportunityType={'festivals'}
           opportunity={currentOpportunity ? currentOpportunity : undefined}
           displayWinnerInput
           handleSubmission={handleEditButton}
         />
       </Modal>
     </Container>
-  );
+  )
 }
Index: src/pages/adminView/Reported.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Opportunity } from \"../../components/opportunity/Opportunity\";\nimport { auth } from \"../../Firebase\";\nimport React, { useState, useEffect } from \"react\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { useNavigate } from \"react-router-dom\";\nimport { motion } from \"framer-motion\";\n\nexport function Reported() {\n  const url = \"https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday\";\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    onAuthStateChanged(auth, async (user) => {\n      if (user) {\n        if (!user.emailVerified) {\n          navigate(\"/verify\");\n        }\n        let response = await fetch(\n          `${url}/users?page_number=1&keyword=${user.email}`\n        );\n\n        let responseJson = await response.json();\n\n        let userData = responseJson.listOfObjects[0];\n\n        if (!userData.is_admin) {\n          navigate(\"/\");\n        }\n      } else {\n        navigate(\"/\");\n      }\n    });\n  }, []);\n\n  // useEffect(() => {\n  //   const getReported = async() => {\n  //     try {\n  //       let requestOptions = {\n  //         method: \"GET\",\n  //         headers: { \"Content-Type\": \"application/json\" },\n  //       };\n  //       let response = await fetch(\n  //         `${url}/posts/reported`,\n  //         requestOptions\n  //       );\n  //       let responseJson = await response.json();\n  //     } catch(error) {\n  //       throw(error);\n  //     }\n  //   }\n  //   getReported();\n  // }, []);\n    \n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Opportunity apiEndpoint=\"posts/reported\" />\n    </motion.div>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/adminView/Reported.tsx b/src/pages/adminView/Reported.tsx
--- a/src/pages/adminView/Reported.tsx	
+++ b/src/pages/adminView/Reported.tsx	
@@ -1,36 +1,36 @@
-import { Opportunity } from "../../components/opportunity/Opportunity";
-import { auth } from "../../Firebase";
-import React, { useState, useEffect } from "react";
-import { onAuthStateChanged } from "firebase/auth";
-import { useNavigate } from "react-router-dom";
-import { motion } from "framer-motion";
+import {Opportunity} from '../../components/opportunity/Opportunity'
+import {auth} from '../../Firebase'
+import React, {useState, useEffect} from 'react'
+import {onAuthStateChanged} from 'firebase/auth'
+import {useNavigate} from 'react-router-dom'
+import {motion} from 'framer-motion'
 
 export function Reported() {
-  const url = "https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday";
-  const navigate = useNavigate();
+  const url = 'https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday'
+  const navigate = useNavigate()
 
   useEffect(() => {
     onAuthStateChanged(auth, async (user) => {
       if (user) {
         if (!user.emailVerified) {
-          navigate("/verify");
+          navigate('/verify')
         }
         let response = await fetch(
-          `${url}/users?page_number=1&keyword=${user.email}`
-        );
+          `${url}/users?page_number=1&keyword=${user.email}`,
+        )
 
-        let responseJson = await response.json();
+        let responseJson = await response.json()
 
-        let userData = responseJson.listOfObjects[0];
+        let userData = responseJson.listOfObjects[0]
 
         if (!userData.is_admin) {
-          navigate("/");
+          navigate('/')
         }
       } else {
-        navigate("/");
+        navigate('/')
       }
-    });
-  }, []);
+    })
+  }, [])
 
   // useEffect(() => {
   //   const getReported = async() => {
@@ -50,14 +50,14 @@
   //   }
   //   getReported();
   // }, []);
-    
+
   return (
     <motion.div
-      initial={{ opacity: 0 }}
-      animate={{ opacity: 1 }}
-      transition={{ duration: 0.3 }}
+      initial={{opacity: 0}}
+      animate={{opacity: 1}}
+      transition={{duration: 0.3}}
     >
       <Opportunity apiEndpoint="posts/reported" />
     </motion.div>
-  );
+  )
 }
Index: src/components/adminView/ScrapedPostHelper.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export interface ScrapedPost {\n    UID?: string;\n    idposts?: number;\n    keyword?: string;\n    title?: string;\n    organization?: string;\n    link?: string;\n    description?: string;\n    date_posted?: Date | string | number;\n    city?: string;\n    state?: string;\n    end_date?: Date | string | number | null;\n    salary?: string | number;\n    job_type?: string;\n    winner?: string | null;\n    competition_category?: string;\n    job_category?: string;\n    address?: string;\n    is_deleted?: string | number;\n    is_flagged?: string | number;\n    type?: string;\n    start_date?: Date | string | number;\n    published_date?: Date | string | number;\n    start_time?: Date | string | number | null;\n    author?: string;\n    first_name?: string;\n    last_name?: string;\n    email?: string;\n    is_expired?: string;\n    is_banned?: number;\n    is_winner?: string;\n    is_admin?: number;\n    ban_message?: string;\n    deleted_comment?: string;\n    fee?: string | number;\n    deadline?: Date | string | number | null;\n    writer?: string;\n    genre?: string;\n  }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/adminView/ScrapedPostHelper.tsx b/src/components/adminView/ScrapedPostHelper.tsx
--- a/src/components/adminView/ScrapedPostHelper.tsx	
+++ b/src/components/adminView/ScrapedPostHelper.tsx	
@@ -1,39 +1,39 @@
 export interface ScrapedPost {
-    UID?: string;
-    idposts?: number;
-    keyword?: string;
-    title?: string;
-    organization?: string;
-    link?: string;
-    description?: string;
-    date_posted?: Date | string | number;
-    city?: string;
-    state?: string;
-    end_date?: Date | string | number | null;
-    salary?: string | number;
-    job_type?: string;
-    winner?: string | null;
-    competition_category?: string;
-    job_category?: string;
-    address?: string;
-    is_deleted?: string | number;
-    is_flagged?: string | number;
-    type?: string;
-    start_date?: Date | string | number;
-    published_date?: Date | string | number;
-    start_time?: Date | string | number | null;
-    author?: string;
-    first_name?: string;
-    last_name?: string;
-    email?: string;
-    is_expired?: string;
-    is_banned?: number;
-    is_winner?: string;
-    is_admin?: number;
-    ban_message?: string;
-    deleted_comment?: string;
-    fee?: string | number;
-    deadline?: Date | string | number | null;
-    writer?: string;
-    genre?: string;
-  }
\ No newline at end of file
+  UID?: string
+  idposts?: number
+  keyword?: string
+  title?: string
+  organization?: string
+  link?: string
+  description?: string
+  date_posted?: Date | string | number
+  city?: string
+  state?: string
+  end_date?: Date | string | number | null
+  salary?: string | number
+  job_type?: string
+  winner?: string | null
+  competition_category?: string
+  job_category?: string
+  address?: string
+  is_deleted?: string | number
+  is_flagged?: string | number
+  type?: string
+  start_date?: Date | string | number
+  published_date?: Date | string | number
+  start_time?: Date | string | number | null
+  author?: string
+  first_name?: string
+  last_name?: string
+  email?: string
+  is_expired?: string
+  is_banned?: number
+  is_winner?: string
+  is_admin?: number
+  ban_message?: string
+  deleted_comment?: string
+  fee?: string | number
+  deadline?: Date | string | number | null
+  writer?: string
+  genre?: string
+}
Index: src/pages/adminView/ScrapedPostApproval.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { Center, Container, MediaQuery, Select, createStyles } from \"@mantine/core\"; // assuming Select is a dropdown component from Mantine\nimport { auth } from \"../../Firebase\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { footerInfo } from \"../../components/footer/FooterInfo\";\nimport { Footer } from \"../../components/footer/Footer\";\nimport { UsersList } from \"../../components/adminView/UsersList\";\nimport { Image } from \"@mantine/core\";\nimport { useNavigate } from \"react-router-dom\";\nimport { motion } from \"framer-motion\";\nimport { setNavigationProgress } from \"@mantine/nprogress\";\nimport { ScrapedNews } from \"../../components/adminView/ScrapedNews\";\nimport { ScrapedFestivals } from \"../../components/adminView/ScrapedFestivals\";\nimport { ScrapedJobs } from \"../../components/adminView/ScrapedJobs\";\nimport { ScrapedConcerts } from \"../../components/adminView/ScrapedConcerts\";\nimport { ScrapedCompetitions } from \"../../components/adminView/ScrapedCompetitions\";\n\nconst greenTriangle = require(\"../../images/GreenTriangle.png\");\nconst blueTriangle = require(\"../../images/BlueTriangle.png\");\n\nconst useStyles = createStyles((theme) => ({\n  container: {\n    padding: \"0px\",\n    marginTop: \"40px\",\n    \n    top: \"10%\",\n    paddingLeft: '5%',\n    paddingRight: '5%',\n    zIndex: 999,\n    background: \"white\",\n    \n\n    [theme.fn.smallerThan(\"md\")]: {\n      paddingLeft: \"15px\",\n      paddingRight: \"15px\",\n      \n    },\n  },\n\n  search: {\n    borderColor: \"#939393\",\n\n    flexBasis: \"100%\",\n    marginRight: \"15px\",\n\n    [theme.fn.largerThan(\"md\")]: {\n      flexBasis: \"40%\",\n    },\n  },\n  buttonsContainer: {\n    marginLeft: \"auto\",\n    [theme.fn.smallerThan(\"md\")]: {\n      marginRight: \"15px\",\n    },\n  },\n}));\n\nexport function ScrapedPostApproval() {\n  const [selectedOption, setSelectedOption] = useState(\"News\");\n  const url = \"https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday\";\n  const navigate = useNavigate();\n  const { classes } = useStyles();\n\n  useEffect(() => {\n    onAuthStateChanged(auth, async (user) => {\n      if (user) {\n        if (!user.emailVerified) {\n          navigate(\"/verify\");\n        }\n\n        let response = await fetch(\n          `${url}/users?page_number=1&keyword=${user.email}`\n        );\n\n        let responseJson = await response.json();\n\n        let userData = responseJson.listOfObjects[0];\n\n        if (!userData.is_admin) {\n          navigate(\"/\");\n        }\n      } else {\n        navigate(\"/\");\n      }\n    });\n  });\n\n  const handleSelectChange = (value: string) => {\n    setSelectedOption(value);\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Container fluid style={{ padding: 0 }}>\n        <MediaQuery smallerThan=\"md\" styles={{ display: \"none\" }}>\n          <Image\n            src={String(blueTriangle)}\n            style={{\n              width: \"24%\",\n              position: \"fixed\",\n              right: \"0px\",\n            }}\n          />\n        </MediaQuery>\n        <MediaQuery smallerThan=\"md\" styles={{ display: \"none\" }}>\n          <Image\n            src={String(greenTriangle)}\n            style={{ width: \"24%\", position: \"fixed\", bottom: \"0px\" }}\n          />\n        </MediaQuery>\n        <Container\n        className={classes.container}\n      >\n        <Select\n          data={[\n            { value: \"News\", label: \"News\" },\n            { value: \"Jobs\", label: \"Jobs\" },\n            { value: \"Competitions\", label: \"Competitions\" },\n            { value: \"Festivals\", label: \"Festivals\" },\n            { value: \"Concerts\", label: \"Concerts\" },\n          ]}\n          value={selectedOption}\n          onChange={handleSelectChange}\n        />\n      </Container>\n        <div style={{ paddingBottom: \"5%\" }}>\n        {selectedOption === \"News\" && (\n          <>\n            <Container\n              style={{ textAlign: \"center\", paddingTop: \"5%\" }}\n            >\n              <h1 style={{ color: \"#228be6\", fontSize: \"36px\" }}>\n                News\n              </h1>\n            </Container>\n            <ScrapedNews />\n          </>\n        )}\n        {selectedOption === \"Jobs\" && (\n          <>\n            <Container\n              style={{ textAlign: \"center\", paddingTop: \"5%\" }}\n            >\n              <h1 style={{ color: \"#228be6\", fontSize: \"36px\" }}>\n                Jobs\n              </h1>\n            </Container>\n            <ScrapedJobs />\n          </>\n        )}\n        {selectedOption === \"Competitions\" && (\n          <>\n            <Container\n              style={{ textAlign: \"center\", paddingTop: \"5%\" }}\n            >\n              <h1 style={{ color: \"#228be6\", fontSize: \"36px\" }}>\n                Competitions\n              </h1>\n            </Container>\n            <ScrapedCompetitions />\n          </>\n        )}\n        {selectedOption === \"Festivals\" && (\n          <>\n            <Container\n              style={{ textAlign: \"center\", paddingTop: \"5%\" }}\n            >\n              <h1 style={{ color: \"#228be6\", fontSize: \"36px\" }}>\n                Festivals\n              </h1>\n            </Container>\n            <ScrapedFestivals />\n          </>\n        )}\n        {selectedOption === \"Concerts\" && (\n          <>\n            <Container\n              style={{ textAlign: \"center\", paddingTop: \"5%\" }}\n            >\n              <h1 style={{ color: \"#228be6\", fontSize: \"36px\" }}>\n                Concerts\n              </h1>\n            </Container>\n            <ScrapedConcerts />\n          </>\n        )}\n        </div>\n      </Container>\n    </motion.div>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/adminView/ScrapedPostApproval.tsx b/src/pages/adminView/ScrapedPostApproval.tsx
--- a/src/pages/adminView/ScrapedPostApproval.tsx	
+++ b/src/pages/adminView/ScrapedPostApproval.tsx	
@@ -1,196 +1,180 @@
-import React, { useState } from "react";
-import { useEffect } from "react";
-import { Center, Container, MediaQuery, Select, createStyles } from "@mantine/core"; // assuming Select is a dropdown component from Mantine
-import { auth } from "../../Firebase";
-import { onAuthStateChanged } from "firebase/auth";
-import { footerInfo } from "../../components/footer/FooterInfo";
-import { Footer } from "../../components/footer/Footer";
-import { UsersList } from "../../components/adminView/UsersList";
-import { Image } from "@mantine/core";
-import { useNavigate } from "react-router-dom";
-import { motion } from "framer-motion";
-import { setNavigationProgress } from "@mantine/nprogress";
-import { ScrapedNews } from "../../components/adminView/ScrapedNews";
-import { ScrapedFestivals } from "../../components/adminView/ScrapedFestivals";
-import { ScrapedJobs } from "../../components/adminView/ScrapedJobs";
-import { ScrapedConcerts } from "../../components/adminView/ScrapedConcerts";
-import { ScrapedCompetitions } from "../../components/adminView/ScrapedCompetitions";
+import React, {useState} from 'react'
+import {useEffect} from 'react'
+import {
+  Center,
+  Container,
+  MediaQuery,
+  Select,
+  createStyles,
+} from '@mantine/core' // assuming Select is a dropdown component from Mantine
+import {auth} from '../../Firebase'
+import {onAuthStateChanged} from 'firebase/auth'
+import {footerInfo} from '../../components/footer/FooterInfo'
+import {Footer} from '../../components/footer/Footer'
+import {UsersList} from '../../components/adminView/UsersList'
+import {Image} from '@mantine/core'
+import {useNavigate} from 'react-router-dom'
+import {motion} from 'framer-motion'
+import {setNavigationProgress} from '@mantine/nprogress'
+import {ScrapedNews} from '../../components/adminView/ScrapedNews'
+import {ScrapedFestivals} from '../../components/adminView/ScrapedFestivals'
+import {ScrapedJobs} from '../../components/adminView/ScrapedJobs'
+import {ScrapedConcerts} from '../../components/adminView/ScrapedConcerts'
+import {ScrapedCompetitions} from '../../components/adminView/ScrapedCompetitions'
 
-const greenTriangle = require("../../images/GreenTriangle.png");
-const blueTriangle = require("../../images/BlueTriangle.png");
+const greenTriangle = require('../../images/GreenTriangle.png')
+const blueTriangle = require('../../images/BlueTriangle.png')
 
 const useStyles = createStyles((theme) => ({
   container: {
-    padding: "0px",
-    marginTop: "40px",
-    
-    top: "10%",
+    padding: '0px',
+    marginTop: '40px',
+
+    top: '10%',
     paddingLeft: '5%',
     paddingRight: '5%',
     zIndex: 999,
-    background: "white",
-    
+    background: 'white',
 
-    [theme.fn.smallerThan("md")]: {
-      paddingLeft: "15px",
-      paddingRight: "15px",
-      
+    [theme.fn.smallerThan('md')]: {
+      paddingLeft: '15px',
+      paddingRight: '15px',
     },
   },
 
   search: {
-    borderColor: "#939393",
+    borderColor: '#939393',
 
-    flexBasis: "100%",
-    marginRight: "15px",
+    flexBasis: '100%',
+    marginRight: '15px',
 
-    [theme.fn.largerThan("md")]: {
-      flexBasis: "40%",
+    [theme.fn.largerThan('md')]: {
+      flexBasis: '40%',
     },
   },
   buttonsContainer: {
-    marginLeft: "auto",
-    [theme.fn.smallerThan("md")]: {
-      marginRight: "15px",
+    marginLeft: 'auto',
+    [theme.fn.smallerThan('md')]: {
+      marginRight: '15px',
     },
   },
-}));
+}))
 
 export function ScrapedPostApproval() {
-  const [selectedOption, setSelectedOption] = useState("News");
-  const url = "https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday";
-  const navigate = useNavigate();
-  const { classes } = useStyles();
+  const [selectedOption, setSelectedOption] = useState('News')
+  const url = 'https://oyster-app-7l5vz.ondigitalocean.app/compositiontoday'
+  const navigate = useNavigate()
+  const {classes} = useStyles()
 
   useEffect(() => {
     onAuthStateChanged(auth, async (user) => {
       if (user) {
         if (!user.emailVerified) {
-          navigate("/verify");
+          navigate('/verify')
         }
 
         let response = await fetch(
-          `${url}/users?page_number=1&keyword=${user.email}`
-        );
+          `${url}/users?page_number=1&keyword=${user.email}`,
+        )
 
-        let responseJson = await response.json();
+        let responseJson = await response.json()
 
-        let userData = responseJson.listOfObjects[0];
+        let userData = responseJson.listOfObjects[0]
 
         if (!userData.is_admin) {
-          navigate("/");
+          navigate('/')
         }
       } else {
-        navigate("/");
+        navigate('/')
       }
-    });
-  });
+    })
+  })
 
   const handleSelectChange = (value: string) => {
-    setSelectedOption(value);
-  };
+    setSelectedOption(value)
+  }
 
   return (
     <motion.div
-      initial={{ opacity: 0 }}
-      animate={{ opacity: 1 }}
-      transition={{ duration: 0.3 }}
+      initial={{opacity: 0}}
+      animate={{opacity: 1}}
+      transition={{duration: 0.3}}
     >
-      <Container fluid style={{ padding: 0 }}>
-        <MediaQuery smallerThan="md" styles={{ display: "none" }}>
+      <Container fluid style={{padding: 0}}>
+        <MediaQuery smallerThan="md" styles={{display: 'none'}}>
           <Image
             src={String(blueTriangle)}
             style={{
-              width: "24%",
-              position: "fixed",
-              right: "0px",
+              width: '24%',
+              position: 'fixed',
+              right: '0px',
             }}
           />
         </MediaQuery>
-        <MediaQuery smallerThan="md" styles={{ display: "none" }}>
+        <MediaQuery smallerThan="md" styles={{display: 'none'}}>
           <Image
             src={String(greenTriangle)}
-            style={{ width: "24%", position: "fixed", bottom: "0px" }}
+            style={{width: '24%', position: 'fixed', bottom: '0px'}}
           />
         </MediaQuery>
-        <Container
-        className={classes.container}
-      >
-        <Select
-          data={[
-            { value: "News", label: "News" },
-            { value: "Jobs", label: "Jobs" },
-            { value: "Competitions", label: "Competitions" },
-            { value: "Festivals", label: "Festivals" },
-            { value: "Concerts", label: "Concerts" },
-          ]}
-          value={selectedOption}
-          onChange={handleSelectChange}
-        />
-      </Container>
-        <div style={{ paddingBottom: "5%" }}>
-        {selectedOption === "News" && (
-          <>
-            <Container
-              style={{ textAlign: "center", paddingTop: "5%" }}
-            >
-              <h1 style={{ color: "#228be6", fontSize: "36px" }}>
-                News
-              </h1>
-            </Container>
-            <ScrapedNews />
-          </>
-        )}
-        {selectedOption === "Jobs" && (
-          <>
-            <Container
-              style={{ textAlign: "center", paddingTop: "5%" }}
-            >
-              <h1 style={{ color: "#228be6", fontSize: "36px" }}>
-                Jobs
-              </h1>
-            </Container>
-            <ScrapedJobs />
-          </>
-        )}
-        {selectedOption === "Competitions" && (
-          <>
-            <Container
-              style={{ textAlign: "center", paddingTop: "5%" }}
-            >
-              <h1 style={{ color: "#228be6", fontSize: "36px" }}>
-                Competitions
-              </h1>
-            </Container>
-            <ScrapedCompetitions />
-          </>
-        )}
-        {selectedOption === "Festivals" && (
-          <>
-            <Container
-              style={{ textAlign: "center", paddingTop: "5%" }}
-            >
-              <h1 style={{ color: "#228be6", fontSize: "36px" }}>
-                Festivals
-              </h1>
-            </Container>
-            <ScrapedFestivals />
-          </>
-        )}
-        {selectedOption === "Concerts" && (
-          <>
-            <Container
-              style={{ textAlign: "center", paddingTop: "5%" }}
-            >
-              <h1 style={{ color: "#228be6", fontSize: "36px" }}>
-                Concerts
-              </h1>
-            </Container>
-            <ScrapedConcerts />
-          </>
-        )}
+        <Container className={classes.container}>
+          <Select
+            data={[
+              {value: 'News', label: 'News'},
+              {value: 'Jobs', label: 'Jobs'},
+              {value: 'Competitions', label: 'Competitions'},
+              {value: 'Festivals', label: 'Festivals'},
+              {value: 'Concerts', label: 'Concerts'},
+            ]}
+            value={selectedOption}
+            onChange={handleSelectChange}
+          />
+        </Container>
+        <div style={{paddingBottom: '5%'}}>
+          {selectedOption === 'News' && (
+            <>
+              <Container style={{textAlign: 'center', paddingTop: '5%'}}>
+                <h1 style={{color: '#228be6', fontSize: '36px'}}>News</h1>
+              </Container>
+              <ScrapedNews />
+            </>
+          )}
+          {selectedOption === 'Jobs' && (
+            <>
+              <Container style={{textAlign: 'center', paddingTop: '5%'}}>
+                <h1 style={{color: '#228be6', fontSize: '36px'}}>Jobs</h1>
+              </Container>
+              <ScrapedJobs />
+            </>
+          )}
+          {selectedOption === 'Competitions' && (
+            <>
+              <Container style={{textAlign: 'center', paddingTop: '5%'}}>
+                <h1 style={{color: '#228be6', fontSize: '36px'}}>
+                  Competitions
+                </h1>
+              </Container>
+              <ScrapedCompetitions />
+            </>
+          )}
+          {selectedOption === 'Festivals' && (
+            <>
+              <Container style={{textAlign: 'center', paddingTop: '5%'}}>
+                <h1 style={{color: '#228be6', fontSize: '36px'}}>Festivals</h1>
+              </Container>
+              <ScrapedFestivals />
+            </>
+          )}
+          {selectedOption === 'Concerts' && (
+            <>
+              <Container style={{textAlign: 'center', paddingTop: '5%'}}>
+                <h1 style={{color: '#228be6', fontSize: '36px'}}>Concerts</h1>
+              </Container>
+              <ScrapedConcerts />
+            </>
+          )}
         </div>
       </Container>
     </motion.div>
-  );
+  )
 }
Index: src/pages/CreateBlogOpportunityPage.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { motion } from \"framer-motion\";\nimport {CreateBlogOpportunity} from \"../components/opportunity/CreateBlogOpportunity\";\n\nexport function CreateBlogOpportunityPage() {\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <CreateBlogOpportunity />\n    </motion.div>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/CreateBlogOpportunityPage.tsx b/src/pages/CreateBlogOpportunityPage.tsx
--- a/src/pages/CreateBlogOpportunityPage.tsx	
+++ b/src/pages/CreateBlogOpportunityPage.tsx	
@@ -1,14 +1,14 @@
-import { motion } from "framer-motion";
-import {CreateBlogOpportunity} from "../components/opportunity/CreateBlogOpportunity";
+import {motion} from 'framer-motion'
+import {CreateBlogOpportunity} from '../components/opportunity/CreateBlogOpportunity'
 
 export function CreateBlogOpportunityPage() {
   return (
     <motion.div
-      initial={{ opacity: 0 }}
-      animate={{ opacity: 1 }}
-      transition={{ duration: 0.3 }}
+      initial={{opacity: 0}}
+      animate={{opacity: 1}}
+      transition={{duration: 0.3}}
     >
       <CreateBlogOpportunity />
     </motion.div>
-  );
+  )
 }
Index: src/pages/Survey.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { useState, useEffect } from \"react\";\nimport { auth } from \"../Firebase\";\nimport {\n    authErrorList,\n    ErrorMessage,\n    defaultErrorMessage,\n} from \"../components/login/profile\";\nimport { sendPasswordResetEmail, onAuthStateChanged } from \"firebase/auth\";\nimport { FirebaseError } from \"@firebase/util\";\nimport {\n    createStyles,\n    Paper,\n    Title,\n    Text,\n    TextInput,\n    Button,\n    Container,\n    Group,\n    Anchor,\n    Center,\n    Box,\n} from \"@mantine/core\";\nimport { IconArrowLeft } from \"@tabler/icons\";\nimport { useNavigate } from \"react-router-dom\";\nimport { motion } from \"framer-motion\";\n\nconst useStyles = createStyles((theme) => ({\n    title: {\n        fontSize: 26,\n        fontWeight: 900,\n        fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    },\n\n    controls: {\n        [theme.fn.smallerThan(\"xs\")]: {\n            flexDirection: \"column-reverse\",\n        },\n    },\n\n    control: {\n        [theme.fn.smallerThan(\"xs\")]: {\n            width: \"100%\",\n            textAlign: \"center\",\n        },\n    },\n}));\n\nexport function ForgotPassword() {\n    const { classes } = useStyles();\n    const navigate = useNavigate();\n    const [email, setEmail] = useState(\"\");\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [validInput, setValidInput] = useState(false);\n\n    const handleEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setEmail(e.target.value.trim());\n    };\n\n    const handlePasswordReset = async () => {\n        try {\n            if (email === \"\") {\n                throw \"Please input an email\";\n            }\n\n            await sendPasswordResetEmail(auth, email);\n            setErrorMessage(\"\");\n            setValidInput(true);\n        } catch (err: unknown) {\n            console.log(err);\n            if (err instanceof FirebaseError) {\n                if (authErrorList[err.code as keyof typeof authErrorList]) {\n                    setErrorMessage(\n                        authErrorList[err.code as keyof typeof authErrorList]\n                    );\n                } else if (err.code === \"auth/user-not-found\") {\n                    console.log(\"here\");\n                    setValidInput(true);\n                    setErrorMessage(\"\");\n                    return;\n                } else {\n                    setErrorMessage(defaultErrorMessage);\n                }\n            } else if (typeof err === \"string\") {\n                if (authErrorList[err as keyof typeof authErrorList]) {\n                    setErrorMessage(authErrorList[err as keyof typeof authErrorList]);\n                } else {\n                    setErrorMessage(defaultErrorMessage);\n                }\n            } else {\n                setErrorMessage(defaultErrorMessage);\n            }\n            setValidInput(false);\n        }\n    };\n\n    const refreshPage = () => {\n        window.location.reload();\n    };\n\n    useEffect(() => {\n        onAuthStateChanged(auth, (user) => {\n            if (user) {\n                navigate(\"/\");\n            }\n        });\n    });\n\n    return (\n        <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.3 }}\n        >\n            <Container size={460} my={30}>\n                <Title className={classes.title} align=\"center\">\n                    Forgot your password?\n                </Title>\n                <Text color=\"dimmed\" size=\"sm\" align=\"center\">\n                    Enter your email to get a reset link\n                </Text>\n\n                <Paper withBorder shadow=\"md\" p={30} radius=\"md\" mt=\"xl\">\n                    <TextInput\n                        label=\"Your email\"\n                        placeholder=\"me@mantine.dev\"\n                        required\n                        value={email}\n                        onChange={handleEmail}\n                    />\n                    <ErrorMessage error={!!errorMessage}>{errorMessage}</ErrorMessage>\n                    {validInput && (\n                        <p>\n                            If this email is registered, an email has been sent to reset your\n                            password. Please make sure to also check your spam box!\n                        </p>\n                    )}\n                    <Group position=\"apart\" mt=\"lg\" className={classes.controls}>\n                        <Anchor\n                            color=\"dimmed\"\n                            size=\"sm\"\n                            className={classes.control}\n                            onClick={() => navigate(\"/login\")}\n                        >\n                            <Center inline>\n                                <IconArrowLeft size={12} stroke={1.5} />\n                                <Box ml={5}>Back to login page</Box>\n                            </Center>\n                        </Anchor>\n                        {validInput && (\n                            <Anchor onClick={refreshPage}>Send to a different email?</Anchor>\n                        )}\n                        <Button\n                            className={classes.control}\n                            onClick={handlePasswordReset}\n                            disabled={validInput}\n                        >\n                            {validInput ? \"✓\" : \"Reset password\"}\n                        </Button>\n                    </Group>\n                </Paper>\n            </Container>\n        </motion.div>\n    );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/Survey.tsx b/src/pages/Survey.tsx
--- a/src/pages/Survey.tsx	
+++ b/src/pages/Survey.tsx	
@@ -1,164 +1,162 @@
-import { useState, useEffect } from "react";
-import { auth } from "../Firebase";
+import {useState, useEffect} from 'react'
+import {auth} from '../Firebase'
 import {
-    authErrorList,
-    ErrorMessage,
-    defaultErrorMessage,
-} from "../components/login/profile";
-import { sendPasswordResetEmail, onAuthStateChanged } from "firebase/auth";
-import { FirebaseError } from "@firebase/util";
+  authErrorList,
+  ErrorMessage,
+  defaultErrorMessage,
+} from '../components/login/profile'
+import {sendPasswordResetEmail, onAuthStateChanged} from 'firebase/auth'
+import {FirebaseError} from '@firebase/util'
 import {
-    createStyles,
-    Paper,
-    Title,
-    Text,
-    TextInput,
-    Button,
-    Container,
-    Group,
-    Anchor,
-    Center,
-    Box,
-} from "@mantine/core";
-import { IconArrowLeft } from "@tabler/icons";
-import { useNavigate } from "react-router-dom";
-import { motion } from "framer-motion";
+  createStyles,
+  Paper,
+  Title,
+  Text,
+  TextInput,
+  Button,
+  Container,
+  Group,
+  Anchor,
+  Center,
+  Box,
+} from '@mantine/core'
+import {IconArrowLeft} from '@tabler/icons'
+import {useNavigate} from 'react-router-dom'
+import {motion} from 'framer-motion'
 
 const useStyles = createStyles((theme) => ({
-    title: {
-        fontSize: 26,
-        fontWeight: 900,
-        fontFamily: `Greycliff CF, ${theme.fontFamily}`,
-    },
+  title: {
+    fontSize: 26,
+    fontWeight: 900,
+    fontFamily: `Greycliff CF, ${theme.fontFamily}`,
+  },
 
-    controls: {
-        [theme.fn.smallerThan("xs")]: {
-            flexDirection: "column-reverse",
-        },
-    },
+  controls: {
+    [theme.fn.smallerThan('xs')]: {
+      flexDirection: 'column-reverse',
+    },
+  },
 
-    control: {
-        [theme.fn.smallerThan("xs")]: {
-            width: "100%",
-            textAlign: "center",
-        },
-    },
-}));
+  control: {
+    [theme.fn.smallerThan('xs')]: {
+      width: '100%',
+      textAlign: 'center',
+    },
+  },
+}))
 
 export function ForgotPassword() {
-    const { classes } = useStyles();
-    const navigate = useNavigate();
-    const [email, setEmail] = useState("");
-    const [errorMessage, setErrorMessage] = useState("");
-    const [validInput, setValidInput] = useState(false);
+  const {classes} = useStyles()
+  const navigate = useNavigate()
+  const [email, setEmail] = useState('')
+  const [errorMessage, setErrorMessage] = useState('')
+  const [validInput, setValidInput] = useState(false)
 
-    const handleEmail = (e: React.ChangeEvent<HTMLInputElement>) => {
-        setEmail(e.target.value.trim());
-    };
+  const handleEmail = (e: React.ChangeEvent<HTMLInputElement>) => {
+    setEmail(e.target.value.trim())
+  }
 
-    const handlePasswordReset = async () => {
-        try {
-            if (email === "") {
-                throw "Please input an email";
-            }
+  const handlePasswordReset = async () => {
+    try {
+      if (email === '') {
+        throw 'Please input an email'
+      }
 
-            await sendPasswordResetEmail(auth, email);
-            setErrorMessage("");
-            setValidInput(true);
-        } catch (err: unknown) {
-            console.log(err);
-            if (err instanceof FirebaseError) {
-                if (authErrorList[err.code as keyof typeof authErrorList]) {
-                    setErrorMessage(
-                        authErrorList[err.code as keyof typeof authErrorList]
-                    );
-                } else if (err.code === "auth/user-not-found") {
-                    console.log("here");
-                    setValidInput(true);
-                    setErrorMessage("");
-                    return;
-                } else {
-                    setErrorMessage(defaultErrorMessage);
-                }
-            } else if (typeof err === "string") {
-                if (authErrorList[err as keyof typeof authErrorList]) {
-                    setErrorMessage(authErrorList[err as keyof typeof authErrorList]);
-                } else {
-                    setErrorMessage(defaultErrorMessage);
-                }
-            } else {
-                setErrorMessage(defaultErrorMessage);
-            }
-            setValidInput(false);
-        }
-    };
+      await sendPasswordResetEmail(auth, email)
+      setErrorMessage('')
+      setValidInput(true)
+    } catch (err: unknown) {
+      console.log(err)
+      if (err instanceof FirebaseError) {
+        if (authErrorList[err.code as keyof typeof authErrorList]) {
+          setErrorMessage(authErrorList[err.code as keyof typeof authErrorList])
+        } else if (err.code === 'auth/user-not-found') {
+          console.log('here')
+          setValidInput(true)
+          setErrorMessage('')
+          return
+        } else {
+          setErrorMessage(defaultErrorMessage)
+        }
+      } else if (typeof err === 'string') {
+        if (authErrorList[err as keyof typeof authErrorList]) {
+          setErrorMessage(authErrorList[err as keyof typeof authErrorList])
+        } else {
+          setErrorMessage(defaultErrorMessage)
+        }
+      } else {
+        setErrorMessage(defaultErrorMessage)
+      }
+      setValidInput(false)
+    }
+  }
 
-    const refreshPage = () => {
-        window.location.reload();
-    };
+  const refreshPage = () => {
+    window.location.reload()
+  }
 
-    useEffect(() => {
-        onAuthStateChanged(auth, (user) => {
-            if (user) {
-                navigate("/");
-            }
-        });
-    });
+  useEffect(() => {
+    onAuthStateChanged(auth, (user) => {
+      if (user) {
+        navigate('/')
+      }
+    })
+  })
 
-    return (
-        <motion.div
-            initial={{ opacity: 0 }}
-            animate={{ opacity: 1 }}
-            transition={{ duration: 0.3 }}
-        >
-            <Container size={460} my={30}>
-                <Title className={classes.title} align="center">
-                    Forgot your password?
-                </Title>
-                <Text color="dimmed" size="sm" align="center">
-                    Enter your email to get a reset link
-                </Text>
+  return (
+    <motion.div
+      initial={{opacity: 0}}
+      animate={{opacity: 1}}
+      transition={{duration: 0.3}}
+    >
+      <Container size={460} my={30}>
+        <Title className={classes.title} align="center">
+          Forgot your password?
+        </Title>
+        <Text color="dimmed" size="sm" align="center">
+          Enter your email to get a reset link
+        </Text>
 
-                <Paper withBorder shadow="md" p={30} radius="md" mt="xl">
-                    <TextInput
-                        label="Your email"
-                        placeholder="me@mantine.dev"
-                        required
-                        value={email}
-                        onChange={handleEmail}
-                    />
-                    <ErrorMessage error={!!errorMessage}>{errorMessage}</ErrorMessage>
-                    {validInput && (
-                        <p>
-                            If this email is registered, an email has been sent to reset your
-                            password. Please make sure to also check your spam box!
-                        </p>
-                    )}
-                    <Group position="apart" mt="lg" className={classes.controls}>
-                        <Anchor
-                            color="dimmed"
-                            size="sm"
-                            className={classes.control}
-                            onClick={() => navigate("/login")}
-                        >
-                            <Center inline>
-                                <IconArrowLeft size={12} stroke={1.5} />
-                                <Box ml={5}>Back to login page</Box>
-                            </Center>
-                        </Anchor>
-                        {validInput && (
-                            <Anchor onClick={refreshPage}>Send to a different email?</Anchor>
-                        )}
-                        <Button
-                            className={classes.control}
-                            onClick={handlePasswordReset}
-                            disabled={validInput}
-                        >
-                            {validInput ? "✓" : "Reset password"}
-                        </Button>
-                    </Group>
-                </Paper>
-            </Container>
-        </motion.div>
-    );
+        <Paper withBorder shadow="md" p={30} radius="md" mt="xl">
+          <TextInput
+            label="Your email"
+            placeholder="me@mantine.dev"
+            required
+            value={email}
+            onChange={handleEmail}
+          />
+          <ErrorMessage error={!!errorMessage}>{errorMessage}</ErrorMessage>
+          {validInput && (
+            <p>
+              If this email is registered, an email has been sent to reset your
+              password. Please make sure to also check your spam box!
+            </p>
+          )}
+          <Group position="apart" mt="lg" className={classes.controls}>
+            <Anchor
+              color="dimmed"
+              size="sm"
+              className={classes.control}
+              onClick={() => navigate('/login')}
+            >
+              <Center inline>
+                <IconArrowLeft size={12} stroke={1.5} />
+                <Box ml={5}>Back to login page</Box>
+              </Center>
+            </Anchor>
+            {validInput && (
+              <Anchor onClick={refreshPage}>Send to a different email?</Anchor>
+            )}
+            <Button
+              className={classes.control}
+              onClick={handlePasswordReset}
+              disabled={validInput}
+            >
+              {validInput ? '✓' : 'Reset password'}
+            </Button>
+          </Group>
+        </Paper>
+      </Container>
+    </motion.div>
+  )
 }
